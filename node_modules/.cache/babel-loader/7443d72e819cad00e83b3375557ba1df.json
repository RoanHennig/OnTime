{"ast":null,"code":"/**\r\n * DevExtreme (ui/scheduler/ui.scheduler.js)\r\n * Version: 19.1.6 (build 19263-1729)\r\n * Build date: Fri Sep 20 2019\r\n *\r\n * Copyright (c) 2012 - 2019 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar _renderer = require(\"../../core/renderer\");\n\nvar _renderer2 = _interopRequireDefault(_renderer);\n\nvar _callbacks = require(\"../../core/utils/callbacks\");\n\nvar _callbacks2 = _interopRequireDefault(_callbacks);\n\nvar _translator = require(\"../../animation/translator\");\n\nvar _translator2 = _interopRequireDefault(_translator);\n\nvar _ui = require(\"../widget/ui.errors\");\n\nvar _ui2 = _interopRequireDefault(_ui);\n\nvar _window = require(\"../../core/utils/window\");\n\nvar _window2 = _interopRequireDefault(_window);\n\nvar _dialog = require(\"../dialog\");\n\nvar _dialog2 = _interopRequireDefault(_dialog);\n\nvar _utils = require(\"./utils.recurrence\");\n\nvar _utils2 = _interopRequireDefault(_utils);\n\nvar _dom = require(\"../../core/utils/dom\");\n\nvar _dom2 = _interopRequireDefault(_dom);\n\nvar _date = require(\"../../core/utils/date\");\n\nvar _date2 = _interopRequireDefault(_date);\n\nvar _object = require(\"../../core/utils/object\");\n\nvar _object2 = _interopRequireDefault(_object);\n\nvar _iterator = require(\"../../core/utils/iterator\");\n\nvar _extend = require(\"../../core/utils/extend\");\n\nvar _array = require(\"../../core/utils/array\");\n\nvar _common = require(\"../../core/utils/common\");\n\nvar _type = require(\"../../core/utils/type\");\n\nvar _type2 = _interopRequireDefault(_type);\n\nvar _devices = require(\"../../core/devices\");\n\nvar _devices2 = _interopRequireDefault(_devices);\n\nvar _config = require(\"../../core/config\");\n\nvar _config2 = _interopRequireDefault(_config);\n\nvar _component_registrator = require(\"../../core/component_registrator\");\n\nvar _component_registrator2 = _interopRequireDefault(_component_registrator);\n\nvar _message = require(\"../../localization/message\");\n\nvar _message2 = _interopRequireDefault(_message);\n\nvar _date_serialization = require(\"../../core/utils/date_serialization\");\n\nvar _date_serialization2 = _interopRequireDefault(_date_serialization);\n\nvar _ui3 = require(\"../widget/ui.widget\");\n\nvar _ui4 = _interopRequireDefault(_ui3);\n\nvar _uiScheduler = require(\"./ui.scheduler.subscribes\");\n\nvar _uiScheduler2 = _interopRequireDefault(_uiScheduler);\n\nvar _function_template = require(\"../widget/function_template\");\n\nvar _function_template2 = _interopRequireDefault(_function_template);\n\nvar _desktopTooltipStrategy = require(\"./tooltip_strategies/desktopTooltipStrategy\");\n\nvar _mobileTooltipStrategy = require(\"./tooltip_strategies/mobileTooltipStrategy\");\n\nvar _uiScheduler3 = require(\"./ui.scheduler.header\");\n\nvar _uiScheduler4 = _interopRequireDefault(_uiScheduler3);\n\nvar _uiScheduler5 = require(\"./workspaces/ui.scheduler.work_space_day\");\n\nvar _uiScheduler6 = _interopRequireDefault(_uiScheduler5);\n\nvar _uiScheduler7 = require(\"./workspaces/ui.scheduler.work_space_week\");\n\nvar _uiScheduler8 = _interopRequireDefault(_uiScheduler7);\n\nvar _uiScheduler9 = require(\"./workspaces/ui.scheduler.work_space_work_week\");\n\nvar _uiScheduler10 = _interopRequireDefault(_uiScheduler9);\n\nvar _uiScheduler11 = require(\"./workspaces/ui.scheduler.work_space_month\");\n\nvar _uiScheduler12 = _interopRequireDefault(_uiScheduler11);\n\nvar _uiScheduler13 = require(\"./workspaces/ui.scheduler.timeline_day\");\n\nvar _uiScheduler14 = _interopRequireDefault(_uiScheduler13);\n\nvar _uiScheduler15 = require(\"./workspaces/ui.scheduler.timeline_week\");\n\nvar _uiScheduler16 = _interopRequireDefault(_uiScheduler15);\n\nvar _uiScheduler17 = require(\"./workspaces/ui.scheduler.timeline_work_week\");\n\nvar _uiScheduler18 = _interopRequireDefault(_uiScheduler17);\n\nvar _uiScheduler19 = require(\"./workspaces/ui.scheduler.timeline_month\");\n\nvar _uiScheduler20 = _interopRequireDefault(_uiScheduler19);\n\nvar _uiScheduler21 = require(\"./workspaces/ui.scheduler.agenda\");\n\nvar _uiScheduler22 = _interopRequireDefault(_uiScheduler21);\n\nvar _uiScheduler23 = require(\"./ui.scheduler.resource_manager\");\n\nvar _uiScheduler24 = _interopRequireDefault(_uiScheduler23);\n\nvar _uiScheduler25 = require(\"./ui.scheduler.appointment_model\");\n\nvar _uiScheduler26 = _interopRequireDefault(_uiScheduler25);\n\nvar _uiScheduler27 = require(\"./ui.scheduler.appointments\");\n\nvar _uiScheduler28 = _interopRequireDefault(_uiScheduler27);\n\nvar _uiSchedulerAppointments = require(\"./ui.scheduler.appointments.layout_manager\");\n\nvar _uiSchedulerAppointments2 = _interopRequireDefault(_uiSchedulerAppointments);\n\nvar _compactAppointmentsHelper = require(\"./compactAppointmentsHelper\");\n\nvar _uiScheduler29 = require(\"./timezones/ui.scheduler.timezones\");\n\nvar _uiScheduler30 = _interopRequireDefault(_uiScheduler29);\n\nvar _async_template_mixin = require(\"../shared/async_template_mixin\");\n\nvar _async_template_mixin2 = _interopRequireDefault(_async_template_mixin);\n\nvar _data_helper = require(\"../../data_helper\");\n\nvar _data_helper2 = _interopRequireDefault(_data_helper);\n\nvar _ui5 = require(\"./ui.loading\");\n\nvar _ui6 = _interopRequireDefault(_ui5);\n\nvar _uiScheduler31 = require(\"./ui.scheduler.appointment_form\");\n\nvar _uiScheduler32 = _interopRequireDefault(_uiScheduler31);\n\nvar _popup = require(\"../popup\");\n\nvar _popup2 = _interopRequireDefault(_popup);\n\nvar _deferred = require(\"../../core/utils/deferred\");\n\nvar _deferred2 = _interopRequireDefault(_deferred);\n\nvar _empty_template = require(\"../widget/empty_template\");\n\nvar _empty_template2 = _interopRequireDefault(_empty_template);\n\nvar _bindable_template = require(\"../widget/bindable_template\");\n\nvar _bindable_template2 = _interopRequireDefault(_bindable_template);\n\nvar _themes = require(\"../themes\");\n\nvar _themes2 = _interopRequireDefault(_themes);\n\nvar _browser = require(\"../../core/utils/browser\");\n\nvar _browser2 = _interopRequireDefault(_browser);\n\nvar _support = require(\"../../core/utils/support\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nvar when = _deferred2.default.when;\nvar Deferred = _deferred2.default.Deferred;\nvar toMs = _date2.default.dateToMilliseconds;\nvar WIDGET_CLASS = \"dx-scheduler\";\nvar WIDGET_SMALL_CLASS = WIDGET_CLASS + \"-small\";\nvar WIDGET_ADAPTIVE_CLASS = WIDGET_CLASS + \"-adaptive\";\nvar WIDGET_WIN_NO_TOUCH_CLASS = WIDGET_CLASS + \"-win-no-touch\";\nvar WIDGET_READONLY_CLASS = WIDGET_CLASS + \"-readonly\";\nvar APPOINTMENT_POPUP_CLASS = WIDGET_CLASS + \"-appointment-popup\";\nvar RECURRENCE_EDITOR_ITEM_CLASS = WIDGET_CLASS + \"-recurrence-rule-item\";\nvar RECURRENCE_EDITOR_OPENED_ITEM_CLASS = WIDGET_CLASS + \"-recurrence-rule-item-opened\";\nvar WIDGET_SMALL_WIDTH = 400;\nvar APPOINTMENT_POPUP_WIDTH = 610;\nvar APPOINTMENT_POPUP_FULLSCREEN_WINDOW_WIDTH = 768;\nvar TOOLBAR_ITEM_AFTER_LOCATION = \"after\";\nvar TOOLBAR_ITEM_BEFORE_LOCATION = \"before\";\nvar FULL_DATE_FORMAT = \"yyyyMMddTHHmmss\",\n    UTC_FULL_DATE_FORMAT = FULL_DATE_FORMAT + \"Z\";\nvar VIEWS_CONFIG = {\n  day: {\n    workSpace: _uiScheduler6.default,\n    renderingStrategy: \"vertical\"\n  },\n  week: {\n    workSpace: _uiScheduler8.default,\n    renderingStrategy: \"vertical\"\n  },\n  workWeek: {\n    workSpace: _uiScheduler10.default,\n    renderingStrategy: \"vertical\"\n  },\n  month: {\n    workSpace: _uiScheduler12.default,\n    renderingStrategy: \"horizontalMonth\"\n  },\n  timelineDay: {\n    workSpace: _uiScheduler14.default,\n    renderingStrategy: \"horizontal\"\n  },\n  timelineWeek: {\n    workSpace: _uiScheduler16.default,\n    renderingStrategy: \"horizontal\"\n  },\n  timelineWorkWeek: {\n    workSpace: _uiScheduler18.default,\n    renderingStrategy: \"horizontal\"\n  },\n  timelineMonth: {\n    workSpace: _uiScheduler20.default,\n    renderingStrategy: \"horizontalMonthLine\"\n  },\n  agenda: {\n    workSpace: _uiScheduler22.default,\n    renderingStrategy: \"agenda\"\n  }\n};\n\nvar Scheduler = _ui4.default.inherit({\n  _getDefaultOptions: function _getDefaultOptions() {\n    return (0, _extend.extend)(this.callBase(), {\n      views: [\"day\", \"week\"],\n      currentView: \"day\",\n      currentDate: _date2.default.trimTime(new Date()),\n      min: void 0,\n      max: void 0,\n      dateSerializationFormat: void 0,\n      firstDayOfWeek: void 0,\n      groups: [],\n      resources: [],\n      dataSource: null,\n      customizeDateNavigatorText: void 0,\n      appointmentTemplate: \"item\",\n      dropDownAppointmentTemplate: \"dropDownAppointment\",\n      appointmentCollectorTemplate: \"appointmentCollector\",\n      dataCellTemplate: null,\n      timeCellTemplate: null,\n      resourceCellTemplate: null,\n      dateCellTemplate: null,\n      startDayHour: 0,\n      endDayHour: 24,\n      editing: {\n        allowAdding: true,\n        allowDeleting: true,\n        allowDragging: true,\n        allowResizing: true,\n        allowUpdating: true\n      },\n      showAllDayPanel: true,\n      showCurrentTimeIndicator: true,\n      shadeUntilCurrentTime: false,\n      indicatorUpdateInterval: 3e5,\n      indicatorTime: void 0,\n      recurrenceEditMode: \"dialog\",\n      cellDuration: 30,\n      maxAppointmentsPerCell: \"auto\",\n      selectedCellData: [],\n      groupByDate: false,\n      onAppointmentRendered: null,\n      onAppointmentClick: null,\n      onAppointmentDblClick: null,\n      onAppointmentContextMenu: null,\n      onCellClick: null,\n      onCellContextMenu: null,\n      onAppointmentAdding: null,\n      onAppointmentAdded: null,\n      onAppointmentUpdating: null,\n      onAppointmentUpdated: null,\n      onAppointmentDeleting: null,\n      onAppointmentDeleted: null,\n      onAppointmentFormOpening: null,\n      appointmentTooltipTemplate: \"appointmentTooltip\",\n      appointmentPopupTemplate: \"appointmentPopup\",\n      crossScrollingEnabled: false,\n      useDropDownViewSwitcher: false,\n      startDateExpr: \"startDate\",\n      endDateExpr: \"endDate\",\n      textExpr: \"text\",\n      descriptionExpr: \"description\",\n      allDayExpr: \"allDay\",\n      recurrenceRuleExpr: \"recurrenceRule\",\n      recurrenceExceptionExpr: \"recurrenceException\",\n      remoteFiltering: false,\n      timeZone: \"\",\n      startDateTimeZoneExpr: \"startDateTimeZone\",\n      endDateTimeZoneExpr: \"endDateTimeZone\",\n      noDataText: _message2.default.format(\"dxCollectionWidget-noDataText\"),\n      adaptivityEnabled: false,\n      allowMultipleCellSelection: true,\n      _appointmentTooltipOffset: {\n        x: 0,\n        y: 0\n      },\n      _appointmentTooltipButtonsPosition: \"bottom\",\n      _appointmentTooltipOpenButtonText: _message2.default.format(\"dxScheduler-openAppointment\"),\n      _dropDownButtonIcon: \"overflow\",\n      _appointmentCountPerCell: 2,\n      _collectorOffset: 0,\n      _appointmentOffset: 26\n    });\n  },\n  _defaultOptionsRules: function _defaultOptionsRules() {\n    return this.callBase().concat([{\n      device: function device() {\n        return \"desktop\" === _devices2.default.real().deviceType && !_devices2.default.isSimulator();\n      },\n      options: {\n        focusStateEnabled: true\n      }\n    }, {\n      device: function device() {\n        return !_devices2.default.current().generic;\n      },\n      options: {\n        useDropDownViewSwitcher: true,\n        editing: {\n          allowDragging: false,\n          allowResizing: false\n        }\n      }\n    }, {\n      device: function device() {\n        return _themes2.default.isMaterial();\n      },\n      options: {\n        useDropDownViewSwitcher: true,\n        dateCellTemplate: function dateCellTemplate(data, index, element) {\n          var text = data.text;\n          text.split(\" \").forEach(function (text, index) {\n            var span = (0, _renderer2.default)(\"<span>\").text(text).addClass(\"dx-scheduler-header-panel-cell-date\");\n            (0, _renderer2.default)(element).append(span);\n\n            if (!index) {\n              (0, _renderer2.default)(element).append(\" \");\n            }\n          });\n        },\n        _appointmentTooltipOffset: {\n          x: 0,\n          y: 11\n        },\n        _appointmentTooltipButtonsPosition: \"top\",\n        _appointmentTooltipOpenButtonText: null,\n        _dropDownButtonIcon: \"chevrondown\",\n        _appointmentCountPerCell: 1,\n        _collectorOffset: 20,\n        _appointmentOffset: 30\n      }\n    }]);\n  },\n  _setDeprecatedOptions: function _setDeprecatedOptions() {\n    this.callBase();\n    (0, _extend.extend)(this._deprecatedOptions, {\n      onAppointmentFormCreated: {\n        since: \"18.2\",\n        alias: \"onAppointmentFormOpening\"\n      }\n    });\n  },\n  _postponeDataSourceLoading: function _postponeDataSourceLoading(promise) {\n    this.postponedOperations.add(\"_reloadDataSource\", this._reloadDataSource.bind(this), promise);\n  },\n  _postponeResourceLoading: function _postponeResourceLoading() {\n    var _this = this;\n\n    var whenLoaded = this.postponedOperations.add(\"_loadResources\", function () {\n      return _this._loadResources();\n    }),\n        resolveCallbacks = new Deferred();\n    whenLoaded.done(function (resources) {\n      resolveCallbacks.resolve(resources);\n    });\n\n    this._postponeDataSourceLoading(whenLoaded);\n\n    return resolveCallbacks.promise();\n  },\n  _optionChanged: function _optionChanged(args) {\n    var _this2 = this;\n\n    var value = args.value,\n        name = args.name;\n\n    switch (args.name) {\n      case \"customizeDateNavigatorText\":\n        this._updateOption(\"header\", name, value);\n\n        break;\n\n      case \"firstDayOfWeek\":\n        this._updateOption(\"workSpace\", name, value);\n\n        this._updateOption(\"header\", name, value);\n\n        break;\n\n      case \"currentDate\":\n        value = this._dateOption(name);\n        value = _date2.default.trimTime(new Date(value));\n        this.option(\"selectedCellData\", []);\n\n        this._workSpace.option(name, new Date(value));\n\n        this._header.option(name, new Date(value));\n\n        this._header.option(\"displayedDate\", this._workSpace._getViewStartByOptions());\n\n        this._appointments.option(\"items\", []);\n\n        this._filterAppointmentsByDate();\n\n        this._postponeDataSourceLoading();\n\n        break;\n\n      case \"dataSource\":\n        this._initDataSource();\n\n        this._customizeStoreLoadOptions();\n\n        this._appointmentModel.setDataSource(this._dataSource);\n\n        this._postponeResourceLoading().done(function (resources) {\n          _this2._filterAppointmentsByDate();\n\n          _this2._updateOption(\"workSpace\", \"showAllDayPanel\", _this2.option(\"showAllDayPanel\"));\n        });\n\n        break;\n\n      case \"min\":\n      case \"max\":\n        value = this._dateOption(name);\n\n        this._updateOption(\"header\", name, new Date(value));\n\n        this._updateOption(\"workSpace\", name, new Date(value));\n\n        break;\n\n      case \"views\":\n        this._processCurrentView();\n\n        if (this._getCurrentViewOptions()) {\n          this.repaint();\n        } else {\n          this._header.option(name, value);\n        }\n\n        break;\n\n      case \"useDropDownViewSwitcher\":\n        this._header.option(name, value);\n\n        break;\n\n      case \"currentView\":\n        this._processCurrentView();\n\n        this._appointments.option({\n          items: [],\n          allowDrag: this._allowDragging(),\n          allowResize: this._allowResizing(),\n          itemTemplate: this._getAppointmentTemplate(\"appointmentTemplate\")\n        });\n\n        this._postponeResourceLoading().done(function (resources) {\n          _this2.getLayoutManager().initRenderingStrategy(_this2._getAppointmentsRenderingStrategy());\n\n          _this2._refreshWorkSpace(resources);\n\n          _this2._updateHeader();\n\n          _this2._filterAppointmentsByDate();\n\n          _this2._appointments.option(\"allowAllDayResize\", \"day\" !== value);\n        });\n\n        break;\n\n      case \"appointmentTemplate\":\n        this._appointments.option(\"itemTemplate\", value);\n\n        break;\n\n      case \"dateCellTemplate\":\n      case \"resourceCellTemplate\":\n      case \"dataCellTemplate\":\n      case \"timeCellTemplate\":\n        this._updateOption(\"workSpace\", name, value);\n\n        this.repaint();\n        break;\n\n      case \"groups\":\n        this._postponeResourceLoading().done(function (resources) {\n          _this2._refreshWorkSpace(resources);\n\n          _this2._filterAppointmentsByDate();\n        });\n\n        break;\n\n      case \"resources\":\n        this._resourcesManager.setResources(this.option(\"resources\"));\n\n        this._appointmentModel.setDataAccessors(this._combineDataAccessors());\n\n        this._postponeResourceLoading().done(function (resources) {\n          _this2._appointments.option(\"items\", []);\n\n          _this2._refreshWorkSpace(resources);\n\n          _this2._filterAppointmentsByDate();\n        });\n\n        break;\n\n      case \"startDayHour\":\n      case \"endDayHour\":\n        this._appointments.option(\"items\", []);\n\n        this._updateOption(\"workSpace\", name, value);\n\n        this._appointments.repaint();\n\n        this._filterAppointmentsByDate();\n\n        this._postponeDataSourceLoading();\n\n        break;\n\n      case \"onAppointmentAdding\":\n      case \"onAppointmentAdded\":\n      case \"onAppointmentUpdating\":\n      case \"onAppointmentUpdated\":\n      case \"onAppointmentDeleting\":\n      case \"onAppointmentDeleted\":\n      case \"onAppointmentFormOpening\":\n        this._actions[name] = this._createActionByOption(name);\n        break;\n\n      case \"onAppointmentRendered\":\n        this._appointments.option(\"onItemRendered\", this._getAppointmentRenderedAction());\n\n        break;\n\n      case \"onAppointmentClick\":\n        this._appointments.option(\"onItemClick\", this._createActionByOption(name));\n\n        break;\n\n      case \"onAppointmentDblClick\":\n        this._appointments.option(name, this._createActionByOption(name));\n\n        break;\n\n      case \"onAppointmentContextMenu\":\n        this._appointments.option(\"onItemContextMenu\", this._createActionByOption(name));\n\n        break;\n\n      case \"noDataText\":\n      case \"allowMultipleCellSelection\":\n      case \"selectedCellData\":\n      case \"accessKey\":\n      case \"onCellClick\":\n        this._workSpace.option(name, value);\n\n        break;\n\n      case \"onCellContextMenu\":\n        this._workSpace.option(name, value);\n\n        break;\n\n      case \"crossScrollingEnabled\":\n        this._postponeResourceLoading().done(function (resources) {\n          _this2._appointments.option(\"items\", []);\n\n          _this2._refreshWorkSpace(resources);\n\n          if (_this2._readyToRenderAppointments) {\n            _this2._appointments.option(\"items\", _this2._getAppointmentsToRepaint());\n          }\n        });\n\n        break;\n\n      case \"cellDuration\":\n        this._appointments.option(\"items\", []);\n\n        if (this._readyToRenderAppointments) {\n          this._updateOption(\"workSpace\", \"hoursInterval\", value / 60);\n\n          this._appointments.option(\"items\", this._getAppointmentsToRepaint());\n        }\n\n        break;\n\n      case \"tabIndex\":\n      case \"focusStateEnabled\":\n        this._updateOption(\"header\", name, value);\n\n        this._updateOption(\"workSpace\", name, value);\n\n        this._appointments.option(name, value);\n\n        this.callBase(args);\n        break;\n\n      case \"width\":\n        this._updateOption(\"header\", name, value);\n\n        if (this.option(\"crossScrollingEnabled\")) {\n          this._updateOption(\"workSpace\", \"width\", value);\n        }\n\n        this.callBase(args);\n\n        this._dimensionChanged();\n\n        break;\n\n      case \"height\":\n        this.callBase(args);\n\n        this._dimensionChanged();\n\n        break;\n\n      case \"editing\":\n        this._initEditing();\n\n        var editing = this._editing;\n\n        this._bringEditingModeToAppointments(editing);\n\n        this.hideAppointmentTooltip();\n\n        this._cleanPopup();\n\n        break;\n\n      case \"showAllDayPanel\":\n        this._postponeResourceLoading().done(function (resources) {\n          _this2._filterAppointmentsByDate();\n\n          _this2._updateOption(\"workSpace\", \"allDayExpanded\", value);\n\n          _this2._updateOption(\"workSpace\", name, value);\n        });\n\n        break;\n\n      case \"showCurrentTimeIndicator\":\n      case \"indicatorTime\":\n      case \"indicatorUpdateInterval\":\n      case \"shadeUntilCurrentTime\":\n      case \"groupByDate\":\n        this._updateOption(\"workSpace\", name, value);\n\n        this.repaint();\n        break;\n\n      case \"appointmentTooltipTemplate\":\n      case \"appointmentPopupTemplate\":\n      case \"recurrenceEditMode\":\n      case \"remoteFiltering\":\n      case \"timeZone\":\n      case \"dropDownAppointmentTemplate\":\n      case \"appointmentCollectorTemplate\":\n      case \"_appointmentTooltipOffset\":\n      case \"_appointmentTooltipButtonsPosition\":\n      case \"_appointmentTooltipOpenButtonText\":\n      case \"_dropDownButtonIcon\":\n      case \"_appointmentCountPerCell\":\n      case \"_collectorOffset\":\n      case \"_appointmentOffset\":\n        this.repaint();\n        break;\n\n      case \"dateSerializationFormat\":\n        break;\n\n      case \"maxAppointmentsPerCell\":\n        break;\n\n      case \"startDateExpr\":\n      case \"endDateExpr\":\n      case \"startDateTimeZoneExpr\":\n      case \"endDateTimeZoneExpr\":\n      case \"textExpr\":\n      case \"descriptionExpr\":\n      case \"allDayExpr\":\n      case \"recurrenceRuleExpr\":\n      case \"recurrenceExceptionExpr\":\n        this._updateExpression(name, value);\n\n        this._appointmentModel.setDataAccessors(this._combineDataAccessors());\n\n        this._initAppointmentTemplate();\n\n        this.repaint();\n        break;\n\n      case \"adaptivityEnabled\":\n        this._toggleAdaptiveClass();\n\n        this.repaint();\n        break;\n\n      default:\n        this.callBase(args);\n    }\n  },\n  _updateHeader: function _updateHeader() {\n    var viewCountConfig = this._getViewCountConfig();\n\n    this._header.option(\"intervalCount\", viewCountConfig.intervalCount);\n\n    this._header.option(\"displayedDate\", this._workSpace._getViewStartByOptions());\n\n    this._header.option(\"min\", this._dateOption(\"min\"));\n\n    this._header.option(\"max\", this._dateOption(\"max\"));\n\n    this._header.option(\"currentDate\", this._dateOption(\"currentDate\"));\n\n    this._header.option(\"firstDayOfWeek\", this._getCurrentViewOption(\"firstDayOfWeek\"));\n\n    this._header.option(\"currentView\", this._currentView);\n  },\n  _dateOption: function _dateOption(optionName) {\n    var optionValue = this._getCurrentViewOption(optionName);\n\n    return _date_serialization2.default.deserializeDate(optionValue);\n  },\n  _getSerializationFormat: function _getSerializationFormat(optionName) {\n    var value = this._getCurrentViewOption(optionName);\n\n    if (\"number\" === typeof value) {\n      return \"number\";\n    }\n\n    if (!_type2.default.isString(value)) {\n      return;\n    }\n\n    return _date_serialization2.default.getDateSerializationFormat(value);\n  },\n  _bringEditingModeToAppointments: function _bringEditingModeToAppointments(editing) {\n    var editingConfig = {\n      allowDelete: editing.allowUpdating && editing.allowDeleting\n    };\n\n    if (!this._isAgenda()) {\n      editingConfig.allowDrag = editing.allowDragging;\n      editingConfig.allowResize = editing.allowResizing;\n      editingConfig.allowAllDayResize = editing.allowResizing && this._supportAllDayResizing();\n    }\n\n    this._appointments.option(editingConfig);\n  },\n  _isAgenda: function _isAgenda() {\n    return \"agenda\" === this._getAppointmentsRenderingStrategy();\n  },\n  _allowDragging: function _allowDragging() {\n    return this._editing.allowDragging && !this._isAgenda();\n  },\n  _allowResizing: function _allowResizing() {\n    return this._editing.allowResizing && !this._isAgenda();\n  },\n  _allowAllDayResizing: function _allowAllDayResizing() {\n    return this._editing.allowResizing && this._supportAllDayResizing();\n  },\n  _supportAllDayResizing: function _supportAllDayResizing() {\n    return \"day\" !== this._getCurrentViewType() || this._currentView.intervalCount > 1;\n  },\n  _isAllDayExpanded: function _isAllDayExpanded(items) {\n    return this.option(\"showAllDayPanel\") && this._appointmentModel.hasAllDayAppointments(items, this._getCurrentViewOption(\"startDayHour\"), this._getCurrentViewOption(\"endDayHour\"));\n  },\n  _getTimezoneOffsetByOption: function _getTimezoneOffsetByOption(date) {\n    return this._calculateTimezoneByValue(this.option(\"timeZone\"), date);\n  },\n  _calculateTimezoneByValue: function _calculateTimezoneByValue(timezone, date) {\n    var result = timezone;\n\n    if (\"string\" === typeof timezone) {\n      date = date || new Date();\n      var dateUtc = Date.UTC(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate(), date.getUTCHours(), date.getUTCMinutes());\n      result = _uiScheduler30.default.getTimezoneOffsetById(timezone, dateUtc);\n    }\n\n    return result;\n  },\n  _filterAppointmentsByDate: function _filterAppointmentsByDate() {\n    var dateRange = this._workSpace.getDateRange();\n\n    this._appointmentModel.filterByDate(dateRange[0], dateRange[1], this.option(\"remoteFiltering\"), this.option(\"dateSerializationFormat\"));\n  },\n  _loadResources: function _loadResources() {\n    var groups = this._getCurrentViewOption(\"groups\"),\n        result = new Deferred();\n\n    this._resourcesManager.loadResources(groups).done(function (resources) {\n      this._loadedResources = resources;\n      result.resolve(resources);\n    }.bind(this));\n\n    return result.promise();\n  },\n  _dataSourceLoadedCallback: (0, _callbacks2.default)(),\n  _reloadDataSource: function _reloadDataSource() {\n    var result = new Deferred();\n\n    if (this._dataSource) {\n      this._dataSource.load().done(function () {\n        _ui6.default.hide();\n\n        this._fireContentReadyAction(result);\n      }.bind(this)).fail(function () {\n        _ui6.default.hide();\n\n        result.reject();\n      });\n\n      this._dataSource.isLoading() && _ui6.default.show({\n        container: this.$element(),\n        position: {\n          of: this.$element()\n        }\n      });\n    } else {\n      this._fireContentReadyAction(result);\n    }\n\n    return result.promise();\n  },\n  _fireContentReadyAction: function _fireContentReadyAction(result) {\n    this.callBase();\n    result && result.resolve();\n  },\n  _dimensionChanged: function _dimensionChanged() {\n    var filteredItems = this.getFilteredItems();\n\n    this._toggleSmallClass();\n\n    if (!this._isAgenda() && filteredItems && this._isVisible()) {\n      this._workSpace._cleanAllowedPositions();\n\n      this._workSpace.option(\"allDayExpanded\", this._isAllDayExpanded(filteredItems));\n\n      this._workSpace._dimensionChanged();\n\n      var appointments = this._layoutManager.createAppointmentsMap(filteredItems);\n\n      this._appointments.option(\"items\", appointments);\n    }\n\n    this.hideAppointmentTooltip();\n    this.resizePopup();\n\n    this._updatePopupFullScreenMode();\n  },\n  _clean: function _clean() {\n    this._cleanPopup();\n\n    this.callBase();\n  },\n  _toggleSmallClass: function _toggleSmallClass() {\n    var width = this.$element().get(0).getBoundingClientRect().width;\n    this.$element().toggleClass(WIDGET_SMALL_CLASS, width < WIDGET_SMALL_WIDTH);\n  },\n  _toggleAdaptiveClass: function _toggleAdaptiveClass() {\n    this.$element().toggleClass(WIDGET_ADAPTIVE_CLASS, this.option(\"adaptivityEnabled\"));\n  },\n  _visibilityChanged: function _visibilityChanged(visible) {\n    visible && this._dimensionChanged();\n  },\n  _dataSourceOptions: function _dataSourceOptions() {\n    return {\n      paginate: false\n    };\n  },\n  _init: function _init() {\n    this._initExpressions({\n      startDate: this.option(\"startDateExpr\"),\n      endDate: this.option(\"endDateExpr\"),\n      startDateTimeZone: this.option(\"startDateTimeZoneExpr\"),\n      endDateTimeZone: this.option(\"endDateTimeZoneExpr\"),\n      allDay: this.option(\"allDayExpr\"),\n      text: this.option(\"textExpr\"),\n      description: this.option(\"descriptionExpr\"),\n      recurrenceRule: this.option(\"recurrenceRuleExpr\"),\n      recurrenceException: this.option(\"recurrenceExceptionExpr\")\n    });\n\n    this.callBase();\n\n    this._initDataSource();\n\n    this._loadedResources = [];\n    this._proxiedCustomizeStoreLoadOptionsHandler = this._customizeStoreLoadOptionsHandler.bind(this);\n\n    this._customizeStoreLoadOptions();\n\n    this.$element().addClass(WIDGET_CLASS).toggleClass(WIDGET_WIN_NO_TOUCH_CLASS, !!(_browser2.default.msie && _support.touch));\n\n    this._initEditing();\n\n    this._resourcesManager = new _uiScheduler24.default(this.option(\"resources\"));\n\n    var combinedDataAccessors = this._combineDataAccessors();\n\n    this._appointmentModel = new _uiScheduler26.default(this._dataSource, combinedDataAccessors, this.getAppointmentDurationInMinutes());\n\n    this._initActions();\n\n    this._compactAppointmentsHelper = new _compactAppointmentsHelper.CompactAppointmentsHelper(this);\n    this._subscribes = _uiScheduler2.default;\n  },\n  _initTemplates: function _initTemplates() {\n    this.callBase();\n\n    this._initAppointmentTemplate();\n\n    this._defaultTemplates.appointmentTooltip = new _empty_template2.default(this);\n    this._defaultTemplates.appointmentPopup = new _empty_template2.default(this);\n    this._defaultTemplates.dropDownAppointment = new _empty_template2.default(this);\n  },\n  _initAppointmentTemplate: function _initAppointmentTemplate() {\n    var that = this;\n    this._defaultTemplates.item = new _bindable_template2.default(function ($container, data, model) {\n      var appointmentsInst = that.getAppointmentsInstance();\n\n      appointmentsInst._renderAppointmentTemplate.call(appointmentsInst, $container, data, model);\n    }, [\"html\", \"text\", \"startDate\", \"endDate\", \"allDay\", \"description\", \"recurrenceRule\", \"recurrenceException\", \"startDateTimeZone\", \"endDateTimeZone\"], this.option(\"integrationOptions.watchMethod\"), {\n      text: this._dataAccessors.getter.text,\n      startDate: this._dataAccessors.getter.startDate,\n      endDate: this._dataAccessors.getter.endDate,\n      startDateTimeZone: this._dataAccessors.getter.startDateTimeZone,\n      endDateTimeZone: this._dataAccessors.getter.endDateTimeZone,\n      allDay: this._dataAccessors.getter.allDay,\n      recurrenceRule: this._dataAccessors.getter.recurrenceRule\n    });\n  },\n  _combineDataAccessors: function _combineDataAccessors() {\n    var resourcesDataAccessors = this._resourcesManager._dataAccessors,\n        result = (0, _extend.extend)(true, {}, this._dataAccessors);\n    (0, _iterator.each)(resourcesDataAccessors, function (type, accessor) {\n      result[type].resources = accessor;\n    }.bind(this));\n    return result;\n  },\n  _renderContent: function _renderContent() {\n    this._renderContentImpl();\n  },\n  _dataSourceChangedHandler: function _dataSourceChangedHandler(result) {\n    if (this._readyToRenderAppointments) {\n      this._workSpaceRecalculation.done(function () {\n        this._filteredItems = this.fire(\"prerenderFilter\");\n\n        this._workSpace.option(\"allDayExpanded\", this._isAllDayExpanded(this._filteredItems));\n\n        if (this._isAgenda()) {\n          this.getRenderingStrategyInstance().calculateRows(this._filteredItems, 7, this.option(\"currentDate\"), true);\n        }\n\n        if (this._filteredItems.length && this._isVisible()) {\n          this._appointments.option(\"items\", this._getAppointmentsToRepaint());\n\n          this._appointmentModel.cleanModelState();\n        } else {\n          this._appointments.option(\"items\", []);\n        }\n\n        if (this._isAgenda()) {\n          this._workSpace._renderView();\n\n          this._dataSourceLoadedCallback.fireWith(this, [result]);\n        }\n      }.bind(this));\n    }\n  },\n  _getAppointmentsToRepaint: function _getAppointmentsToRepaint() {\n    var appointments = this._layoutManager.createAppointmentsMap(this._filteredItems);\n\n    return this._layoutManager.getRepaintedAppointments(appointments, this.getAppointmentsInstance().option(\"items\"));\n  },\n  _initExpressions: function _initExpressions(fields) {\n    var dataCoreUtils = require(\"../../core/utils/data\"),\n        isDateField = function isDateField(field) {\n      return \"startDate\" === field || \"endDate\" === field;\n    };\n\n    if (!this._dataAccessors) {\n      this._dataAccessors = {\n        getter: {},\n        setter: {},\n        expr: {}\n      };\n    }\n\n    (0, _iterator.each)(fields, function (name, expr) {\n      if (expr) {\n        var getter = dataCoreUtils.compileGetter(expr),\n            setter = dataCoreUtils.compileSetter(expr);\n        var dateGetter, dateSetter;\n\n        if (isDateField(name)) {\n          var that = this;\n\n          dateGetter = function dateGetter() {\n            var value = getter.apply(this, arguments);\n\n            if ((0, _config2.default)().forceIsoDateParsing) {\n              if (!that.option(\"dateSerializationFormat\")) {\n                var format = _date_serialization2.default.getDateSerializationFormat(value);\n\n                if (format) {\n                  that.option(\"dateSerializationFormat\", format);\n                }\n              }\n\n              value = _date_serialization2.default.deserializeDate(value);\n            }\n\n            return value;\n          };\n\n          dateSetter = function dateSetter(object, value) {\n            if ((0, _config2.default)().forceIsoDateParsing || that.option(\"dateSerializationFormat\")) {\n              value = _date_serialization2.default.serializeDate(value, that.option(\"dateSerializationFormat\"));\n            }\n\n            setter.call(this, object, value);\n          };\n        }\n\n        this._dataAccessors.getter[name] = dateGetter || getter;\n        this._dataAccessors.setter[name] = dateSetter || setter;\n        this._dataAccessors.expr[name + \"Expr\"] = expr;\n      } else {\n        delete this._dataAccessors.getter[name];\n        delete this._dataAccessors.setter[name];\n        delete this._dataAccessors.expr[name + \"Expr\"];\n      }\n    }.bind(this));\n  },\n  _updateExpression: function _updateExpression(name, value) {\n    var exprObj = {};\n    exprObj[name.replace(\"Expr\", \"\")] = value;\n\n    this._initExpressions(exprObj);\n  },\n  _initEditing: function _initEditing() {\n    var editing = this.option(\"editing\");\n    this._editing = {\n      allowAdding: !!editing,\n      allowUpdating: !!editing,\n      allowDeleting: !!editing,\n      allowResizing: !!editing,\n      allowDragging: !!editing\n    };\n\n    if (_type2.default.isObject(editing)) {\n      this._editing = (0, _extend.extend)(this._editing, editing);\n    }\n\n    this._editing.allowDragging = this._editing.allowDragging && this._editing.allowUpdating;\n    this._editing.allowResizing = this._editing.allowResizing && this._editing.allowUpdating;\n    this.$element().toggleClass(WIDGET_READONLY_CLASS, this._isReadOnly());\n  },\n  _isReadOnly: function _isReadOnly() {\n    var result = true,\n        editing = this._editing;\n\n    for (var prop in editing) {\n      if (Object.prototype.hasOwnProperty.call(editing, prop)) {\n        result = result && !editing[prop];\n      }\n    }\n\n    return result;\n  },\n  _customizeStoreLoadOptions: function _customizeStoreLoadOptions() {\n    this._dataSource && this._dataSource.on(\"customizeStoreLoadOptions\", this._proxiedCustomizeStoreLoadOptionsHandler);\n  },\n  _dispose: function _dispose() {\n    this._appointmentTooltip && this._appointmentTooltip.dispose();\n    this.hideAppointmentPopup();\n    this.hideAppointmentTooltip();\n\n    this._cleanAsyncTemplatesTimer();\n\n    this._dataSource && this._dataSource.off(\"customizeStoreLoadOptions\", this._proxiedCustomizeStoreLoadOptionsHandler);\n    this.callBase();\n  },\n  _customizeStoreLoadOptionsHandler: function _customizeStoreLoadOptionsHandler(options) {\n    options.storeLoadOptions.dxScheduler = {\n      startDate: this.getStartViewDate(),\n      endDate: this.getEndViewDate(),\n      resources: this.option(\"resources\")\n    };\n  },\n  _initActions: function _initActions() {\n    this._actions = {\n      onAppointmentAdding: this._createActionByOption(\"onAppointmentAdding\"),\n      onAppointmentAdded: this._createActionByOption(\"onAppointmentAdded\"),\n      onAppointmentUpdating: this._createActionByOption(\"onAppointmentUpdating\"),\n      onAppointmentUpdated: this._createActionByOption(\"onAppointmentUpdated\"),\n      onAppointmentDeleting: this._createActionByOption(\"onAppointmentDeleting\"),\n      onAppointmentDeleted: this._createActionByOption(\"onAppointmentDeleted\"),\n      onAppointmentFormOpening: this._createActionByOption(\"onAppointmentFormOpening\")\n    };\n  },\n  _getAppointmentRenderedAction: function _getAppointmentRenderedAction() {\n    return this._createActionByOption(\"onAppointmentRendered\", {\n      excludeValidators: [\"disabled\", \"readOnly\"]\n    });\n  },\n  _renderFocusTarget: _common.noop,\n  _initMarkup: function _initMarkup() {\n    this.callBase();\n\n    this._processCurrentView();\n\n    this._renderHeader();\n\n    this._layoutManager = new _uiSchedulerAppointments2.default(this, this._getAppointmentsRenderingStrategy());\n    this._appointments = this._createComponent(\"<div>\", _uiScheduler28.default, this._appointmentsConfig());\n\n    this._appointments.option(\"itemTemplate\", this._getAppointmentTemplate(\"appointmentTemplate\"));\n\n    this._appointmentTooltip = this.option(\"adaptivityEnabled\") ? new _mobileTooltipStrategy.MobileTooltipStrategy(this) : new _desktopTooltipStrategy.DesktopTooltipStrategy(this);\n\n    if (this._isLoaded()) {\n      this._initMarkupCore(this._loadedResources);\n\n      this._dataSourceChangedHandler(this._dataSource.items());\n\n      this._fireContentReadyAction();\n    } else {\n      this._loadResources().done(function (resources) {\n        this._initMarkupCore(resources);\n\n        this._reloadDataSource();\n      }.bind(this));\n    }\n  },\n  _initMarkupCore: function _initMarkupCore(resources) {\n    var _this3 = this;\n\n    this._readyToRenderAppointments = _window2.default.hasWindow();\n    this._workSpace && this._cleanWorkspace();\n\n    this._renderWorkSpace(resources);\n\n    this._appointments.option({\n      fixedContainer: this._workSpace.getFixedContainer(),\n      allDayContainer: this._workSpace.getAllDayContainer()\n    });\n\n    this._waitAsyncTemplates(function () {\n      _this3._workSpaceRecalculation && _this3._workSpaceRecalculation.resolve();\n    });\n\n    this._filterAppointmentsByDate();\n  },\n  _isLoaded: function _isLoaded() {\n    return this._isResourcesLoaded() && this._isDataSourceLoaded();\n  },\n  _isResourcesLoaded: function _isResourcesLoaded() {\n    return _type2.default.isDefined(this._loadedResources);\n  },\n  _isDataSourceLoaded: function _isDataSourceLoaded() {\n    return this._dataSource && this._dataSource.isLoaded();\n  },\n  _render: function _render() {\n    this._toggleSmallClass();\n\n    this._toggleAdaptiveClass();\n\n    this.callBase();\n  },\n  _renderHeader: function _renderHeader() {\n    var $header = (0, _renderer2.default)(\"<div>\").appendTo(this.$element());\n    this._header = this._createComponent($header, _uiScheduler4.default, this._headerConfig());\n  },\n  _headerConfig: function _headerConfig() {\n    var result,\n        currentViewOptions = this._getCurrentViewOptions(),\n        countConfig = this._getViewCountConfig();\n\n    result = (0, _extend.extend)({\n      firstDayOfWeek: this.option(\"firstDayOfWeek\"),\n      currentView: this._currentView,\n      tabIndex: this.option(\"tabIndex\"),\n      focusStateEnabled: this.option(\"focusStateEnabled\"),\n      width: this.option(\"width\"),\n      rtlEnabled: this.option(\"rtlEnabled\"),\n      useDropDownViewSwitcher: this.option(\"useDropDownViewSwitcher\"),\n      _dropDownButtonIcon: this.option(\"_dropDownButtonIcon\"),\n      customizeDateNavigatorText: this.option(\"customizeDateNavigatorText\")\n    }, currentViewOptions);\n    result.observer = this;\n    result.intervalCount = countConfig.intervalCount;\n    result.views = this.option(\"views\");\n    result.min = new Date(this._dateOption(\"min\"));\n    result.max = new Date(this._dateOption(\"max\"));\n    result.currentDate = _date2.default.trimTime(new Date(this._dateOption(\"currentDate\")));\n    return result;\n  },\n  _appointmentsConfig: function _appointmentsConfig() {\n    var that = this;\n    var config = {\n      observer: this,\n      onItemRendered: this._getAppointmentRenderedAction(),\n      onItemClick: this._createActionByOption(\"onAppointmentClick\"),\n      onItemContextMenu: this._createActionByOption(\"onAppointmentContextMenu\"),\n      onAppointmentDblClick: this._createActionByOption(\"onAppointmentDblClick\"),\n      tabIndex: this.option(\"tabIndex\"),\n      focusStateEnabled: this.option(\"focusStateEnabled\"),\n      allowDrag: this._allowDragging(),\n      allowDelete: this._editing.allowUpdating && this._editing.allowDeleting,\n      allowResize: this._allowResizing(),\n      allowAllDayResize: this._allowAllDayResizing(),\n      rtlEnabled: this.option(\"rtlEnabled\"),\n      onContentReady: function onContentReady() {\n        that._workSpace && that._workSpace.option(\"allDayExpanded\", that._isAllDayExpanded(that.getFilteredItems()));\n      }\n    };\n    return config;\n  },\n  getCollectorOffset: function getCollectorOffset() {\n    if (this._workSpace.needApplyCollectorOffset() && !this.option(\"adaptivityEnabled\")) {\n      return this.option(\"_collectorOffset\");\n    } else {\n      return 0;\n    }\n  },\n  getAppointmentDurationInMinutes: function getAppointmentDurationInMinutes() {\n    return this._getCurrentViewOption(\"cellDuration\");\n  },\n  _processCurrentView: function _processCurrentView() {\n    var views = this.option(\"views\"),\n        currentView = this.option(\"currentView\"),\n        that = this;\n    this._currentView = currentView;\n    (0, _iterator.each)(views, function (_, view) {\n      var isViewIsObject = _type2.default.isObject(view),\n          viewName = isViewIsObject ? view.name : view,\n          viewType = view.type;\n\n      if (currentView === viewName || currentView === viewType) {\n        that._currentView = view;\n        return false;\n      }\n    });\n  },\n  _getCurrentViewType: function _getCurrentViewType() {\n    return this._currentView.type || this._currentView;\n  },\n  _getAppointmentsRenderingStrategy: function _getAppointmentsRenderingStrategy() {\n    return VIEWS_CONFIG[this._getCurrentViewType()].renderingStrategy;\n  },\n  _renderWorkSpace: function _renderWorkSpace(groups) {\n    this._readyToRenderAppointments && this._toggleSmallClass();\n    var $workSpace = (0, _renderer2.default)(\"<div>\").appendTo(this.$element());\n\n    var countConfig = this._getViewCountConfig();\n\n    this._workSpace = this._createComponent($workSpace, VIEWS_CONFIG[this._getCurrentViewType()].workSpace, this._workSpaceConfig(groups, countConfig));\n\n    this._workSpace.getWorkArea().append(this._appointments.$element());\n\n    this._recalculateWorkspace();\n\n    countConfig.startDate && this._header && this._header.option(\"currentDate\", this._workSpace._getHeaderDate());\n\n    this._appointments.option(\"_collectorOffset\", this.getCollectorOffset());\n  },\n  _getViewCountConfig: function _getViewCountConfig() {\n    var currentView = this.option(\"currentView\");\n\n    var view = this._getViewByName(currentView),\n        viewCount = view && view.intervalCount || 1,\n        startDate = view && view.startDate || null;\n\n    return {\n      intervalCount: viewCount,\n      startDate: startDate\n    };\n  },\n  _getViewByName: function _getViewByName(name) {\n    var views = this.option(\"views\");\n\n    for (var i = 0; i < views.length; i++) {\n      if (views[i].name === name || views[i].type === name || views[i] === name) {\n        return views[i];\n      }\n    }\n  },\n  _recalculateWorkspace: function _recalculateWorkspace() {\n    var _this4 = this;\n\n    this._workSpaceRecalculation = new Deferred();\n\n    this._waitAsyncTemplates(function () {\n      _dom2.default.triggerResizeEvent(_this4._workSpace.$element());\n\n      _this4._workSpace._refreshDateTimeIndication();\n    });\n  },\n  _workSpaceConfig: function _workSpaceConfig(groups, countConfig) {\n    var _this5 = this;\n\n    var result,\n        currentViewOptions = this._getCurrentViewOptions();\n\n    result = (0, _extend.extend)({\n      noDataText: this.option(\"noDataText\"),\n      firstDayOfWeek: this.option(\"firstDayOfWeek\"),\n      startDayHour: this.option(\"startDayHour\"),\n      endDayHour: this.option(\"endDayHour\"),\n      tabIndex: this.option(\"tabIndex\"),\n      accessKey: this.option(\"accessKey\"),\n      focusStateEnabled: this.option(\"focusStateEnabled\"),\n      cellDuration: this.option(\"cellDuration\"),\n      showAllDayPanel: this.option(\"showAllDayPanel\"),\n      showCurrentTimeIndicator: this.option(\"showCurrentTimeIndicator\"),\n      indicatorTime: this.option(\"indicatorTime\"),\n      indicatorUpdateInterval: this.option(\"indicatorUpdateInterval\"),\n      shadeUntilCurrentTime: this.option(\"shadeUntilCurrentTime\"),\n      allDayExpanded: this._appointments.option(\"items\"),\n      crossScrollingEnabled: this.option(\"crossScrollingEnabled\"),\n      dataCellTemplate: this.option(\"dataCellTemplate\"),\n      timeCellTemplate: this.option(\"timeCellTemplate\"),\n      resourceCellTemplate: this.option(\"resourceCellTemplate\"),\n      dateCellTemplate: this.option(\"dateCellTemplate\"),\n      allowMultipleCellSelection: this.option(\"allowMultipleCellSelection\"),\n      selectedCellData: this.option(\"selectedCellData\"),\n      onSelectionChanged: function onSelectionChanged(args) {\n        _this5.option(\"selectedCellData\", args.selectedCellData);\n      },\n      groupByDate: this._getCurrentViewOption(\"groupByDate\")\n    }, currentViewOptions);\n    result.observer = this;\n    result.intervalCount = countConfig.intervalCount;\n    result.startDate = countConfig.startDate;\n    result.groups = groups;\n    result.onCellClick = this._createActionByOption(\"onCellClick\");\n    result.onCellContextMenu = this._createActionByOption(\"onCellContextMenu\");\n    result.min = new Date(this._dateOption(\"min\"));\n    result.max = new Date(this._dateOption(\"max\"));\n    result.currentDate = _date2.default.trimTime(new Date(this._dateOption(\"currentDate\")));\n    result.hoursInterval = result.cellDuration / 60;\n    result.allDayExpanded = this._isAllDayExpanded(this.getFilteredItems());\n    result.dataCellTemplate = result.dataCellTemplate ? this._getTemplate(result.dataCellTemplate) : null;\n    result.timeCellTemplate = result.timeCellTemplate ? this._getTemplate(result.timeCellTemplate) : null;\n    result.resourceCellTemplate = result.resourceCellTemplate ? this._getTemplate(result.resourceCellTemplate) : null;\n    result.dateCellTemplate = result.dateCellTemplate ? this._getTemplate(result.dateCellTemplate) : null;\n    return result;\n  },\n  _getCurrentViewOptions: function _getCurrentViewOptions() {\n    return this._currentView;\n  },\n  _getCurrentViewOption: function _getCurrentViewOption(optionName) {\n    var currentViewOptions = this._getCurrentViewOptions();\n\n    if (currentViewOptions && void 0 !== currentViewOptions[optionName]) {\n      return currentViewOptions[optionName];\n    }\n\n    return this.option(optionName);\n  },\n  _getAppointmentTemplate: function _getAppointmentTemplate(optionName) {\n    var currentViewOptions = this._getCurrentViewOptions();\n\n    if (currentViewOptions && currentViewOptions[optionName]) {\n      return this._getTemplate(currentViewOptions[optionName]);\n    }\n\n    return this._getTemplateByOption(optionName);\n  },\n  _updateOption: function _updateOption(viewName, optionName, value) {\n    var currentViewOptions = this._getCurrentViewOptions();\n\n    if (!currentViewOptions || !_type2.default.isDefined(currentViewOptions[optionName])) {\n      this[\"_\" + viewName].option(optionName, value);\n    }\n  },\n  _refreshWorkSpace: function _refreshWorkSpace(groups) {\n    var _this6 = this;\n\n    this._cleanWorkspace();\n\n    delete this._workSpace;\n\n    this._renderWorkSpace(groups);\n\n    if (this._readyToRenderAppointments) {\n      this._appointments.option({\n        fixedContainer: this._workSpace.getFixedContainer(),\n        allDayContainer: this._workSpace.getAllDayContainer()\n      });\n\n      this._waitAsyncTemplates(function () {\n        _this6._workSpaceRecalculation.resolve();\n      });\n    }\n  },\n  _cleanWorkspace: function _cleanWorkspace() {\n    this._appointments.$element().detach();\n\n    this._workSpace._dispose();\n\n    this._workSpace.$element().remove();\n\n    this.option(\"selectedCellData\", []);\n  },\n  getWorkSpaceScrollable: function getWorkSpaceScrollable() {\n    return this._workSpace.getScrollable();\n  },\n  getWorkSpaceScrollableScrollTop: function getWorkSpaceScrollableScrollTop(allDay) {\n    return this._workSpace.getGroupedScrollableScrollTop(allDay);\n  },\n  getWorkSpaceScrollableScrollLeft: function getWorkSpaceScrollableScrollLeft() {\n    return this._workSpace.getScrollableScrollLeft();\n  },\n  getWorkSpaceScrollableContainer: function getWorkSpaceScrollableContainer() {\n    return this._workSpace.getScrollableContainer();\n  },\n  getWorkSpaceAllDayHeight: function getWorkSpaceAllDayHeight() {\n    return this._workSpace.getAllDayHeight();\n  },\n  getWorkSpaceAllDayOffset: function getWorkSpaceAllDayOffset() {\n    return this._workSpace.getAllDayOffset();\n  },\n  getWorkSpaceHeaderPanelHeight: function getWorkSpaceHeaderPanelHeight() {\n    return this._workSpace.getHeaderPanelHeight();\n  },\n  getWorkSpaceDateTableOffset: function getWorkSpaceDateTableOffset() {\n    return !this.option(\"crossScrollingEnabled\") || this.option(\"rtlEnabled\") ? this._workSpace.getWorkSpaceLeftOffset() : 0;\n  },\n  getWorkSpace: function getWorkSpace() {\n    return this._workSpace;\n  },\n  getAppointmentModel: function getAppointmentModel() {\n    return this._appointmentModel;\n  },\n  getHeader: function getHeader() {\n    return this._header;\n  },\n  getMaxAppointmentsPerCell: function getMaxAppointmentsPerCell() {\n    return this._getCurrentViewOption(\"maxAppointmentsPerCell\");\n  },\n  _createPopup: function _createPopup(appointmentData, processTimeZone) {\n    this._$popup = (0, _renderer2.default)(\"<div>\").addClass(APPOINTMENT_POPUP_CLASS).appendTo(this.$element());\n\n    this._initDynamicPopupTemplate(appointmentData, processTimeZone);\n\n    this._popup = this._createComponent(this._$popup, _popup2.default, this._popupConfig(appointmentData));\n  },\n  _popupContent: function _popupContent(appointmentData, processTimeZone) {\n    var $popupContent = this._popup.$content();\n\n    var $form = (0, _renderer2.default)(\"<div>\").appendTo($popupContent);\n\n    this._createOrUpdateForm(appointmentData, processTimeZone, $form);\n\n    return $popupContent;\n  },\n  _createAppointmentForm: function _createAppointmentForm(formData, $content) {\n    var allDay = this.fire(\"getField\", \"allDay\", formData),\n        resources = this.option(\"resources\");\n\n    _uiScheduler32.default.prepareAppointmentFormEditors(allDay, {\n      textExpr: this._dataAccessors.expr.textExpr,\n      allDayExpr: this._dataAccessors.expr.allDayExpr,\n      startDateExpr: this._dataAccessors.expr.startDateExpr,\n      endDateExpr: this._dataAccessors.expr.endDateExpr,\n      descriptionExpr: this._dataAccessors.expr.descriptionExpr,\n      recurrenceRuleExpr: this._dataAccessors.expr.recurrenceRuleExpr,\n      startDateTimeZoneExpr: this._dataAccessors.expr.startDateTimeZoneExpr,\n      endDateTimeZoneExpr: this._dataAccessors.expr.endDateTimeZoneExpr\n    }, this);\n\n    if (resources && resources.length) {\n      this._resourcesManager.setResources(this.option(\"resources\"));\n\n      _uiScheduler32.default.concatResources(this._resourcesManager.getEditors());\n    }\n\n    this._appointmentForm = _uiScheduler32.default.create(this._createComponent.bind(this), $content, this._editAppointmentData ? !this._editing.allowUpdating : false, formData);\n  },\n  _createOrUpdateForm: function _createOrUpdateForm(appointmentData, processTimeZone, $content) {\n    var allDay = this.fire(\"getField\", \"allDay\", appointmentData),\n        startDate = this.fire(\"getField\", \"startDate\", appointmentData),\n        endDate = this.fire(\"getField\", \"endDate\", appointmentData);\n    (0, _iterator.each)(this._resourcesManager.getResourcesFromItem(appointmentData, true) || {}, function (resourceName, resourceValue) {\n      appointmentData[resourceName] = resourceValue;\n    });\n    var formData = (0, _extend.extend)(true, {}, appointmentData);\n\n    if (processTimeZone) {\n      startDate = this.fire(\"convertDateByTimezone\", startDate);\n      endDate = this.fire(\"convertDateByTimezone\", endDate);\n      this.fire(\"setField\", \"startDate\", formData, startDate);\n      this.fire(\"setField\", \"endDate\", formData, endDate);\n    }\n\n    if (this._appointmentForm) {\n      var startDateExpr = this._dataAccessors.expr.startDateExpr,\n          endDateExpr = this._dataAccessors.expr.endDateExpr;\n      formData.recurrenceRule = formData.recurrenceRule || null;\n\n      _uiScheduler32.default.updateFormData(this._appointmentForm, formData);\n\n      this._appointmentForm.option(\"readOnly\", this._editAppointmentData ? !this._editing.allowUpdating : false);\n\n      _uiScheduler32.default.checkEditorsType(this._appointmentForm, startDateExpr, endDateExpr, allDay);\n    } else {\n      this._createAppointmentForm(formData, $content);\n    }\n\n    var recurrenceRuleExpr = this._dataAccessors.expr.recurrenceRuleExpr,\n        recurrentEditorItem = recurrenceRuleExpr ? this._appointmentForm.itemOption(recurrenceRuleExpr) : null;\n\n    if (recurrentEditorItem) {\n      var options = recurrentEditorItem.editorOptions || {};\n      options.startDate = startDate;\n\n      this._appointmentForm.itemOption(recurrenceRuleExpr, \"editorOptions\", options);\n    }\n\n    this._actions.onAppointmentFormOpening({\n      form: this._appointmentForm,\n      appointmentData: appointmentData\n    });\n  },\n  _initDynamicPopupTemplate: function _initDynamicPopupTemplate(appointmentData, processTimeZone) {\n    var that = this;\n    this._defaultTemplates.appointmentPopup = new _function_template2.default(function (options) {\n      var $popupContent = that._popupContent(appointmentData, processTimeZone);\n\n      (0, _renderer2.default)(options.container).append($popupContent);\n      return (0, _renderer2.default)(options.container);\n    });\n  },\n  _isPopupFullScreenNeeded: function _isPopupFullScreenNeeded() {\n    if (_window2.default.hasWindow()) {\n      var window = _window2.default.getWindow();\n\n      return (0, _renderer2.default)(window).width() < APPOINTMENT_POPUP_FULLSCREEN_WINDOW_WIDTH;\n    }\n\n    return false;\n  },\n  _updatePopupFullScreenMode: function _updatePopupFullScreenMode() {\n    if (this._popup && this._popup.option(\"visible\")) {\n      var isFullScreen = this._isPopupFullScreenNeeded();\n\n      this._popup.option({\n        maxWidth: isFullScreen ? \"100%\" : APPOINTMENT_POPUP_WIDTH,\n        fullScreen: isFullScreen\n      });\n    }\n  },\n  _popupConfig: function _popupConfig(appointmentData) {\n    var _this7 = this;\n\n    var template = this._getTemplateByOption(\"appointmentPopupTemplate\");\n\n    return {\n      height: \"auto\",\n      maxHeight: \"100%\",\n      onHiding: function onHiding() {\n        return _this7.focus();\n      },\n      contentTemplate: new _function_template2.default(function (options) {\n        return template.render({\n          model: appointmentData,\n          container: options.container\n        });\n      }),\n      onShowing: function onShowing() {\n        return _this7._updatePopupFullScreenMode();\n      },\n      defaultOptionsRules: [{\n        device: function device() {\n          return _devices2.default.current().android;\n        },\n        options: {\n          showTitle: false\n        }\n      }]\n    };\n  },\n  _getPopupToolbarItems: function _getPopupToolbarItems() {\n    var isIOs = \"ios\" === _devices2.default.current().platform;\n\n    return [{\n      shortcut: \"done\",\n      location: TOOLBAR_ITEM_AFTER_LOCATION,\n      onClick: this._doneButtonClickHandler.bind(this)\n    }, {\n      shortcut: \"cancel\",\n      location: isIOs ? TOOLBAR_ITEM_BEFORE_LOCATION : TOOLBAR_ITEM_AFTER_LOCATION\n    }];\n  },\n  _cleanPopup: function _cleanPopup() {\n    if (this._$popup) {\n      this._popup.$element().remove();\n\n      delete this._$popup;\n      delete this._popup;\n      delete this._appointmentForm;\n    }\n  },\n  _doneButtonClickHandler: function _doneButtonClickHandler(args) {\n    args.cancel = true;\n\n    this._saveChanges(true);\n\n    if (this._lastEditData) {\n      var startDate = this.fire(\"getField\", \"startDate\", this._lastEditData);\n\n      this._workSpace.updateScrollPosition(startDate);\n\n      delete this._lastEditData;\n    }\n  },\n  _saveChanges: function _saveChanges(disableButton) {\n    var validation = this._appointmentForm.validate();\n\n    if (validation && !validation.isValid) {\n      return false;\n    }\n\n    disableButton && this._disableDoneButton();\n\n    var formData = _object2.default.deepExtendArraySafe({}, this._getFormData(), true),\n        oldData = this._editAppointmentData,\n        recData = this._updatedRecAppointment;\n\n    function convert(obj, dateFieldName) {\n      var date = new Date(this.fire(\"getField\", dateFieldName, obj));\n      var tzDiff = this._getTimezoneOffsetByOption() * toMs(\"hour\") + this.fire(\"getClientTimezoneOffset\", date);\n      return new Date(date.getTime() + tzDiff);\n    }\n\n    if (oldData) {\n      this._convertDatesByTimezoneBack(false, formData);\n    }\n\n    if (oldData && !recData) {\n      this.updateAppointment(oldData, formData);\n    } else {\n      if (recData) {\n        this.updateAppointment(oldData, recData);\n        delete this._updatedRecAppointment;\n\n        if (\"number\" === typeof this._getTimezoneOffsetByOption()) {\n          this.fire(\"setField\", \"startDate\", formData, convert.call(this, formData, \"startDate\"));\n          this.fire(\"setField\", \"endDate\", formData, convert.call(this, formData, \"endDate\"));\n        }\n      }\n\n      this.addAppointment(formData);\n    }\n\n    this._enableDoneButton();\n\n    this._lastEditData = formData;\n    return true;\n  },\n  _getFormData: function _getFormData() {\n    var formData = this._appointmentForm.option(\"formData\"),\n        startDate = this.fire(\"getField\", \"startDate\", formData),\n        endDate = this.fire(\"getField\", \"endDate\", formData);\n\n    this.fire(\"setField\", \"startDate\", formData, startDate);\n    this.fire(\"setField\", \"endDate\", formData, endDate);\n    return formData;\n  },\n  _convertDatesByTimezoneBack: function _convertDatesByTimezoneBack(applyAppointmentTimezone, sourceAppointmentData, targetAppointmentData) {\n    targetAppointmentData = targetAppointmentData || sourceAppointmentData;\n    var processedStartDate = this.fire(\"convertDateByTimezoneBack\", this.fire(\"getField\", \"startDate\", sourceAppointmentData), applyAppointmentTimezone && this.fire(\"getField\", \"startDateTimeZone\", sourceAppointmentData));\n    var processedEndDate = this.fire(\"convertDateByTimezoneBack\", this.fire(\"getField\", \"endDate\", sourceAppointmentData), applyAppointmentTimezone && this.fire(\"getField\", \"endDateTimeZone\", sourceAppointmentData));\n    this.fire(\"setField\", \"startDate\", targetAppointmentData, processedStartDate);\n    this.fire(\"setField\", \"endDate\", targetAppointmentData, processedEndDate);\n  },\n  _disableDoneButton: function _disableDoneButton() {\n    var toolbarItems = this._popup.option(\"toolbarItems\");\n\n    toolbarItems[0].options = (0, _extend.extend)(toolbarItems[0].options, {\n      disabled: true\n    });\n\n    this._popup.option(\"toolbarItems\", toolbarItems);\n  },\n  _enableDoneButton: function _enableDoneButton() {\n    var toolbarItems = this._popup.option(\"toolbarItems\");\n\n    toolbarItems[0].options = (0, _extend.extend)(toolbarItems[0].options, {\n      disabled: false\n    });\n\n    this._popup.option(\"toolbarItems\", toolbarItems);\n  },\n  _checkRecurringAppointment: function _checkRecurringAppointment(targetAppointment, singleAppointment, exceptionDate, callback, isDeleted, isPopupEditing) {\n    delete this._updatedRecAppointment;\n    var recurrenceRule = this.fire(\"getField\", \"recurrenceRule\", targetAppointment);\n\n    if (!_utils2.default.getRecurrenceRule(recurrenceRule).isValid || !this._editing.allowUpdating) {\n      callback();\n      return;\n    }\n\n    var editMode = this.option(\"recurrenceEditMode\");\n\n    switch (editMode) {\n      case \"series\":\n        callback();\n        break;\n\n      case \"occurrence\":\n        this._singleAppointmentChangesHandler(targetAppointment, singleAppointment, exceptionDate, isDeleted, isPopupEditing);\n\n        break;\n\n      default:\n        this._showRecurrenceChangeConfirm(isDeleted).done(function (result) {\n          result && callback();\n          !result && this._singleAppointmentChangesHandler(targetAppointment, singleAppointment, exceptionDate, isDeleted, isPopupEditing);\n        }.bind(this)).fail(function () {\n          this._appointments.moveAppointmentBack();\n        }.bind(this));\n\n    }\n  },\n  _singleAppointmentChangesHandler: function _singleAppointmentChangesHandler(targetAppointment, singleAppointment, exceptionDate, isDeleted, isPopupEditing) {\n    exceptionDate = new Date(exceptionDate);\n\n    function processAppointmentDates(appointment, commonTimezoneOffset) {\n      var startDate = this.fire(\"getField\", \"startDate\", appointment);\n      var processedStartDate = this.fire(\"convertDateByTimezoneBack\", startDate, this.fire(\"getField\", \"startDateTimeZone\", appointment));\n      var endDate = this.fire(\"getField\", \"endDate\", appointment);\n      var processedEndDate = this.fire(\"convertDateByTimezoneBack\", endDate, this.fire(\"getField\", \"endDateTimeZone\", appointment));\n\n      if (\"number\" === typeof commonTimezoneOffset && !isNaN(commonTimezoneOffset)) {\n        var startDateClientTzOffset = -(this._subscribes.getClientTimezoneOffset(startDate) / toMs(\"hour\"));\n        var endDateClientTzOffset = -(this._subscribes.getClientTimezoneOffset(endDate) / toMs(\"hour\"));\n        var processedStartDateInUTC = processedStartDate.getTime() - startDateClientTzOffset * toMs(\"hour\"),\n            processedEndDateInUTC = processedEndDate.getTime() - endDateClientTzOffset * toMs(\"hour\");\n        processedStartDate = new Date(processedStartDateInUTC + commonTimezoneOffset * toMs(\"hour\"));\n        processedEndDate = new Date(processedEndDateInUTC + commonTimezoneOffset * toMs(\"hour\"));\n      }\n\n      this.fire(\"setField\", \"startDate\", appointment, processedStartDate);\n      this.fire(\"setField\", \"endDate\", appointment, processedEndDate);\n    }\n\n    this.fire(\"setField\", \"recurrenceRule\", singleAppointment, \"\");\n    this.fire(\"setField\", \"recurrenceException\", singleAppointment, \"\");\n\n    if (!isDeleted && !isPopupEditing) {\n      processAppointmentDates.call(this, singleAppointment, this._getTimezoneOffsetByOption());\n      this.addAppointment(singleAppointment);\n    }\n\n    var recurrenceException = this._makeDateAsRecurrenceException(exceptionDate, targetAppointment),\n        updatedAppointment = (0, _extend.extend)({}, targetAppointment);\n\n    this.fire(\"setField\", \"recurrenceException\", updatedAppointment, recurrenceException);\n\n    if (isPopupEditing) {\n      this._updatedRecAppointment = updatedAppointment;\n      processAppointmentDates.call(this, singleAppointment);\n\n      this._showAppointmentPopup(singleAppointment, true, true);\n\n      this._editAppointmentData = targetAppointment;\n    } else {\n      this._updateAppointment(targetAppointment, updatedAppointment, function () {\n        this._appointments.moveAppointmentBack();\n      });\n    }\n  },\n  _makeDateAsRecurrenceException: function _makeDateAsRecurrenceException(exceptionDate, targetAppointment) {\n    var startDate = this._getStartDate(targetAppointment, true),\n        startDateTimeZone = this.fire(\"getField\", \"startDateTimeZone\", targetAppointment),\n        exceptionByDate = this._getRecurrenceExceptionDate(exceptionDate, startDate, startDateTimeZone),\n        recurrenceException = this.fire(\"getField\", \"recurrenceException\", targetAppointment);\n\n    return recurrenceException ? recurrenceException + \",\" + exceptionByDate : exceptionByDate;\n  },\n  _getRecurrenceExceptionDate: function _getRecurrenceExceptionDate(exceptionStartDate, targetStartDate, startDateTimeZone) {\n    exceptionStartDate = this.fire(\"convertDateByTimezoneBack\", exceptionStartDate, startDateTimeZone);\n    var appointmentStartDate = this.fire(\"convertDateByTimezoneBack\", targetStartDate, startDateTimeZone);\n    exceptionStartDate.setHours(appointmentStartDate.getHours(), appointmentStartDate.getMinutes(), appointmentStartDate.getSeconds(), appointmentStartDate.getMilliseconds());\n    var timezoneDiff = targetStartDate.getTimezoneOffset() - exceptionStartDate.getTimezoneOffset();\n    exceptionStartDate = new Date(exceptionStartDate.getTime() - timezoneDiff * toMs(\"minute\"));\n    return _date_serialization2.default.serializeDate(exceptionStartDate, UTC_FULL_DATE_FORMAT);\n  },\n  _showRecurrenceChangeConfirm: function _showRecurrenceChangeConfirm(isDeleted) {\n    var message = _message2.default.format(isDeleted ? \"dxScheduler-confirmRecurrenceDeleteMessage\" : \"dxScheduler-confirmRecurrenceEditMessage\"),\n        seriesText = _message2.default.format(isDeleted ? \"dxScheduler-confirmRecurrenceDeleteSeries\" : \"dxScheduler-confirmRecurrenceEditSeries\"),\n        occurrenceText = _message2.default.format(isDeleted ? \"dxScheduler-confirmRecurrenceDeleteOccurrence\" : \"dxScheduler-confirmRecurrenceEditOccurrence\");\n\n    return _dialog2.default.custom({\n      message: message,\n      showCloseButton: true,\n      showTitle: true,\n      buttons: [{\n        text: seriesText,\n        onClick: function onClick() {\n          return true;\n        }\n      }, {\n        text: occurrenceText,\n        onClick: function onClick() {\n          return false;\n        }\n      }]\n    }).show();\n  },\n  _getUpdatedData: function _getUpdatedData(options) {\n    var target = options.data || options,\n        cellData = this.getTargetCellData(),\n        targetAllDay = this.fire(\"getField\", \"allDay\", target),\n        targetStartDate = new Date(this.fire(\"getField\", \"startDate\", target)),\n        targetEndDate = new Date(this.fire(\"getField\", \"endDate\", target)),\n        date = cellData.date || targetStartDate,\n        duration = targetEndDate.getTime() - targetStartDate.getTime();\n\n    if (this._workSpace.keepOriginalHours()) {\n      var diff = targetStartDate.getTime() - _date2.default.trimTime(targetStartDate).getTime();\n\n      date = new Date(_date2.default.trimTime(date).getTime() + diff);\n    }\n\n    var updatedData = {},\n        allDay = cellData.allDay;\n    this.fire(\"setField\", \"allDay\", updatedData, allDay);\n    this.fire(\"setField\", \"startDate\", updatedData, date);\n    var endDate = new Date(date.getTime() + duration);\n\n    if (this.appointmentTakesAllDay(target) && !updatedData.allDay && this._workSpace.supportAllDayRow()) {\n      endDate = this._workSpace.calculateEndDate(date);\n    }\n\n    if (targetAllDay && !this._workSpace.supportAllDayRow() && !this._workSpace.keepOriginalHours()) {\n      var dateCopy = new Date(date);\n      dateCopy.setHours(0);\n      endDate = new Date(dateCopy.getTime() + duration);\n\n      if (0 !== endDate.getHours()) {\n        endDate.setHours(this._getCurrentViewOption(\"endDayHour\"));\n      }\n    }\n\n    this.fire(\"setField\", \"endDate\", updatedData, endDate);\n\n    this._resourcesManager.setResourcesToItem(updatedData, cellData.groups);\n\n    return updatedData;\n  },\n  _getCoordinates: function _getCoordinates(initialDates, dates, appointmentResources, allDay) {\n    var result = [];\n\n    for (var i = 0; i < dates.length; i++) {\n      var currentCoords = this._workSpace.getCoordinatesByDateInGroup(dates[i], appointmentResources, allDay);\n\n      for (var j = 0; j < currentCoords.length; j++) {\n        (0, _extend.extend)(currentCoords[j], {\n          startDate: dates[i],\n          initialStartDate: initialDates[i]\n        });\n      }\n\n      result = result.concat(currentCoords);\n    }\n\n    return result;\n  },\n  _isAppointmentRecurrence: function _isAppointmentRecurrence(appointmentData) {\n    var recurrenceRule = this.fire(\"getField\", \"recurrenceRule\", appointmentData);\n    return recurrenceRule && _utils2.default.getRecurrenceRule(recurrenceRule).isValid;\n  },\n  _getSingleAppointmentData: function _getSingleAppointmentData(appointmentData, options) {\n    options = options || {};\n    var updatedStartDate,\n        appointmentStartDate,\n        $appointment = options.$appointment,\n        updatedData = options.skipDateCalculation ? {} : this._getUpdatedData(options),\n        resultAppointmentData = (0, _extend.extend)({}, appointmentData, updatedData),\n        allDay = this.fire(\"getField\", \"allDay\", appointmentData),\n        isAllDay = this._workSpace.supportAllDayRow() && allDay,\n        startDate = new Date(this.fire(\"getField\", \"startDate\", resultAppointmentData)),\n        endDate = new Date(this.fire(\"getField\", \"endDate\", resultAppointmentData)),\n        appointmentDuration = endDate.getTime() - startDate.getTime();\n\n    if (_type2.default.isDefined($appointment) && this._needUpdateAppointmentData($appointment)) {\n      var apptDataCalculator = this.getRenderingStrategyInstance().getAppointmentDataCalculator();\n\n      if (_type2.default.isFunction(apptDataCalculator)) {\n        updatedStartDate = apptDataCalculator($appointment, startDate).startDate;\n      } else {\n        var coordinates = _translator2.default.locate($appointment);\n\n        updatedStartDate = new Date(this._workSpace.getCellDataByCoordinates(coordinates, isAllDay).startDate);\n\n        if ($appointment.hasClass(\"dx-scheduler-appointment-reduced\")) {\n          appointmentStartDate = $appointment.data(\"dxAppointmentStartDate\");\n\n          if (appointmentStartDate) {\n            updatedStartDate = appointmentStartDate;\n          }\n        }\n\n        if (this._isAppointmentRecurrence(appointmentData)) {\n          appointmentStartDate = $appointment.data(\"dxAppointmentSettings\") && $appointment.data(\"dxAppointmentSettings\").startDate;\n\n          if (appointmentStartDate) {\n            updatedStartDate = appointmentStartDate;\n          }\n        }\n\n        if (!options.skipHoursProcessing) {\n          this.fire(\"convertDateByTimezoneBack\", updatedStartDate, this.fire(\"getField\", \"startDateTimeZone\", appointmentData));\n        }\n      }\n    }\n\n    if (!updatedStartDate && options.startDate) {\n      updatedStartDate = options.startDate;\n    }\n\n    if (updatedStartDate) {\n      this.fire(\"setField\", \"startDate\", resultAppointmentData, updatedStartDate);\n      this.fire(\"setField\", \"endDate\", resultAppointmentData, new Date(updatedStartDate.getTime() + appointmentDuration));\n    }\n\n    return resultAppointmentData;\n  },\n  _needUpdateAppointmentData: function _needUpdateAppointmentData($appointment) {\n    return $appointment.hasClass(\"dx-scheduler-appointment-compact\") || $appointment.hasClass(\"dx-scheduler-appointment-recurrence\");\n  },\n  _getNormalizedTemplateArgs: function _getNormalizedTemplateArgs(options) {\n    var args = this.callBase(options);\n\n    if (\"targetedAppointmentData\" in options) {\n      args.push(options.targetedAppointmentData);\n    }\n\n    if (\"currentIndex\" in options) {\n      args.push(options.currentIndex);\n    }\n\n    return args;\n  },\n  subscribe: function subscribe(subject, action) {\n    this._subscribes[subject] = _uiScheduler2.default[subject] = action;\n  },\n  fire: function fire(subject) {\n    var callback = this._subscribes[subject],\n        args = Array.prototype.slice.call(arguments);\n\n    if (!_type2.default.isFunction(callback)) {\n      throw _ui2.default.Error(\"E1031\", subject);\n    }\n\n    return callback.apply(this, args.slice(1));\n  },\n  getTargetCellData: function getTargetCellData() {\n    return this._workSpace.getDataByDroppableCell();\n  },\n  _updateAppointment: function _updateAppointment(target, appointment, onUpdatePrevented) {\n    var updatingOptions = {\n      newData: appointment,\n      oldData: (0, _extend.extend)({}, target),\n      cancel: false\n    };\n\n    var performFailAction = function (err) {\n      if (_type2.default.isFunction(onUpdatePrevented)) {\n        onUpdatePrevented.call(this);\n      }\n\n      if (err && \"Error\" === err.name) {\n        throw err;\n      }\n    }.bind(this);\n\n    this._actions.onAppointmentUpdating(updatingOptions);\n\n    this._processActionResult(updatingOptions, function (canceled) {\n      if (!canceled) {\n        this._expandAllDayPanel(appointment);\n\n        try {\n          this._appointmentModel.update(target, appointment).always(function (e) {\n            this._executeActionWhenOperationIsCompleted(this._actions.onAppointmentUpdated, appointment, e);\n          }.bind(this)).fail(function () {\n            performFailAction();\n          });\n        } catch (err) {\n          performFailAction(err);\n        }\n      } else {\n        performFailAction();\n      }\n    });\n  },\n  _processActionResult: function _processActionResult(actionOptions, callback) {\n    var _this8 = this;\n\n    if (_type2.default.isPromise(actionOptions.cancel)) {\n      when(_deferred2.default.fromPromise(actionOptions.cancel)).always(function (cancel) {\n        if (!_type2.default.isDefined(cancel)) {\n          cancel = \"rejected\" === actionOptions.cancel.state();\n        }\n\n        callback.call(_this8, cancel);\n      });\n    } else {\n      callback.call(this, actionOptions.cancel);\n    }\n  },\n  _expandAllDayPanel: function _expandAllDayPanel(appointment) {\n    if (!this._isAllDayExpanded(this.getFilteredItems()) && this.appointmentTakesAllDay(appointment)) {\n      this._workSpace.option(\"allDayExpanded\", true);\n    }\n  },\n  _executeActionWhenOperationIsCompleted: function _executeActionWhenOperationIsCompleted(action, appointment, e) {\n    var options = {\n      appointmentData: appointment\n    },\n        isError = e && \"Error\" === e.name;\n\n    if (isError) {\n      options.error = e;\n    } else {\n      if (this._popup && this._popup.option(\"visible\")) {\n        this._popup.hide();\n      }\n    }\n\n    action(options);\n\n    this._fireContentReadyAction();\n  },\n  _showAppointmentPopup: function _showAppointmentPopup(data, showButtons, processTimeZone) {\n    if (!this._popup) {\n      this._createPopup(data, processTimeZone);\n    }\n\n    var toolbarItems = [],\n        showCloseButton = true;\n\n    if (!_type2.default.isDefined(showButtons) || showButtons) {\n      toolbarItems = this._getPopupToolbarItems();\n      showCloseButton = this._popup.initialOption(\"showCloseButton\");\n    }\n\n    this._popup.option({\n      toolbarItems: toolbarItems,\n      showCloseButton: showCloseButton\n    });\n\n    if (this._appointmentForm) {\n      this._createOrUpdateForm(data, processTimeZone);\n    } else {\n      this._initDynamicPopupTemplate(data, processTimeZone);\n\n      this._popup.option(this._popupConfig(data));\n    }\n\n    this._popup.show();\n  },\n  getAppointmentPopup: function getAppointmentPopup() {\n    return this._popup;\n  },\n  getAppointmentDetailsForm: function getAppointmentDetailsForm() {\n    return this._appointmentForm;\n  },\n  getUpdatedAppointment: function getUpdatedAppointment() {\n    return this._appointmentModel.getUpdatedAppointment();\n  },\n  getUpdatedAppointmentKeys: function getUpdatedAppointmentKeys() {\n    return this._appointmentModel.getUpdatedAppointmentKeys();\n  },\n  getAppointmentsInstance: function getAppointmentsInstance() {\n    return this._appointments;\n  },\n  getResourceManager: function getResourceManager() {\n    return this._resourcesManager;\n  },\n  getLayoutManager: function getLayoutManager() {\n    return this._layoutManager;\n  },\n  getRenderingStrategyInstance: function getRenderingStrategyInstance() {\n    return this._layoutManager.getRenderingStrategyInstance();\n  },\n  getFilteredItems: function getFilteredItems() {\n    return this._filteredItems;\n  },\n  getActions: function getActions() {\n    return this._actions;\n  },\n  appointmentTakesAllDay: function appointmentTakesAllDay(appointment) {\n    return this._appointmentModel.appointmentTakesAllDay(appointment, this._getCurrentViewOption(\"startDayHour\"), this._getCurrentViewOption(\"endDayHour\"));\n  },\n  _getStartDate: function _getStartDate(appointment, skipNormalize) {\n    var startDate = this.fire(\"getField\", \"startDate\", appointment),\n        startDateTimeZone = this.fire(\"getField\", \"startDateTimeZone\", appointment);\n    startDate = _date2.default.makeDate(startDate);\n    startDate = this.fire(\"convertDateByTimezone\", startDate, startDateTimeZone);\n    !skipNormalize && this.fire(\"updateAppointmentStartDate\", {\n      startDate: startDate,\n      appointment: appointment,\n      callback: function callback(result) {\n        startDate = result;\n      }\n    });\n    return startDate;\n  },\n  _getEndDate: function _getEndDate(appointment, skipNormalize) {\n    var endDate = this.fire(\"getField\", \"endDate\", appointment);\n\n    if (endDate) {\n      var endDateTimeZone = this.fire(\"getField\", \"endDateTimeZone\", appointment);\n      endDate = _date2.default.makeDate(endDate);\n      endDate = this.fire(\"convertDateByTimezone\", endDate, endDateTimeZone);\n      !skipNormalize && this.fire(\"updateAppointmentEndDate\", {\n        endDate: endDate,\n        callback: function callback(result) {\n          endDate = result;\n        }\n      });\n    }\n\n    return endDate;\n  },\n  _getRecurrenceException: function _getRecurrenceException(appointmentData) {\n    var recurrenceException = this.fire(\"getField\", \"recurrenceException\", appointmentData);\n\n    if (recurrenceException) {\n      var startDate = this.fire(\"getField\", \"startDate\", appointmentData),\n          exceptions = recurrenceException.split(\",\"),\n          startDateTimeZone = this.fire(\"getField\", \"startDateTimeZone\", appointmentData),\n          exceptionByStartDate = this.fire(\"convertDateByTimezone\", startDate, startDateTimeZone);\n\n      for (var i = 0; i < exceptions.length; i++) {\n        exceptions[i] = this._convertRecurrenceException(exceptions[i], exceptionByStartDate, startDateTimeZone);\n      }\n\n      recurrenceException = exceptions.join();\n    }\n\n    return recurrenceException;\n  },\n  _convertRecurrenceException: function _convertRecurrenceException(exception, exceptionByStartDate, startDateTimeZone) {\n    exception = exception.replace(/\\s/g, \"\");\n    exception = _date_serialization2.default.deserializeDate(exception);\n    exception = this.fire(\"convertDateByTimezone\", exception, startDateTimeZone);\n    exception.setHours(exceptionByStartDate.getHours());\n    exception = _date_serialization2.default.serializeDate(exception, FULL_DATE_FORMAT);\n    return exception;\n  },\n  recurrenceEditorVisibilityChanged: function recurrenceEditorVisibilityChanged(visible) {\n    if (this._appointmentForm) {\n      this._appointmentForm.$element().find(\".\" + RECURRENCE_EDITOR_ITEM_CLASS).toggleClass(RECURRENCE_EDITOR_OPENED_ITEM_CLASS, visible);\n    }\n  },\n  resizePopup: function resizePopup() {\n    if (this.getAppointmentPopup()) {\n      _dom2.default.triggerResizeEvent(this.getAppointmentPopup().$element());\n    }\n  },\n  dayHasAppointment: function dayHasAppointment(day, appointment, trimTime) {\n    var startDate = new Date(this.fire(\"getField\", \"startDate\", appointment)),\n        endDate = new Date(this.fire(\"getField\", \"endDate\", appointment)),\n        startDateTimeZone = this.fire(\"getField\", \"startDateTimeZone\", appointment),\n        endDateTimeZone = this.fire(\"getField\", \"endDateTimeZone\", appointment);\n    startDate = this.fire(\"convertDateByTimezone\", startDate, startDateTimeZone);\n    endDate = this.fire(\"convertDateByTimezone\", endDate, endDateTimeZone);\n\n    if (day.getTime() === endDate.getTime()) {\n      return startDate.getTime() === endDate.getTime();\n    }\n\n    if (trimTime) {\n      day = _date2.default.trimTime(day);\n      startDate = _date2.default.trimTime(startDate);\n      endDate = _date2.default.trimTime(endDate);\n    }\n\n    var dayTimeStamp = day.getTime(),\n        startDateTimeStamp = startDate.getTime(),\n        endDateTimeStamp = endDate.getTime();\n    return (0, _array.inArray)(dayTimeStamp, [startDateTimeStamp, endDateTimeStamp]) > -1 || startDateTimeStamp < dayTimeStamp && endDateTimeStamp > dayTimeStamp;\n  },\n  setTargetedAppointmentResources: function setTargetedAppointmentResources(targetedAppointment, appointmentElement, appointmentIndex) {\n    var groups = this._getCurrentViewOption(\"groups\");\n\n    if (groups && groups.length) {\n      var getGroups,\n          setResourceCallback,\n          resourcesSetter = this._resourcesManager._dataAccessors.setter,\n          workSpace = this._workSpace;\n\n      if (this._isAgenda()) {\n        getGroups = function getGroups() {\n          var apptSettings = this.getLayoutManager()._positionMap[appointmentIndex];\n\n          return workSpace._getCellGroups(apptSettings[0].groupIndex);\n        };\n\n        setResourceCallback = function setResourceCallback(_, group) {\n          resourcesSetter[group.name](targetedAppointment, group.id);\n        };\n      } else {\n        getGroups = function getGroups() {\n          var setting = (0, _renderer2.default)(appointmentElement).data(\"dxAppointmentSettings\") || {};\n          return workSpace.getCellDataByCoordinates({\n            left: setting.left,\n            top: setting.top\n          }).groups;\n        };\n\n        setResourceCallback = function setResourceCallback(field, value) {\n          resourcesSetter[field](targetedAppointment, value);\n        };\n      }\n\n      (0, _iterator.each)(getGroups.call(this), setResourceCallback);\n    }\n  },\n  getStartViewDate: function getStartViewDate() {\n    return this._workSpace.getStartViewDate();\n  },\n  getEndViewDate: function getEndViewDate() {\n    return this._workSpace.getEndViewDate();\n  },\n  showAppointmentPopup: function showAppointmentPopup(appointmentData, createNewAppointment, currentAppointmentData) {\n    var singleAppointment = currentAppointmentData || this._getSingleAppointmentData(appointmentData, {\n      skipDateCalculation: true\n    });\n\n    var startDate = this.fire(\"getField\", \"startDate\", currentAppointmentData || appointmentData);\n\n    this._checkRecurringAppointment(appointmentData, singleAppointment, startDate, function () {\n      if (createNewAppointment || _type2.default.isEmptyObject(appointmentData)) {\n        delete this._editAppointmentData;\n        this._editing.allowAdding && this._showAppointmentPopup(appointmentData, true, false);\n      } else {\n        this._editAppointmentData = appointmentData;\n\n        this._showAppointmentPopup(appointmentData, this._editing.allowUpdating, true);\n      }\n    }.bind(this), false, true);\n  },\n  hideAppointmentPopup: function hideAppointmentPopup(saveChanges) {\n    if (!this._popup || !this._popup.option(\"visible\")) {\n      return;\n    }\n\n    if (saveChanges) {\n      this._saveChanges();\n    }\n\n    this._popup.hide();\n  },\n  showAppointmentTooltip: function showAppointmentTooltip(appointmentData, target, currentAppointmentData) {\n    if (appointmentData) {\n      this.showAppointmentTooltipCore(target, [{\n        color: this._appointments._tryGetAppointmentColor(target),\n        data: appointmentData,\n        currentData: currentAppointmentData\n      }], true);\n    }\n  },\n  showAppointmentTooltipCore: function showAppointmentTooltipCore(target, data, isSingleBehavior) {\n    this._appointmentTooltip.show(target, data, isSingleBehavior);\n  },\n  hideAppointmentTooltip: function hideAppointmentTooltip() {\n    this._appointmentTooltip.hide();\n  },\n  scrollToTime: function scrollToTime(hours, minutes, date) {\n    this._workSpace.scrollToTime(hours, minutes, date);\n  },\n  addAppointment: function addAppointment(appointment) {\n    var text = this.fire(\"getField\", \"text\", appointment);\n\n    if (!text) {\n      this.fire(\"setField\", \"text\", appointment, \"\");\n    }\n\n    this._convertDatesByTimezoneBack(true, appointment);\n\n    var addingOptions = {\n      appointmentData: appointment,\n      cancel: false\n    };\n\n    this._actions.onAppointmentAdding(addingOptions);\n\n    this._processActionResult(addingOptions, function (canceled) {\n      if (!canceled) {\n        this._expandAllDayPanel(appointment);\n\n        this._appointmentModel.add(appointment, {\n          value: this._getTimezoneOffsetByOption(),\n          clientOffset: this.fire(\"getClientTimezoneOffset\")\n        }).always(function (e) {\n          this._executeActionWhenOperationIsCompleted(this._actions.onAppointmentAdded, appointment, e);\n        }.bind(this));\n      }\n    });\n  },\n  updateAppointment: function updateAppointment(target, appointment) {\n    this._updateAppointment(target, appointment);\n  },\n  deleteAppointment: function deleteAppointment(appointment) {\n    var deletingOptions = {\n      appointmentData: appointment,\n      cancel: false\n    };\n\n    this._actions.onAppointmentDeleting(deletingOptions);\n\n    this._processActionResult(deletingOptions, function (canceled) {\n      if (!canceled) {\n        this._appointmentModel.remove(appointment).always(function (e) {\n          this._executeActionWhenOperationIsCompleted(this._actions.onAppointmentDeleted, appointment, e);\n        }.bind(this));\n      }\n    });\n  },\n  focus: function focus() {\n    if (this._editAppointmentData) {\n      this._appointments.focus();\n    } else {\n      this._workSpace.focus();\n    }\n  }\n}).include(_async_template_mixin2.default, _data_helper2.default);\n\n(0, _component_registrator2.default)(\"dxScheduler\", Scheduler);\nmodule.exports = Scheduler;","map":null,"metadata":{},"sourceType":"script"}