{"ast":null,"code":"/**\r\n * DevExtreme (ui/scheduler/ui.scheduler.resource_manager.js)\r\n * Version: 19.1.6 (build 19263-1729)\r\n * Build date: Fri Sep 20 2019\r\n *\r\n * Copyright (c) 2012 - 2019 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar Class = require(\"../../core/class\"),\n    arrayUtils = require(\"../../core/utils/array\"),\n    grep = require(\"../../core/utils/common\").grep,\n    isDefined = require(\"../../core/utils/type\").isDefined,\n    objectUtils = require(\"../../core/utils/object\"),\n    iteratorUtils = require(\"../../core/utils/iterator\"),\n    extend = require(\"../../core/utils/extend\").extend,\n    inArray = require(\"../../core/utils/array\").inArray,\n    query = require(\"../../data/query\"),\n    dataCoreUtils = require(\"../../core/utils/data\"),\n    DataSourceModule = require(\"../../data/data_source/data_source\"),\n    deferredUtils = require(\"../../core/utils/deferred\"),\n    when = deferredUtils.when,\n    Deferred = deferredUtils.Deferred;\n\nvar getValueExpr = function getValueExpr(resource) {\n  return resource.valueExpr || \"id\";\n},\n    getDisplayExpr = function getDisplayExpr(resource) {\n  return resource.displayExpr || \"text\";\n};\n\nvar ResourceManager = Class.inherit({\n  _wrapDataSource: function _wrapDataSource(dataSource) {\n    if (dataSource instanceof DataSourceModule.DataSource) {\n      return dataSource;\n    } else {\n      return new DataSourceModule.DataSource({\n        store: DataSourceModule.normalizeDataSourceOptions(dataSource).store,\n        pageSize: 0\n      });\n    }\n  },\n  _mapResourceData: function _mapResourceData(resource, data) {\n    var valueGetter = dataCoreUtils.compileGetter(getValueExpr(resource)),\n        displayGetter = dataCoreUtils.compileGetter(getDisplayExpr(resource));\n    return iteratorUtils.map(data, function (item) {\n      var result = {\n        id: valueGetter(item),\n        text: displayGetter(item)\n      };\n\n      if (item.color) {\n        result.color = item.color;\n      }\n\n      return result;\n    });\n  },\n  _isMultipleResource: function _isMultipleResource(resourceField) {\n    var result = false;\n    iteratorUtils.each(this.getResources(), function (_, resource) {\n      var field = this.getField(resource);\n\n      if (field === resourceField) {\n        result = resource.allowMultiple;\n        return false;\n      }\n    }.bind(this));\n    return result;\n  },\n  ctor: function ctor(resources) {\n    this.setResources(resources);\n  },\n  getDataAccessors: function getDataAccessors(field, type) {\n    var result = null;\n    iteratorUtils.each(this._dataAccessors[type], function (accessorName, accessors) {\n      if (field === accessorName) {\n        result = accessors;\n        return false;\n      }\n    });\n    return result;\n  },\n  getField: function getField(resource) {\n    return resource.fieldExpr || resource.field;\n  },\n  setResources: function setResources(resources) {\n    this._resources = resources;\n    this._dataAccessors = {\n      getter: {},\n      setter: {}\n    };\n    this._resourceFields = iteratorUtils.map(resources || [], function (resource) {\n      var field = this.getField(resource);\n      this._dataAccessors.getter[field] = dataCoreUtils.compileGetter(field);\n      this._dataAccessors.setter[field] = dataCoreUtils.compileSetter(field);\n      return field;\n    }.bind(this));\n  },\n  getResources: function getResources() {\n    return this._resources || [];\n  },\n  getResourcesData: function getResourcesData() {\n    return this._resourcesData || [];\n  },\n  getEditors: function getEditors() {\n    var result = [],\n        that = this;\n    iteratorUtils.each(this.getResources(), function (i, resource) {\n      var field = that.getField(resource),\n          currentResourceItems = that._getResourceDataByField(field);\n\n      result.push({\n        editorOptions: {\n          dataSource: currentResourceItems.length ? currentResourceItems : that._wrapDataSource(resource.dataSource),\n          displayExpr: getDisplayExpr(resource),\n          valueExpr: getValueExpr(resource)\n        },\n        dataField: field,\n        editorType: resource.allowMultiple ? \"dxTagBox\" : \"dxSelectBox\",\n        label: {\n          text: resource.label || field\n        }\n      });\n    });\n    return result;\n  },\n  _resourceLoader: {},\n  getResourceDataByValue: function getResourceDataByValue(field, value) {\n    var that = this,\n        result = new Deferred();\n    iteratorUtils.each(this.getResources(), function (_, resource) {\n      var resourceField = that.getField(resource);\n\n      if (resourceField === field) {\n        var dataSource = that._wrapDataSource(resource.dataSource),\n            valueExpr = getValueExpr(resource);\n\n        if (!that._resourceLoader[field]) {\n          that._resourceLoader[field] = dataSource.load();\n        }\n\n        that._resourceLoader[field].done(function (data) {\n          var filteredData = query(data).filter(valueExpr, value).toArray();\n          delete that._resourceLoader[field];\n          result.resolve(filteredData[0]);\n        }).fail(function () {\n          delete that._resourceLoader[field];\n          result.reject();\n        });\n\n        return false;\n      }\n    });\n    return result.promise();\n  },\n  setResourcesToItem: function setResourcesToItem(itemData, resources) {\n    var resourcesSetter = this._dataAccessors.setter;\n\n    for (var name in resources) {\n      if (Object.prototype.hasOwnProperty.call(resources, name)) {\n        var resourceData = resources[name];\n        resourcesSetter[name](itemData, this._isMultipleResource(name) ? arrayUtils.wrapToArray(resourceData) : resourceData);\n      }\n    }\n  },\n  getResourcesFromItem: function getResourcesFromItem(itemData, wrapOnlyMultipleResources) {\n    var that = this,\n        result = null;\n\n    if (!isDefined(wrapOnlyMultipleResources)) {\n      wrapOnlyMultipleResources = false;\n    }\n\n    iteratorUtils.each(that._resourceFields, function (index, field) {\n      iteratorUtils.each(itemData, function (fieldName, fieldValue) {\n        var tmp = {};\n        tmp[fieldName] = fieldValue;\n        var resourceData = that.getDataAccessors(field, \"getter\")(tmp);\n\n        if (resourceData) {\n          if (!result) {\n            result = {};\n          }\n\n          if (1 === resourceData.length) {\n            resourceData = resourceData[0];\n          }\n\n          if (!wrapOnlyMultipleResources || wrapOnlyMultipleResources && that._isMultipleResource(field)) {\n            that.getDataAccessors(field, \"setter\")(tmp, arrayUtils.wrapToArray(resourceData));\n          } else {\n            that.getDataAccessors(field, \"setter\")(tmp, resourceData);\n          }\n\n          extend(result, tmp);\n          return true;\n        }\n      });\n    });\n    return result;\n  },\n  loadResources: function loadResources(groups) {\n    var result = new Deferred(),\n        that = this,\n        deferreds = [];\n    iteratorUtils.each(this.getResourcesByFields(groups), function (i, resource) {\n      var deferred = new Deferred(),\n          field = that.getField(resource);\n      deferreds.push(deferred);\n\n      that._wrapDataSource(resource.dataSource).load().done(function (data) {\n        deferred.resolve({\n          name: field,\n          items: that._mapResourceData(resource, data),\n          data: data\n        });\n      }).fail(function () {\n        deferred.reject();\n      });\n    });\n\n    if (!deferreds.length) {\n      that._resourcesData = [];\n      return result.resolve([]);\n    }\n\n    when.apply(null, deferreds).done(function () {\n      var data = Array.prototype.slice.call(arguments),\n          mapFunction = function mapFunction(obj) {\n        return {\n          name: obj.name,\n          items: obj.items,\n          data: obj.data\n        };\n      };\n\n      that._resourcesData = data;\n      result.resolve(data.map(mapFunction));\n    }).fail(function () {\n      result.reject();\n    });\n    return result.promise();\n  },\n  getResourcesByFields: function getResourcesByFields(fields) {\n    return grep(this.getResources(), function (resource) {\n      var field = this.getField(resource);\n      return inArray(field, fields) > -1;\n    }.bind(this));\n  },\n  getResourceByField: function getResourceByField(field) {\n    return this.getResourcesByFields([field])[0] || {};\n  },\n  getResourceColor: function getResourceColor(field, value) {\n    var valueExpr = this.getResourceByField(field).valueExpr || \"id\",\n        valueGetter = dataCoreUtils.compileGetter(valueExpr),\n        colorExpr = this.getResourceByField(field).colorExpr || \"color\",\n        colorGetter = dataCoreUtils.compileGetter(colorExpr);\n\n    var color,\n        result = new Deferred(),\n        resourceData = this._getResourceDataByField(field),\n        resourceDataLength = resourceData.length;\n\n    if (resourceDataLength) {\n      for (var i = 0; i < resourceDataLength; i++) {\n        if (valueGetter(resourceData[i]) === value) {\n          color = colorGetter(resourceData[i]);\n          break;\n        }\n      }\n\n      result.resolve(color);\n    } else {\n      this.getResourceDataByValue(field, value).done(function (resourceData) {\n        if (resourceData) {\n          color = colorGetter(resourceData);\n        }\n\n        result.resolve(color);\n      }).fail(function () {\n        result.reject();\n      });\n    }\n\n    return result.promise();\n  },\n  getResourceForPainting: function getResourceForPainting(groups) {\n    var result,\n        resources = this.getResources();\n    iteratorUtils.each(resources, function (index, resource) {\n      if (resource.useColorAsDefault) {\n        result = resource;\n        return false;\n      }\n    });\n\n    if (!result) {\n      if (Array.isArray(groups) && groups.length) {\n        resources = this.getResourcesByFields(groups);\n      }\n\n      result = resources[resources.length - 1];\n    }\n\n    return result;\n  },\n  createResourcesTree: function createResourcesTree(groups) {\n    var leafIndex = 0,\n        groupIndex = groupIndex || 0;\n\n    function make(group, groupIndex, result, parent) {\n      result = result || [];\n\n      for (var i = 0; i < group.items.length; i++) {\n        var currentGroupItem = group.items[i];\n        var resultItem = {\n          name: group.name,\n          value: currentGroupItem.id,\n          title: currentGroupItem.text,\n          data: group.data && group.data[i],\n          children: [],\n          parent: parent ? parent : null\n        };\n        result.push(resultItem);\n        var nextGroupIndex = groupIndex + 1;\n\n        if (groups[nextGroupIndex]) {\n          make.call(this, groups[nextGroupIndex], nextGroupIndex, resultItem.children, resultItem);\n        }\n\n        if (!resultItem.children.length) {\n          resultItem.leafIndex = leafIndex;\n          leafIndex++;\n        }\n      }\n\n      return result;\n    }\n\n    return make.call(this, groups[0], 0);\n  },\n  _hasGroupItem: function _hasGroupItem(appointmentResources, groupName, itemValue) {\n    var group = this.getDataAccessors(groupName, \"getter\")(appointmentResources);\n\n    if (group) {\n      if (inArray(itemValue, group) > -1) {\n        return true;\n      }\n    }\n\n    return false;\n  },\n  _getResourceDataByField: function _getResourceDataByField(fieldName) {\n    var loadedResources = this.getResourcesData(),\n        currentResourceData = [];\n\n    for (var i = 0, resourceCount = loadedResources.length; i < resourceCount; i++) {\n      if (loadedResources[i].name === fieldName) {\n        currentResourceData = loadedResources[i].data;\n        break;\n      }\n    }\n\n    return currentResourceData;\n  },\n  getResourceTreeLeaves: function getResourceTreeLeaves(tree, appointmentResources, result) {\n    result = result || [];\n\n    for (var i = 0; i < tree.length; i++) {\n      if (!this._hasGroupItem(appointmentResources, tree[i].name, tree[i].value)) {\n        continue;\n      }\n\n      if (isDefined(tree[i].leafIndex)) {\n        result.push(tree[i].leafIndex);\n      }\n\n      if (tree[i].children) {\n        this.getResourceTreeLeaves(tree[i].children, appointmentResources, result);\n      }\n    }\n\n    return result;\n  },\n  groupAppointmentsByResources: function groupAppointmentsByResources(appointments, resources) {\n    var tree = this.createResourcesTree(resources),\n        result = {};\n    iteratorUtils.each(appointments, function (_, appointment) {\n      var appointmentResources = this.getResourcesFromItem(appointment),\n          treeLeaves = this.getResourceTreeLeaves(tree, appointmentResources);\n\n      for (var i = 0; i < treeLeaves.length; i++) {\n        if (!result[treeLeaves[i]]) {\n          result[treeLeaves[i]] = [];\n        }\n\n        result[treeLeaves[i]].push(objectUtils.deepExtendArraySafe({}, appointment, true));\n      }\n    }.bind(this));\n    return result;\n  },\n  reduceResourcesTree: function reduceResourcesTree(tree, existingAppointments, _result) {\n    _result = _result ? _result.children : [];\n    var that = this;\n    tree.forEach(function (node, index) {\n      var ok = false,\n          resourceName = node.name,\n          resourceValue = node.value,\n          resourceTitle = node.title,\n          resourceData = node.data,\n          resourceGetter = that.getDataAccessors(resourceName, \"getter\");\n      existingAppointments.forEach(function (appointment) {\n        if (!ok) {\n          var resourceFromAppointment = resourceGetter(appointment);\n\n          if (Array.isArray(resourceFromAppointment)) {\n            if (resourceFromAppointment.indexOf(resourceValue) > -1) {\n              _result.push({\n                name: resourceName,\n                value: resourceValue,\n                title: resourceTitle,\n                data: resourceData,\n                children: []\n              });\n\n              ok = true;\n            }\n          } else {\n            if (resourceFromAppointment === resourceValue) {\n              _result.push({\n                name: resourceName,\n                value: resourceValue,\n                title: resourceTitle,\n                data: resourceData,\n                children: []\n              });\n\n              ok = true;\n            }\n          }\n        }\n      });\n\n      if (ok && node.children && node.children.length) {\n        that.reduceResourcesTree(node.children, existingAppointments, _result[index]);\n      }\n    });\n    return _result;\n  }\n});\nmodule.exports = ResourceManager;","map":null,"metadata":{},"sourceType":"script"}