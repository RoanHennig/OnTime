{"ast":null,"code":"/**\r\n * DevExtreme (ui/draggable.js)\r\n * Version: 19.1.6 (build 19263-1729)\r\n * Build date: Fri Sep 20 2019\r\n *\r\n * Copyright (c) 2012 - 2019 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar $ = require(\"../core/renderer\"),\n    window = require(\"../core/utils/window\").getWindow(),\n    eventsEngine = require(\"../events/core/events_engine\"),\n    stringUtils = require(\"../core/utils/string\"),\n    registerComponent = require(\"../core/component_registrator\"),\n    translator = require(\"../animation/translator\"),\n    dasherize = require(\"../core/utils/inflector\").dasherize,\n    extend = require(\"../core/utils/extend\").extend,\n    DOMComponent = require(\"../core/dom_component\"),\n    eventUtils = require(\"../events/utils\"),\n    pointerEvents = require(\"../events/pointer\"),\n    dragEvents = require(\"../events/drag\"),\n    positionUtils = require(\"../animation/position\"),\n    isFunction = require(\"../core/utils/type\").isFunction,\n    noop = require(\"../core/utils/common\").noop;\n\nvar DRAGGABLE = \"dxDraggable\",\n    DRAGSTART_EVENT_NAME = eventUtils.addNamespace(dragEvents.start, DRAGGABLE),\n    DRAG_EVENT_NAME = eventUtils.addNamespace(dragEvents.move, DRAGGABLE),\n    DRAGEND_EVENT_NAME = eventUtils.addNamespace(dragEvents.end, DRAGGABLE),\n    POINTERDOWN_EVENT_NAME = eventUtils.addNamespace(pointerEvents.down, DRAGGABLE),\n    DRAGGABLE_CLASS = dasherize(DRAGGABLE),\n    DRAGGABLE_DRAGGING_CLASS = DRAGGABLE_CLASS + \"-dragging\";\nvar Draggable = DOMComponent.inherit({\n  _getDefaultOptions: function _getDefaultOptions() {\n    return extend(this.callBase(), {\n      onDragStart: noop,\n      onDrag: noop,\n      onDragEnd: noop,\n      immediate: true,\n      direction: \"both\",\n      area: window,\n      boundOffset: 0,\n      allowMoveByClick: false\n    });\n  },\n  _init: function _init() {\n    this.callBase();\n\n    this._attachEventHandlers();\n  },\n  _attachEventHandlers: function _attachEventHandlers() {\n    if (this.option(\"disabled\")) {\n      return;\n    }\n\n    var $element = this.$element().css(\"position\", \"absolute\"),\n        eventHandlers = {},\n        allowMoveByClick = this.option(\"allowMoveByClick\");\n    eventHandlers[DRAGSTART_EVENT_NAME] = this._dragStartHandler.bind(this);\n    eventHandlers[DRAG_EVENT_NAME] = this._dragHandler.bind(this);\n    eventHandlers[DRAGEND_EVENT_NAME] = this._dragEndHandler.bind(this);\n\n    if (allowMoveByClick) {\n      eventHandlers[POINTERDOWN_EVENT_NAME] = this._pointerDownHandler.bind(this);\n      $element = this._getArea();\n    }\n\n    eventsEngine.on($element, eventHandlers, {\n      direction: this.option(\"direction\"),\n      immediate: this.option(\"immediate\")\n    });\n  },\n  _detachEventHandlers: function _detachEventHandlers() {\n    eventsEngine.off(this.$element(), \".\" + DRAGGABLE);\n    eventsEngine.off(this._getArea(), \".\" + DRAGGABLE);\n  },\n  _move: function _move(position) {\n    translator.move(this.$element(), position);\n  },\n  _pointerDownHandler: function _pointerDownHandler(e) {\n    if (eventUtils.needSkipEvent(e)) {\n      return;\n    }\n\n    var areaOffset = this._getAreaOffset($(e.currentTarget)),\n        direction = this.option(\"direction\"),\n        position = {};\n\n    if (\"horizontal\" === direction || \"both\" === direction) {\n      position.left = e.pageX - this.$element().width() / 2 - areaOffset.left;\n    }\n\n    if (\"vertical\" === direction || \"both\" === direction) {\n      position.top = e.pageY - this.$element().height() / 2 - areaOffset.top;\n    }\n\n    this._move(position);\n\n    this._getAction(\"onDrag\")({\n      event: e\n    });\n  },\n  _dragStartHandler: function _dragStartHandler(e) {\n    var $element = this.$element();\n\n    if ($element.is(\".dx-state-disabled, .dx-state-disabled *\")) {\n      e.cancel = true;\n      return;\n    }\n\n    var $area = this._getArea(),\n        areaOffset = this._getAreaOffset($area),\n        boundOffset = this._getBoundOffset(),\n        areaWidth = $area.outerWidth(),\n        areaHeight = $area.outerHeight(),\n        elementWidth = $element.width(),\n        elementHeight = $element.height();\n\n    this._toggleDraggingClass(true);\n\n    var startOffset = {\n      left: $element.offset().left - areaOffset.left,\n      top: $element.offset().top - areaOffset.top\n    };\n    this._startPosition = translator.locate($element);\n    e.maxLeftOffset = startOffset.left - boundOffset.left;\n    e.maxRightOffset = areaWidth - startOffset.left - elementWidth - boundOffset.right;\n    e.maxTopOffset = startOffset.top - boundOffset.top;\n    e.maxBottomOffset = areaHeight - startOffset.top - elementHeight - boundOffset.bottom;\n\n    this._getAction(\"onDragStart\")({\n      event: e\n    });\n  },\n  _getAreaOffset: function _getAreaOffset($area) {\n    var offset = $area && positionUtils.offset($area);\n    return offset ? offset : {\n      left: 0,\n      top: 0\n    };\n  },\n  _toggleDraggingClass: function _toggleDraggingClass(value) {\n    this.$element().toggleClass(DRAGGABLE_DRAGGING_CLASS, value);\n  },\n  _getBoundOffset: function _getBoundOffset() {\n    var boundOffset = this.option(\"boundOffset\");\n\n    if (isFunction(boundOffset)) {\n      boundOffset = boundOffset.call(this);\n    }\n\n    return stringUtils.quadToObject(boundOffset);\n  },\n  _getArea: function _getArea() {\n    var area = this.option(\"area\");\n\n    if (isFunction(area)) {\n      area = area.call(this);\n    }\n\n    return $(area);\n  },\n  _dragHandler: function _dragHandler(e) {\n    var offset = e.offset,\n        startPosition = this._startPosition;\n\n    this._move({\n      left: startPosition.left + offset.x,\n      top: startPosition.top + offset.y\n    });\n\n    this._getAction(\"onDrag\")({\n      event: e\n    });\n  },\n  _dragEndHandler: function _dragEndHandler(e) {\n    this._toggleDraggingClass(false);\n\n    this._getAction(\"onDragEnd\")({\n      event: e\n    });\n  },\n  _getAction: function _getAction(name) {\n    return this[\"_\" + name + \"Action\"] || this._createActionByOption(name);\n  },\n  _render: function _render() {\n    this.callBase();\n    this.$element().addClass(DRAGGABLE_CLASS);\n  },\n  _optionChanged: function _optionChanged(args) {\n    var name = args.name;\n\n    switch (name) {\n      case \"onDragStart\":\n      case \"onDrag\":\n      case \"onDragEnd\":\n        this[\"_\" + name + \"Action\"] = this._createActionByOption(name);\n        break;\n\n      case \"allowMoveByClick\":\n      case \"direction\":\n      case \"disabled\":\n        this._detachEventHandlers();\n\n        this._attachEventHandlers();\n\n        break;\n\n      case \"boundOffset\":\n      case \"area\":\n        break;\n\n      default:\n        this.callBase(args);\n    }\n  },\n  _dispose: function _dispose() {\n    this.callBase();\n\n    this._detachEventHandlers();\n  }\n});\nregisterComponent(DRAGGABLE, Draggable);\nmodule.exports = Draggable;","map":null,"metadata":{},"sourceType":"script"}