{"ast":null,"code":"/**\r\n * DevExtreme (ui/scheduler/tooltip_strategies/mobileTooltipStrategy.js)\r\n * Version: 19.1.6 (build 19263-1729)\r\n * Build date: Fri Sep 20 2019\r\n *\r\n * Copyright (c) 2012 - 2019 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MobileTooltipStrategy = void 0;\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n\n      if (\"value\" in descriptor) {\n        descriptor.writable = true;\n      }\n\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) {\n      defineProperties(Constructor.prototype, protoProps);\n    }\n\n    if (staticProps) {\n      defineProperties(Constructor, staticProps);\n    }\n\n    return Constructor;\n  };\n}();\n\nvar _get = function get(object, property, receiver) {\n  if (null === object) {\n    object = Function.prototype;\n  }\n\n  var desc = Object.getOwnPropertyDescriptor(object, property);\n\n  if (void 0 === desc) {\n    var parent = Object.getPrototypeOf(object);\n\n    if (null === parent) {\n      return;\n    } else {\n      return get(parent, property, receiver);\n    }\n  } else {\n    if (\"value\" in desc) {\n      return desc.value;\n    } else {\n      var getter = desc.get;\n\n      if (void 0 === getter) {\n        return;\n      }\n\n      return getter.call(receiver);\n    }\n  }\n};\n\nvar _overlay = require(\"../../overlay\");\n\nvar _overlay2 = _interopRequireDefault(_overlay);\n\nvar _tooltipStrategyBase = require(\"./tooltipStrategyBase\");\n\nvar _renderer = require(\"../../../core/renderer\");\n\nvar _renderer2 = _interopRequireDefault(_renderer);\n\nvar _window = require(\"../../../core/utils/window\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (\"object\" === typeof call || \"function\" === typeof call) ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (\"function\" !== typeof superClass && null !== superClass) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n\n  if (superClass) {\n    Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n  }\n}\n\nvar SLIDE_PANEL_CLASS_NAME = \"dx-scheduler-overlay-panel\";\nvar MAX_OVERLAY_HEIGHT = 250;\nvar animationConfig = {\n  show: {\n    type: \"slide\",\n    duration: 300,\n    from: {\n      position: {\n        my: \"top\",\n        at: \"bottom\",\n        of: (0, _window.getWindow)()\n      }\n    },\n    to: {\n      position: {\n        my: \"center\",\n        at: \"center\",\n        of: (0, _window.getWindow)()\n      }\n    }\n  },\n  hide: {\n    type: \"slide\",\n    duration: 300,\n    to: {\n      position: {\n        my: \"top\",\n        at: \"bottom\",\n        of: (0, _window.getWindow)()\n      }\n    },\n    from: {\n      position: {\n        my: \"center\",\n        at: \"center\",\n        of: (0, _window.getWindow)()\n      }\n    }\n  }\n};\nvar positionConfig = {\n  my: \"bottom\",\n  at: \"bottom\",\n  of: (0, _window.getWindow)()\n};\n\nvar MobileTooltipStrategy = exports.MobileTooltipStrategy = function (_TooltipStrategyBase) {\n  _inherits(MobileTooltipStrategy, _TooltipStrategyBase);\n\n  function MobileTooltipStrategy() {\n    _classCallCheck(this, MobileTooltipStrategy);\n\n    return _possibleConstructorReturn(this, (MobileTooltipStrategy.__proto__ || Object.getPrototypeOf(MobileTooltipStrategy)).apply(this, arguments));\n  }\n\n  _createClass(MobileTooltipStrategy, [{\n    key: \"_onListItemClick\",\n    value: function value(e) {\n      _get(MobileTooltipStrategy.prototype.__proto__ || Object.getPrototypeOf(MobileTooltipStrategy.prototype), \"_onListItemClick\", this).call(this, e);\n\n      this.scheduler.showAppointmentPopup(e.itemData.data, false, e.itemData.currentData);\n    }\n  }, {\n    key: \"_shouldUseTarget\",\n    value: function value() {\n      return false;\n    }\n  }, {\n    key: \"_onShowing\",\n    value: function value() {\n      this.tooltip.option(\"height\", \"auto\");\n      var height = this.list.$element().outerHeight();\n      this.tooltip.option(\"height\", height > MAX_OVERLAY_HEIGHT ? MAX_OVERLAY_HEIGHT : \"auto\");\n    }\n  }, {\n    key: \"_createTooltip\",\n    value: function value(target) {\n      var _this2 = this;\n\n      var $overlay = (0, _renderer2.default)(\"<div>\").addClass(SLIDE_PANEL_CLASS_NAME).appendTo(this.scheduler.$element());\n      return this.scheduler._createComponent($overlay, _overlay2.default, {\n        shading: false,\n        position: positionConfig,\n        animation: animationConfig,\n        target: this.scheduler.$element(),\n        container: this.scheduler.$element(),\n        closeOnOutsideClick: true,\n        width: \"100%\",\n        height: \"auto\",\n        onShowing: function onShowing() {\n          return _this2._onShowing();\n        }\n      });\n    }\n  }]);\n\n  return MobileTooltipStrategy;\n}(_tooltipStrategyBase.TooltipStrategyBase);","map":null,"metadata":{},"sourceType":"script"}