{"ast":null,"code":"/**\r\n * DevExtreme (ui/validator.js)\r\n * Version: 19.1.6 (build 19263-1729)\r\n * Build date: Fri Sep 20 2019\r\n *\r\n * Copyright (c) 2012 - 2019 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar dataUtils = require(\"../core/element_data\"),\n    Callbacks = require(\"../core/utils/callbacks\"),\n    errors = require(\"./widget/ui.errors\"),\n    DOMComponent = require(\"../core/dom_component\"),\n    extend = require(\"../core/utils/extend\").extend,\n    map = require(\"../core/utils/iterator\").map,\n    ValidationMixin = require(\"./validation/validation_mixin\"),\n    ValidationEngine = require(\"./validation_engine\"),\n    DefaultAdapter = require(\"./validation/default_adapter\"),\n    registerComponent = require(\"../core/component_registrator\");\n\nvar VALIDATOR_CLASS = \"dx-validator\";\nvar Validator = DOMComponent.inherit({\n  _getDefaultOptions: function _getDefaultOptions() {\n    return extend(this.callBase(), {\n      validationRules: []\n    });\n  },\n  _init: function _init() {\n    this.callBase();\n\n    this._initGroupRegistration();\n\n    this.focused = Callbacks();\n\n    this._initAdapter();\n  },\n  _initGroupRegistration: function _initGroupRegistration() {\n    var group = this._findGroup();\n\n    if (!this._groupWasInit) {\n      this.on(\"disposing\", function (args) {\n        ValidationEngine.removeRegisteredValidator(args.component._validationGroup, args.component);\n      });\n    }\n\n    if (!this._groupWasInit || this._validationGroup !== group) {\n      ValidationEngine.removeRegisteredValidator(this._validationGroup, this);\n      this._groupWasInit = true;\n      this._validationGroup = group;\n      ValidationEngine.registerValidatorInGroup(group, this);\n    }\n  },\n  _setOptionsByReference: function _setOptionsByReference() {\n    this.callBase();\n    extend(this._optionsByReference, {\n      validationGroup: true\n    });\n  },\n  _initAdapter: function _initAdapter() {\n    var that = this,\n        element = that.$element()[0],\n        dxStandardEditor = dataUtils.data(element, \"dx-validation-target\"),\n        adapter = that.option(\"adapter\");\n\n    if (!adapter) {\n      if (dxStandardEditor) {\n        adapter = new DefaultAdapter(dxStandardEditor, this);\n        adapter.validationRequestsCallbacks.add(function (args) {\n          that.validate(args);\n        });\n        this.option(\"adapter\", adapter);\n        return;\n      }\n\n      throw errors.Error(\"E0120\");\n    }\n\n    var callbacks = adapter.validationRequestsCallbacks;\n\n    if (callbacks) {\n      if (Array.isArray(callbacks)) {\n        callbacks.push(function (args) {\n          that.validate(args);\n        });\n      } else {\n        errors.log(\"W0014\", \"validationRequestsCallbacks\", \"jQuery.Callbacks\", \"17.2\", \"Use the array instead\");\n        callbacks.add(function (args) {\n          that.validate(args);\n        });\n      }\n    }\n  },\n  _initMarkup: function _initMarkup() {\n    this.$element().addClass(VALIDATOR_CLASS);\n    this.callBase();\n  },\n  _visibilityChanged: function _visibilityChanged(visible) {\n    if (visible) {\n      this._initGroupRegistration();\n    }\n  },\n  _optionChanged: function _optionChanged(args) {\n    switch (args.name) {\n      case \"validationGroup\":\n        this._initGroupRegistration();\n\n        return;\n\n      case \"validationRules\":\n        this._resetValidationRules();\n\n        void 0 !== this.option(\"isValid\") && this.validate();\n        return;\n\n      case \"adapter\":\n        this._initAdapter();\n\n        break;\n\n      default:\n        this.callBase(args);\n    }\n  },\n  _getValidationRules: function _getValidationRules() {\n    if (!this._validationRules) {\n      this._validationRules = map(this.option(\"validationRules\"), function (rule) {\n        return extend({}, rule, {\n          validator: this\n        });\n      }.bind(this));\n    }\n\n    return this._validationRules;\n  },\n  _resetValidationRules: function _resetValidationRules() {\n    delete this._validationRules;\n  },\n  validate: function validate(args) {\n    var result,\n        that = this,\n        adapter = that.option(\"adapter\"),\n        name = that.option(\"name\"),\n        bypass = adapter.bypass && adapter.bypass(),\n        value = args && void 0 !== args.value ? args.value : adapter.getValue(),\n        currentError = adapter.getCurrentValidationError && adapter.getCurrentValidationError(),\n        rules = this._getValidationRules();\n\n    if (bypass) {\n      result = {\n        isValid: true\n      };\n    } else {\n      if (currentError && currentError.editorSpecific) {\n        currentError.validator = this;\n        result = {\n          isValid: false,\n          brokenRule: currentError\n        };\n      } else {\n        result = ValidationEngine.validate(value, rules, name);\n      }\n    }\n\n    this._applyValidationResult(result, adapter);\n\n    return result;\n  },\n  reset: function reset() {\n    var that = this,\n        adapter = that.option(\"adapter\"),\n        result = {\n      isValid: true,\n      brokenRule: null\n    };\n    adapter.reset();\n\n    this._resetValidationRules();\n\n    this._applyValidationResult(result, adapter);\n  },\n  _applyValidationResult: function _applyValidationResult(result, adapter) {\n    var validatedAction = this._createActionByOption(\"onValidated\");\n\n    result.validator = this;\n    adapter.applyValidationResults && adapter.applyValidationResults(result);\n    this.option({\n      isValid: result.isValid\n    });\n    validatedAction(result);\n  },\n  focus: function focus() {\n    var adapter = this.option(\"adapter\");\n    adapter && adapter.focus && adapter.focus();\n  }\n}).include(ValidationMixin);\nregisterComponent(\"dxValidator\", Validator);\nmodule.exports = Validator;\nmodule.exports.default = module.exports;","map":null,"metadata":{},"sourceType":"script"}