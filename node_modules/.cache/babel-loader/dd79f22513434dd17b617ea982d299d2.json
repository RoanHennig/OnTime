{"ast":null,"code":"/**\r\n * DevExtreme (ui/scheduler/rendering_strategies/ui.scheduler.appointments.strategy.horizontal.js)\r\n * Version: 19.1.6 (build 19263-1729)\r\n * Build date: Fri Sep 20 2019\r\n *\r\n * Copyright (c) 2012 - 2019 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n\n      if (\"value\" in descriptor) {\n        descriptor.writable = true;\n      }\n\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) {\n      defineProperties(Constructor.prototype, protoProps);\n    }\n\n    if (staticProps) {\n      defineProperties(Constructor, staticProps);\n    }\n\n    return Constructor;\n  };\n}();\n\nvar _get = function get(object, property, receiver) {\n  if (null === object) {\n    object = Function.prototype;\n  }\n\n  var desc = Object.getOwnPropertyDescriptor(object, property);\n\n  if (void 0 === desc) {\n    var parent = Object.getPrototypeOf(object);\n\n    if (null === parent) {\n      return;\n    } else {\n      return get(parent, property, receiver);\n    }\n  } else {\n    if (\"value\" in desc) {\n      return desc.value;\n    } else {\n      var getter = desc.get;\n\n      if (void 0 === getter) {\n        return;\n      }\n\n      return getter.call(receiver);\n    }\n  }\n};\n\nvar _uiSchedulerAppointmentsStrategy = require(\"./ui.scheduler.appointments.strategy.base\");\n\nvar _uiSchedulerAppointmentsStrategy2 = _interopRequireDefault(_uiSchedulerAppointmentsStrategy);\n\nvar _date = require(\"../../../core/utils/date\");\n\nvar _date2 = _interopRequireDefault(_date);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (\"object\" === typeof call || \"function\" === typeof call) ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (\"function\" !== typeof superClass && null !== superClass) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n\n  if (superClass) {\n    Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n  }\n}\n\nvar MAX_APPOINTMENT_HEIGHT = 100,\n    DEFAULT_APPOINTMENT_HEIGHT = 60,\n    MIN_APPOINTMENT_HEIGHT = 35,\n    DROP_DOWN_BUTTON_OFFSET = 2,\n    BOTTOM_CELL_GAP = 20;\nvar toMs = _date2.default.dateToMilliseconds;\n\nvar HorizontalRenderingStrategy = function (_BaseAppointmentsStra) {\n  _inherits(HorizontalRenderingStrategy, _BaseAppointmentsStra);\n\n  function HorizontalRenderingStrategy() {\n    _classCallCheck(this, HorizontalRenderingStrategy);\n\n    return _possibleConstructorReturn(this, (HorizontalRenderingStrategy.__proto__ || Object.getPrototypeOf(HorizontalRenderingStrategy)).apply(this, arguments));\n  }\n\n  _createClass(HorizontalRenderingStrategy, [{\n    key: \"_needVerifyItemSize\",\n    value: function value() {\n      return true;\n    }\n  }, {\n    key: \"calculateAppointmentWidth\",\n    value: function value(appointment, position, isRecurring) {\n      var width,\n          cellWidth = this.getDefaultCellWidth() || this.getAppointmentMinSize(),\n          allDay = this.instance.fire(\"getField\", \"allDay\", appointment);\n\n      var startDate = this.startDate(appointment, false, position),\n          endDate = this.endDate(appointment, position, isRecurring),\n          appointmentDuration = this._getAppointmentDurationInMs(startDate, endDate, allDay);\n\n      appointmentDuration = this._adjustDurationByDaylightDiff(appointmentDuration, startDate, endDate);\n      var cellDuration = this.instance.getAppointmentDurationInMinutes() * toMs(\"minute\"),\n          durationInCells = appointmentDuration / cellDuration;\n      width = durationInCells * cellWidth;\n      width = this.cropAppointmentWidth(width, cellWidth);\n      return width;\n    }\n  }, {\n    key: \"_needAdjustDuration\",\n    value: function value(diff) {\n      return diff < 0;\n    }\n  }, {\n    key: \"getAppointmentGeometry\",\n    value: function value(coordinates) {\n      var result = this._customizeAppointmentGeometry(coordinates);\n\n      return _get(HorizontalRenderingStrategy.prototype.__proto__ || Object.getPrototypeOf(HorizontalRenderingStrategy.prototype), \"getAppointmentGeometry\", this).call(this, result);\n    }\n  }, {\n    key: \"_customizeAppointmentGeometry\",\n    value: function value(coordinates) {\n      var overlappingMode = this.instance.fire(\"getMaxAppointmentsPerCell\");\n\n      if (overlappingMode) {\n        var config = this._calculateGeometryConfig(coordinates);\n\n        return this._customizeCoordinates(coordinates, config.height, config.appointmentCountPerCell, config.offset);\n      } else {\n        var cellHeight = (this.getDefaultCellHeight() || this.getAppointmentMinSize()) - BOTTOM_CELL_GAP,\n            height = cellHeight / coordinates.count;\n\n        if (height > MAX_APPOINTMENT_HEIGHT) {\n          height = MAX_APPOINTMENT_HEIGHT;\n        }\n\n        var top = coordinates.top + coordinates.index * height;\n        return {\n          height: height,\n          width: coordinates.width,\n          top: top,\n          left: coordinates.left\n        };\n      }\n    }\n  }, {\n    key: \"_getOffsets\",\n    value: function value() {\n      return {\n        unlimited: 0,\n        auto: 0\n      };\n    }\n  }, {\n    key: \"_checkLongCompactAppointment\",\n    value: function value(item, result) {\n      var overlappingMode = this.instance.fire(\"getMaxAppointmentsPerCell\");\n\n      if (overlappingMode) {\n        this._splitLongCompactAppointment(item, result);\n\n        return result;\n      }\n    }\n  }, {\n    key: \"_getCompactLeftCoordinate\",\n    value: function value(itemLeft, index) {\n      var cellWidth = this.getDefaultCellWidth() || this.getAppointmentMinSize();\n      return itemLeft + cellWidth * index;\n    }\n  }, {\n    key: \"_getMaxHeight\",\n    value: function value() {\n      return this.getDefaultCellHeight() || this.getAppointmentMinSize();\n    }\n  }, {\n    key: \"_getAppointmentCount\",\n    value: function value(overlappingMode, coordinates) {\n      return this._getMaxAppointmentCountPerCellByType(false);\n    }\n  }, {\n    key: \"_getAppointmentDefaultHeight\",\n    value: function value() {\n      return DEFAULT_APPOINTMENT_HEIGHT;\n    }\n  }, {\n    key: \"_getAppointmentMinHeight\",\n    value: function value() {\n      return MIN_APPOINTMENT_HEIGHT;\n    }\n  }, {\n    key: \"_correctRtlCoordinatesParts\",\n    value: function value(coordinates, width) {\n      for (var i = 1; i < coordinates.length; i++) {\n        coordinates[i].left -= width;\n      }\n\n      return coordinates;\n    }\n  }, {\n    key: \"_sortCondition\",\n    value: function value(a, b) {\n      var result = this._columnCondition(a, b);\n\n      return this._fixUnstableSorting(result, a, b);\n    }\n  }, {\n    key: \"_getMaxAppointmentWidth\",\n    value: function value(startDate) {\n      var result;\n      this.instance.fire(\"getMaxAppointmentWidth\", {\n        date: startDate,\n        callback: function callback(width) {\n          result = width;\n        }\n      });\n      return result;\n    }\n  }, {\n    key: \"getDropDownAppointmentWidth\",\n    value: function value() {\n      return this.getDefaultCellWidth() - 2 * DROP_DOWN_BUTTON_OFFSET;\n    }\n  }, {\n    key: \"getDeltaTime\",\n    value: function value(args, initialSize) {\n      var deltaTime = 0,\n          deltaWidth = args.width - initialSize.width;\n      deltaTime = toMs(\"minute\") * Math.round(deltaWidth / this.getDefaultCellWidth() * this.instance.getAppointmentDurationInMinutes());\n      return deltaTime;\n    }\n  }, {\n    key: \"isAllDay\",\n    value: function value(appointmentData) {\n      return this.instance.fire(\"getField\", \"allDay\", appointmentData);\n    }\n  }, {\n    key: \"needSeparateAppointment\",\n    value: function value() {\n      return this.instance.fire(\"isGroupedByDate\");\n    }\n  }]);\n\n  return HorizontalRenderingStrategy;\n}(_uiSchedulerAppointmentsStrategy2.default);\n\nmodule.exports = HorizontalRenderingStrategy;","map":null,"metadata":{},"sourceType":"script"}