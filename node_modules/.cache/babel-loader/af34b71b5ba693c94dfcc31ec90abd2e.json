{"ast":null,"code":"/**\r\n * DevExtreme (ui/scheduler/ui.scheduler.appointment_form.js)\r\n * Version: 19.1.6 (build 19263-1729)\r\n * Build date: Fri Sep 20 2019\r\n *\r\n * Copyright (c) 2012 - 2019 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar _renderer = require(\"../../core/renderer\");\n\nvar _renderer2 = _interopRequireDefault(_renderer);\n\nvar _form = require(\"../form\");\n\nvar _form2 = _interopRequireDefault(_form);\n\nvar _date_serialization = require(\"../../core/utils/date_serialization\");\n\nvar _date_serialization2 = _interopRequireDefault(_date_serialization);\n\nvar _message = require(\"../../localization/message\");\n\nvar _message2 = _interopRequireDefault(_message);\n\nvar _click = require(\"../../events/click\");\n\nvar _click2 = _interopRequireDefault(_click);\n\nvar _type = require(\"../../core/utils/type\");\n\nvar _type2 = _interopRequireDefault(_type);\n\nvar _events_engine = require(\"../../events/core/events_engine\");\n\nvar _events_engine2 = _interopRequireDefault(_events_engine);\n\nrequire(\"./ui.scheduler.recurrence_editor\");\n\nrequire(\"./timezones/ui.scheduler.timezone_editor\");\n\nrequire(\"../text_area\");\n\nrequire(\"../tag_box\");\n\nrequire(\"../switch\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nvar RECURRENCE_EDITOR_ITEM_CLASS = \"dx-scheduler-recurrence-rule-item\";\nvar SCREEN_SIZE_OF_TOP_LABEL_LOCATION = 608;\nvar SCREEN_SIZE_OF_SINGLE_COLUMN = 460;\nvar SchedulerAppointmentForm = {\n  _appointmentForm: {},\n  _lockDateShiftFlag: false,\n  _validateAppointmentFormDate: function _validateAppointmentFormDate(editor, value, previousValue) {\n    var isCurrentDateCorrect = null === value || !!value;\n    var isPreviousDateCorrect = null === previousValue || !!previousValue;\n\n    if (!isCurrentDateCorrect && isPreviousDateCorrect) {\n      editor.option(\"value\", previousValue);\n    }\n  },\n  _getAllDayStartDate: function _getAllDayStartDate(startDate) {\n    return startDate.setHours(0, 0, 0, 0);\n  },\n  _getAllDayEndDate: function _getAllDayEndDate(startDate) {\n    var endDate = new Date(startDate);\n    endDate.setDate(startDate.getDate() + 1);\n    return endDate;\n  },\n  _updateLabelLocation: function _updateLabelLocation(formWidth) {\n    var form = this._appointmentForm;\n\n    if (form._initialized && form.isReady()) {\n      form.option(\"labelLocation\", formWidth < SCREEN_SIZE_OF_TOP_LABEL_LOCATION ? \"top\" : \"left\");\n    }\n  },\n  create: function create(componentCreator, $container, isReadOnly, formData) {\n    var _this = this;\n\n    this._appointmentForm = componentCreator($container, _form2.default, {\n      items: this._editors,\n      readOnly: isReadOnly,\n      showValidationSummary: true,\n      scrollingEnabled: true,\n      formData: formData,\n      colCount: 2,\n      showColonAfterLabel: false,\n      screenByWidth: function screenByWidth() {\n        var formWidth = $container.parent().outerWidth();\n\n        _this._updateLabelLocation(formWidth);\n\n        return formWidth < SCREEN_SIZE_OF_SINGLE_COLUMN ? \"xs\" : \"lg\";\n      }\n    });\n    return this._appointmentForm;\n  },\n  prepareAppointmentFormEditors: function prepareAppointmentFormEditors(allDay, dataExprs, schedulerInst) {\n    var that = this;\n    this._editors = [{\n      dataField: dataExprs.textExpr,\n      editorType: \"dxTextBox\",\n      colSpan: 2,\n      label: {\n        text: _message2.default.format(\"dxScheduler-editorLabelTitle\")\n      }\n    }, {\n      dataField: dataExprs.startDateExpr,\n      editorType: \"dxDateBox\",\n      label: {\n        text: _message2.default.format(\"dxScheduler-editorLabelStartDate\")\n      },\n      validationRules: [{\n        type: \"required\"\n      }],\n      editorOptions: {\n        type: allDay ? \"date\" : \"datetime\",\n        width: \"100%\",\n        calendarOptions: {\n          firstDayOfWeek: schedulerInst.option(\"firstDayOfWeek\")\n        },\n        onValueChanged: function onValueChanged(args) {\n          that._validateAppointmentFormDate(args.component, args.value, args.previousValue);\n\n          var value = _date_serialization2.default.deserializeDate(args.value),\n              previousValue = _date_serialization2.default.deserializeDate(args.previousValue),\n              endDateEditor = that._appointmentForm.getEditor(dataExprs.endDateExpr),\n              endValue = _date_serialization2.default.deserializeDate(endDateEditor.option(\"value\"));\n\n          if (!that._appointmentForm._lockDateShiftFlag && _type2.default.isDefined(endValue) && _type2.default.isDefined(value) && !!endValue && endValue < value) {\n            var duration = endValue.getTime() - previousValue.getTime();\n            endDateEditor.option(\"value\", new Date(value.getTime() + duration));\n          }\n        }\n      }\n    }, {\n      dataField: dataExprs.startDateTimeZoneExpr,\n      editorType: \"dxSchedulerTimezoneEditor\",\n      colSpan: 2,\n      label: {\n        text: \" \",\n        showColon: false\n      },\n      editorOptions: {\n        observer: schedulerInst\n      },\n      visible: false\n    }, {\n      dataField: dataExprs.endDateExpr,\n      editorType: \"dxDateBox\",\n      label: {\n        text: _message2.default.format(\"dxScheduler-editorLabelEndDate\")\n      },\n      validationRules: [{\n        type: \"required\"\n      }],\n      editorOptions: {\n        type: allDay ? \"date\" : \"datetime\",\n        width: \"100%\",\n        calendarOptions: {\n          firstDayOfWeek: schedulerInst.option(\"firstDayOfWeek\")\n        },\n        onValueChanged: function onValueChanged(args) {\n          that._validateAppointmentFormDate(args.component, args.value, args.previousValue);\n\n          var value = _date_serialization2.default.deserializeDate(args.value),\n              previousValue = _date_serialization2.default.deserializeDate(args.previousValue),\n              startDateEditor = that._appointmentForm.getEditor(dataExprs.startDateExpr),\n              startValue = _date_serialization2.default.deserializeDate(startDateEditor.option(\"value\"));\n\n          if (!that._appointmentForm._lockDateShiftFlag && !!value && startValue > value) {\n            var duration = previousValue ? previousValue.getTime() - startValue.getTime() : 0;\n            startDateEditor.option(\"value\", new Date(value.getTime() - duration));\n          }\n        }\n      }\n    }, {\n      dataField: dataExprs.endDateTimeZoneExpr,\n      editorType: \"dxSchedulerTimezoneEditor\",\n      colSpan: 2,\n      label: {\n        text: \" \",\n        showColon: false\n      },\n      editorOptions: {\n        observer: schedulerInst\n      },\n      visible: false\n    }, {\n      dataField: dataExprs.allDayExpr,\n      editorType: \"dxSwitch\",\n      colSpan: 2,\n      label: {\n        text: _message2.default.format(\"dxScheduler-allDay\")\n      },\n      editorOptions: {\n        onValueChanged: function onValueChanged(args) {\n          var value = args.value,\n              startDateEditor = that._appointmentForm.getEditor(dataExprs.startDateExpr),\n              endDateEditor = that._appointmentForm.getEditor(dataExprs.endDateExpr);\n\n          if (startDateEditor && endDateEditor) {\n            startDateEditor.option(\"type\", value ? \"date\" : \"datetime\");\n            endDateEditor.option(\"type\", value ? \"date\" : \"datetime\");\n\n            if (!startDateEditor.option(\"value\")) {\n              return;\n            }\n\n            var startDate = _date_serialization2.default.deserializeDate(startDateEditor.option(\"value\"));\n\n            if (value) {\n              startDateEditor.option(\"value\", that._getAllDayStartDate(startDate));\n              endDateEditor.option(\"value\", that._getAllDayEndDate(startDate));\n            } else {\n              startDate.setHours(schedulerInst.option(\"startDayHour\"));\n              startDateEditor.option(\"value\", startDate);\n              endDateEditor.option(\"value\", schedulerInst._workSpace.calculateEndDate(_date_serialization2.default.deserializeDate(startDateEditor.option(\"value\"))));\n            }\n          }\n        }\n      }\n    }, {\n      itemType: \"empty\",\n      colSpan: 2\n    }, {\n      dataField: dataExprs.descriptionExpr,\n      editorType: \"dxTextArea\",\n      colSpan: 2,\n      label: {\n        text: _message2.default.format(\"dxScheduler-editorLabelDescription\")\n      }\n    }, {\n      itemType: \"empty\",\n      colSpan: 2\n    }, {\n      dataField: dataExprs.recurrenceRuleExpr,\n      editorType: \"dxRecurrenceEditor\",\n      colSpan: 2,\n      editorOptions: {\n        observer: schedulerInst,\n        firstDayOfWeek: schedulerInst.option(\"firstDayOfWeek\"),\n        onValueChanged: function onValueChanged(args) {\n          var value = that._getRecurrenceRule(schedulerInst, that._appointmentForm);\n\n          schedulerInst.fire(\"recurrenceEditorVisibilityChanged\", value);\n        },\n        onContentReady: function onContentReady(args) {\n          var $editorField = (0, _renderer2.default)(args.element).closest(\".dx-field-item\"),\n              $editorLabel = $editorField.find(\".dx-field-item-label\");\n\n          _events_engine2.default.off($editorLabel, _click2.default.name);\n\n          _events_engine2.default.on($editorLabel, _click2.default.name, function () {\n            args.component.toggle();\n          });\n        }\n      },\n      cssClass: RECURRENCE_EDITOR_ITEM_CLASS,\n      label: {\n        text: _message2.default.format(\"dxScheduler-editorLabelRecurrence\")\n      }\n    }];\n\n    if (!dataExprs.recurrenceRuleExpr) {\n      this._editors.splice(9, 2);\n    }\n\n    return this._editors;\n  },\n  _getRecurrenceRule: function _getRecurrenceRule(schedulerInstance, appointmentForm) {\n    return !_type2.default.isEmptyObject(appointmentForm) ? !!schedulerInstance.fire(\"getField\", \"recurrenceRule\", appointmentForm.option(\"formData\")) : false;\n  },\n  concatResources: function concatResources(resources) {\n    this._editors = this._editors.concat(resources);\n  },\n  checkEditorsType: function checkEditorsType(form, startDateExpr, endDateExpr, allDay) {\n    var startDateFormItem = form.itemOption(startDateExpr),\n        endDateFormItem = form.itemOption(endDateExpr);\n\n    if (startDateFormItem && endDateFormItem) {\n      var startDateEditorOptions = startDateFormItem.editorOptions,\n          endDateEditorOptions = endDateFormItem.editorOptions;\n\n      if (allDay) {\n        startDateEditorOptions.type = endDateEditorOptions.type = \"date\";\n      } else {\n        startDateEditorOptions.type = endDateEditorOptions.type = \"datetime\";\n      }\n\n      form.itemOption(startDateExpr, \"editorOptions\", startDateEditorOptions);\n      form.itemOption(endDateExpr, \"editorOptions\", endDateEditorOptions);\n    }\n  },\n  updateFormData: function updateFormData(appointmentForm, formData) {\n    appointmentForm._lockDateShiftFlag = true;\n    appointmentForm.option(\"formData\", formData);\n    appointmentForm._lockDateShiftFlag = false;\n  }\n};\nmodule.exports = SchedulerAppointmentForm;","map":null,"metadata":{},"sourceType":"script"}