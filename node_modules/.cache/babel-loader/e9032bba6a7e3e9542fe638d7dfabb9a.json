{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Roan\\\\Documents\\\\GitHub\\\\OnTimeReactFrontEnd\\\\src\\\\@fuse\\\\components\\\\formsy\\\\FuseChipSelectFormsy.js\";\nimport React from 'react';\nimport { FormControl, FormHelperText, InputLabel } from '@material-ui/core';\nimport { FuseChipSelect } from '@fuse';\nimport { withFormsy } from 'formsy-react';\nimport _ from '@lodash';\nimport clsx from 'clsx';\n\nfunction FuseChipSelectFormsy(props) {\n  var importedProps = _.pick(props, ['children', 'classes', 'className', 'defaultValue', 'disabled', 'fullWidth', 'id', 'label', 'name', 'onBlur', 'onChange', 'onFocus', 'placeholder', 'required', 'textFieldProps', 'variant', 'isMulti', 'options', 'errorMessage']); // An error message is returned only if the component is invalid\n\n\n  var errorMessage = props.getErrorMessage();\n  var value = props.getValue();\n\n  function changeValue(value, selectedOptions) {\n    if (props.multiple) {\n      props.setValue(selectedOptions.map(function (option) {\n        return option.value;\n      }));\n    } else {\n      props.setValue(value);\n    }\n  }\n\n  return React.createElement(FormControl, {\n    error: Boolean(errorMessage),\n    className: clsx(props.className, props.showRequired() ? 'required' : props.showError() ? 'error' : null),\n    variant: importedProps.variant,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }, props.label && React.createElement(InputLabel, {\n    htmlFor: props.name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }, props.label), React.createElement(FuseChipSelect, Object.assign({}, importedProps, {\n    value: value,\n    onChange: changeValue,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  })), Boolean(errorMessage) && React.createElement(FormHelperText, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }, errorMessage));\n}\n\nexport default React.memo(withFormsy(FuseChipSelectFormsy));","map":{"version":3,"sources":["C:\\Users\\Roan\\Documents\\GitHub\\OnTimeReactFrontEnd\\src\\@fuse\\components\\formsy\\FuseChipSelectFormsy.js"],"names":["React","FormControl","FormHelperText","InputLabel","FuseChipSelect","withFormsy","_","clsx","FuseChipSelectFormsy","props","importedProps","pick","errorMessage","getErrorMessage","value","getValue","changeValue","selectedOptions","multiple","setValue","map","option","Boolean","className","showRequired","showError","variant","label","name","memo"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,WAAR,EAAqBC,cAArB,EAAqCC,UAArC,QAAsD,mBAAtD;AACA,SAAQC,cAAR,QAA6B,OAA7B;AACA,SAAQC,UAAR,QAAyB,cAAzB;AACA,OAAOC,CAAP,MAAc,SAAd;AACA,OAAOC,IAAP,MAAiB,MAAjB;;AAEA,SAASC,oBAAT,CAA8BC,KAA9B,EACA;AACI,MAAMC,aAAa,GAAGJ,CAAC,CAACK,IAAF,CAAOF,KAAP,EAAc,CAChC,UADgC,EAEhC,SAFgC,EAGhC,WAHgC,EAIhC,cAJgC,EAKhC,UALgC,EAMhC,WANgC,EAOhC,IAPgC,EAQhC,OARgC,EAShC,MATgC,EAUhC,QAVgC,EAWhC,UAXgC,EAYhC,SAZgC,EAahC,aAbgC,EAchC,UAdgC,EAehC,gBAfgC,EAgBhC,SAhBgC,EAiBhC,SAjBgC,EAkBhC,SAlBgC,EAmBhC,cAnBgC,CAAd,CAAtB,CADJ,CAuBI;;;AACA,MAAMG,YAAY,GAAGH,KAAK,CAACI,eAAN,EAArB;AACA,MAAMC,KAAK,GAAGL,KAAK,CAACM,QAAN,EAAd;;AAEA,WAASC,WAAT,CAAqBF,KAArB,EAA4BG,eAA5B,EACA;AACI,QAAKR,KAAK,CAACS,QAAX,EACA;AACIT,MAAAA,KAAK,CAACU,QAAN,CAAeF,eAAe,CAACG,GAAhB,CAAoB,UAAAC,MAAM;AAAA,eAAIA,MAAM,CAACP,KAAX;AAAA,OAA1B,CAAf;AACH,KAHD,MAKA;AACIL,MAAAA,KAAK,CAACU,QAAN,CAAeL,KAAf;AACH;AACJ;;AAED,SACI,oBAAC,WAAD;AACI,IAAA,KAAK,EAAEQ,OAAO,CAACV,YAAD,CADlB;AAEI,IAAA,SAAS,EAAEL,IAAI,CAACE,KAAK,CAACc,SAAP,EAAkBd,KAAK,CAACe,YAAN,KAAuB,UAAvB,GAAoCf,KAAK,CAACgB,SAAN,KAAoB,OAApB,GAA8B,IAApF,CAFnB;AAGI,IAAA,OAAO,EAAEf,aAAa,CAACgB,OAH3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAIKjB,KAAK,CAACkB,KAAN,IACG,oBAAC,UAAD;AAAY,IAAA,OAAO,EAAElB,KAAK,CAACmB,IAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAkCnB,KAAK,CAACkB,KAAxC,CALR,EAOI,oBAAC,cAAD,oBACQjB,aADR;AAEI,IAAA,KAAK,EAAEI,KAFX;AAGI,IAAA,QAAQ,EAAEE,WAHd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAPJ,EAYKM,OAAO,CAACV,YAAD,CAAP,IACG,oBAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAiBA,YAAjB,CAbR,CADJ;AAkBH;;AAED,eAAeZ,KAAK,CAAC6B,IAAN,CAAWxB,UAAU,CAACG,oBAAD,CAArB,CAAf","sourcesContent":["import React from 'react';\r\nimport {FormControl, FormHelperText, InputLabel} from '@material-ui/core';\r\nimport {FuseChipSelect} from '@fuse';\r\nimport {withFormsy} from 'formsy-react';\r\nimport _ from '@lodash';\r\nimport clsx from 'clsx';\r\n\r\nfunction FuseChipSelectFormsy(props)\r\n{\r\n    const importedProps = _.pick(props, [\r\n        'children',\r\n        'classes',\r\n        'className',\r\n        'defaultValue',\r\n        'disabled',\r\n        'fullWidth',\r\n        'id',\r\n        'label',\r\n        'name',\r\n        'onBlur',\r\n        'onChange',\r\n        'onFocus',\r\n        'placeholder',\r\n        'required',\r\n        'textFieldProps',\r\n        'variant',\r\n        'isMulti',\r\n        'options',\r\n        'errorMessage'\r\n    ]);\r\n\r\n    // An error message is returned only if the component is invalid\r\n    const errorMessage = props.getErrorMessage();\r\n    const value = props.getValue();\r\n\r\n    function changeValue(value, selectedOptions)\r\n    {\r\n        if ( props.multiple )\r\n        {\r\n            props.setValue(selectedOptions.map(option => option.value));\r\n        }\r\n        else\r\n        {\r\n            props.setValue(value);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <FormControl\r\n            error={Boolean(errorMessage)}\r\n            className={clsx(props.className, props.showRequired() ? 'required' : props.showError() ? 'error' : null)}\r\n            variant={importedProps.variant}>\r\n            {props.label && (\r\n                <InputLabel htmlFor={props.name}>{props.label}</InputLabel>\r\n            )}\r\n            <FuseChipSelect\r\n                {...importedProps}\r\n                value={value}\r\n                onChange={changeValue}\r\n            />\r\n            {Boolean(errorMessage) && (\r\n                <FormHelperText>{errorMessage}</FormHelperText>\r\n            )}\r\n        </FormControl>\r\n    );\r\n}\r\n\r\nexport default React.memo(withFormsy(FuseChipSelectFormsy));\r\n"]},"metadata":{},"sourceType":"module"}