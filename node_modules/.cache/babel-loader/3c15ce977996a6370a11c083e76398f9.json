{"ast":null,"code":"/**\r\n * DevExtreme (ui/scheduler/workspaces/ui.scheduler.work_space.grouped.strategy.horizontal.js)\r\n * Version: 19.1.6 (build 19263-1729)\r\n * Build date: Fri Sep 20 2019\r\n *\r\n * Copyright (c) 2012 - 2019 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar GroupedStrategy = require(\"./ui.scheduler.work_space.grouped.strategy\");\n\nvar HORIZONTAL_GROUPED_ATTR = \"dx-group-row-count\";\nvar HorizontalGroupedStrategy = GroupedStrategy.inherit({\n  prepareCellIndexes: function prepareCellIndexes(cellCoordinates, groupIndex, inAllDay) {\n    var groupByDay = this._workSpace.isGroupedByDate();\n\n    if (!groupByDay) {\n      return {\n        rowIndex: cellCoordinates.rowIndex,\n        cellIndex: cellCoordinates.cellIndex + groupIndex * this._workSpace._getCellCount()\n      };\n    } else {\n      return {\n        rowIndex: cellCoordinates.rowIndex,\n        cellIndex: cellCoordinates.cellIndex * this._workSpace._getGroupCount() + groupIndex\n      };\n    }\n  },\n  calculateCellIndex: function calculateCellIndex(rowIndex, cellIndex) {\n    cellIndex %= this._workSpace._getCellCount();\n    return this._workSpace._getRowCount() * cellIndex + rowIndex;\n  },\n  getGroupIndex: function getGroupIndex(rowIndex, cellIndex) {\n    var groupByDay = this._workSpace.isGroupedByDate(),\n        groupCount = this._workSpace._getGroupCount();\n\n    if (groupByDay) {\n      return cellIndex % groupCount;\n    } else {\n      return Math.floor(cellIndex / this._workSpace._getCellCount());\n    }\n  },\n  calculateHeaderCellRepeatCount: function calculateHeaderCellRepeatCount() {\n    return this._workSpace._getGroupCount() || 1;\n  },\n  insertAllDayRowsIntoDateTable: function insertAllDayRowsIntoDateTable() {\n    return false;\n  },\n  getTotalCellCount: function getTotalCellCount(groupCount) {\n    groupCount = groupCount || 1;\n    return this._workSpace._getCellCount() * groupCount;\n  },\n  getTotalRowCount: function getTotalRowCount() {\n    return this._workSpace._getRowCount();\n  },\n  addAdditionalGroupCellClasses: function addAdditionalGroupCellClasses(cellClass, index) {\n    cellClass = this._addLastGroupCellClass(cellClass, index);\n    return this._addFirstGroupCellClass(cellClass, index);\n  },\n  _addLastGroupCellClass: function _addLastGroupCellClass(cellClass, index) {\n    var groupByDay = this._workSpace.option(\"groupByDate\");\n\n    if (groupByDay) {\n      if (index % this._workSpace._getGroupCount() === 0) {\n        return cellClass + \" \" + this.getLastGroupCellClass();\n      }\n    } else {\n      if (index % this._workSpace._getCellCount() === 0) {\n        return cellClass + \" \" + this.getLastGroupCellClass();\n      }\n    }\n\n    return cellClass;\n  },\n  _addFirstGroupCellClass: function _addFirstGroupCellClass(cellClass, index) {\n    if ((index - 1) % this._workSpace._getCellCount() === 0) {\n      return cellClass + \" \" + this.getFirstGroupCellClass();\n    }\n\n    return cellClass;\n  },\n  getHorizontalMax: function getHorizontalMax(groupIndex) {\n    return this._workSpace.getMaxAllowedPosition()[groupIndex];\n  },\n  getVerticalMax: function getVerticalMax(groupIndex) {\n    return this._workSpace.getMaxAllowedVerticalPosition()[0];\n  },\n  calculateTimeCellRepeatCount: function calculateTimeCellRepeatCount() {\n    return 1;\n  },\n  getWorkSpaceMinWidth: function getWorkSpaceMinWidth() {\n    return this._workSpace.$element().get(0).getBoundingClientRect().width - this._workSpace.getTimePanelWidth();\n  },\n  getAllDayOffset: function getAllDayOffset() {\n    return this._workSpace.getAllDayHeight();\n  },\n  getAllDayTableHeight: function getAllDayTableHeight() {\n    return this._workSpace._$allDayTable.get(0).getBoundingClientRect().height || 0;\n  },\n  getGroupCountAttr: function getGroupCountAttr(groupRowCount, groupRows) {\n    return {\n      attr: HORIZONTAL_GROUPED_ATTR,\n      count: groupRows && groupRows.elements.length\n    };\n  },\n  getLeftOffset: function getLeftOffset() {\n    return this._workSpace.getTimePanelWidth();\n  },\n  getGroupBoundsOffset: function getGroupBoundsOffset(cellCount, $cells, cellWidth, coordinates) {\n    var groupIndex, cellIndex, startCellIndex, startOffset, endOffset;\n\n    if (this._workSpace.isGroupedByDate()) {\n      startCellIndex = 0;\n      startOffset = $cells.eq(startCellIndex).offset().left - cellWidth / 2;\n      endOffset = $cells.eq(cellCount * this._workSpace._getGroupCount() - 1).offset().left + cellWidth + cellWidth / 2;\n    } else {\n      cellIndex = this._workSpace.getCellIndexByCoordinates(coordinates);\n      groupIndex = coordinates.groupIndex || Math.floor(cellIndex / cellCount);\n      startCellIndex = groupIndex * cellCount;\n      startOffset = $cells.eq(startCellIndex).offset().left - cellWidth / 2;\n      endOffset = $cells.eq(startCellIndex + cellCount - 1).offset().left + cellWidth + cellWidth / 2;\n    }\n\n    return {\n      left: startOffset,\n      right: endOffset,\n      top: 0,\n      bottom: 0\n    };\n  },\n  shiftIndicator: function shiftIndicator($indicator, height, rtlOffset, i) {\n    var offset = this._workSpace._getCellCount() * this._workSpace.getRoundedCellWidth(i - 1, 0) * i + this._workSpace.getIndicatorOffset(i) + i,\n        horizontalOffset = rtlOffset ? rtlOffset - offset : offset;\n    $indicator.css(\"left\", horizontalOffset);\n    $indicator.css(\"top\", height);\n  },\n  getShaderOffset: function getShaderOffset(i, width) {\n    var offset = this._workSpace._getCellCount() * this._workSpace.getRoundedCellWidth(i - 1) * i;\n    return this._workSpace.option(\"rtlEnabled\") ? this._workSpace._dateTableScrollable.$content().get(0).getBoundingClientRect().width - offset - this._workSpace.getTimePanelWidth() - width : offset;\n  },\n  getShaderTopOffset: function getShaderTopOffset(i) {\n    return -this.getShaderMaxHeight() * (i > 0 ? 1 : 0);\n  },\n  getShaderHeight: function getShaderHeight() {\n    var height = this._workSpace.getIndicationHeight();\n\n    return height;\n  },\n  getShaderMaxHeight: function getShaderMaxHeight() {\n    return this._workSpace._dateTableScrollable.$content().get(0).getBoundingClientRect().height;\n  },\n  getShaderWidth: function getShaderWidth(i) {\n    return this._workSpace.getIndicationWidth(i);\n  },\n  getScrollableScrollTop: function getScrollableScrollTop(allDay) {\n    return !allDay ? this._workSpace.getScrollable().scrollTop() : 0;\n  }\n});\nmodule.exports = HorizontalGroupedStrategy;","map":null,"metadata":{},"sourceType":"script"}