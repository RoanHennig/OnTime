{"ast":null,"code":"/**\r\n * DevExtreme (ui/validation_engine.js)\r\n * Version: 19.1.6 (build 19263-1729)\r\n * Build date: Fri Sep 20 2019\r\n *\r\n * Copyright (c) 2012 - 2019 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar Class = require(\"../core/class\"),\n    extend = require(\"../core/utils/extend\").extend,\n    inArray = require(\"../core/utils/array\").inArray,\n    each = require(\"../core/utils/iterator\").each,\n    EventsMixin = require(\"../core/events_mixin\"),\n    errors = require(\"../core/errors\"),\n    commonUtils = require(\"../core/utils/common\"),\n    typeUtils = require(\"../core/utils/type\"),\n    numberLocalization = require(\"../localization/number\"),\n    messageLocalization = require(\"../localization/message\");\n\nvar BaseRuleValidator = Class.inherit({\n  NAME: \"base\",\n  defaultMessage: function defaultMessage(value) {\n    return messageLocalization.getFormatter(\"validation-\" + this.NAME)(value);\n  },\n  defaultFormattedMessage: function defaultFormattedMessage(value) {\n    return messageLocalization.getFormatter(\"validation-\" + this.NAME + \"-formatted\")(value);\n  },\n  _isValueEmpty: function _isValueEmpty(value) {\n    return !rulesValidators.required.validate(value, {});\n  },\n  validate: function validate(value, rule) {\n    var valueArray = Array.isArray(value) ? value : [value],\n        result = true;\n\n    if (valueArray.length) {\n      valueArray.every(function (itemValue) {\n        result = this._validate(itemValue, rule);\n        return result;\n      }, this);\n    } else {\n      result = this._validate(null, rule);\n    }\n\n    return result;\n  }\n});\nvar RequiredRuleValidator = BaseRuleValidator.inherit({\n  NAME: \"required\",\n  _validate: function _validate(value, rule) {\n    if (!typeUtils.isDefined(value)) {\n      return false;\n    }\n\n    if (false === value) {\n      return false;\n    }\n\n    value = String(value);\n\n    if (rule.trim || !typeUtils.isDefined(rule.trim)) {\n      value = value.trim();\n    }\n\n    return \"\" !== value;\n  }\n});\nvar NumericRuleValidator = BaseRuleValidator.inherit({\n  NAME: \"numeric\",\n  _validate: function _validate(value, rule) {\n    if (false !== rule.ignoreEmptyValue && this._isValueEmpty(value)) {\n      return true;\n    }\n\n    if (rule.useCultureSettings && typeUtils.isString(value)) {\n      return !isNaN(numberLocalization.parse(value));\n    } else {\n      return typeUtils.isNumeric(value);\n    }\n  }\n});\nvar RangeRuleValidator = BaseRuleValidator.inherit({\n  NAME: \"range\",\n  _validate: function _validate(value, rule) {\n    if (false !== rule.ignoreEmptyValue && this._isValueEmpty(value)) {\n      return true;\n    }\n\n    var validNumber = rulesValidators.numeric.validate(value, rule),\n        validValue = typeUtils.isDefined(value) && \"\" !== value,\n        number = validNumber ? parseFloat(value) : validValue && value.valueOf(),\n        min = rule.min,\n        max = rule.max;\n\n    if (!(validNumber || typeUtils.isDate(value)) && !validValue) {\n      return false;\n    }\n\n    if (typeUtils.isDefined(min)) {\n      if (typeUtils.isDefined(max)) {\n        return number >= min && number <= max;\n      }\n\n      return number >= min;\n    } else {\n      if (typeUtils.isDefined(max)) {\n        return number <= max;\n      } else {\n        throw errors.Error(\"E0101\");\n      }\n    }\n  }\n});\nvar StringLengthRuleValidator = BaseRuleValidator.inherit({\n  NAME: \"stringLength\",\n  _validate: function _validate(value, rule) {\n    value = typeUtils.isDefined(value) ? String(value) : \"\";\n\n    if (rule.trim || !typeUtils.isDefined(rule.trim)) {\n      value = value.trim();\n    }\n\n    if (rule.ignoreEmptyValue && this._isValueEmpty(value)) {\n      return true;\n    }\n\n    return rulesValidators.range.validate(value.length, extend({}, rule));\n  }\n});\nvar CustomRuleValidator = BaseRuleValidator.inherit({\n  NAME: \"custom\",\n  validate: function validate(value, rule) {\n    if (rule.ignoreEmptyValue && this._isValueEmpty(value)) {\n      return true;\n    }\n\n    var validator = rule.validator,\n        dataGetter = validator && typeUtils.isFunction(validator.option) && validator.option(\"dataGetter\"),\n        data = typeUtils.isFunction(dataGetter) && dataGetter(),\n        params = {\n      value: value,\n      validator: validator,\n      rule: rule\n    };\n\n    if (data) {\n      params.data = data;\n    }\n\n    return rule.validationCallback(params);\n  }\n});\nvar CompareRuleValidator = BaseRuleValidator.inherit({\n  NAME: \"compare\",\n  _validate: function _validate(value, rule) {\n    if (!rule.comparisonTarget) {\n      throw errors.Error(\"E0102\");\n    }\n\n    if (rule.ignoreEmptyValue && this._isValueEmpty(value)) {\n      return true;\n    }\n\n    extend(rule, {\n      reevaluate: true\n    });\n    var otherValue = rule.comparisonTarget(),\n        type = rule.comparisonType || \"==\";\n\n    switch (type) {\n      case \"==\":\n        return value == otherValue;\n\n      case \"!=\":\n        return value != otherValue;\n\n      case \"===\":\n        return value === otherValue;\n\n      case \"!==\":\n        return value !== otherValue;\n\n      case \">\":\n        return value > otherValue;\n\n      case \">=\":\n        return value >= otherValue;\n\n      case \"<\":\n        return value < otherValue;\n\n      case \"<=\":\n        return value <= otherValue;\n    }\n  }\n});\nvar PatternRuleValidator = BaseRuleValidator.inherit({\n  NAME: \"pattern\",\n  _validate: function _validate(value, rule) {\n    if (false !== rule.ignoreEmptyValue && this._isValueEmpty(value)) {\n      return true;\n    }\n\n    var pattern = rule.pattern;\n\n    if (typeUtils.isString(pattern)) {\n      pattern = new RegExp(pattern);\n    }\n\n    return pattern.test(value);\n  }\n});\nvar EmailRuleValidator = BaseRuleValidator.inherit({\n  NAME: \"email\",\n  _validate: function _validate(value, rule) {\n    if (false !== rule.ignoreEmptyValue && this._isValueEmpty(value)) {\n      return true;\n    }\n\n    return rulesValidators.pattern.validate(value, extend({}, rule, {\n      pattern: /^[\\d\\w._-]+@([\\d\\w._-]+\\.)+[\\w]+$/i\n    }));\n  }\n});\nvar rulesValidators = {\n  required: new RequiredRuleValidator(),\n  numeric: new NumericRuleValidator(),\n  range: new RangeRuleValidator(),\n  stringLength: new StringLengthRuleValidator(),\n  custom: new CustomRuleValidator(),\n  compare: new CompareRuleValidator(),\n  pattern: new PatternRuleValidator(),\n  email: new EmailRuleValidator()\n};\nvar GroupConfig = Class.inherit({\n  ctor: function ctor(group) {\n    this.group = group;\n    this.validators = [];\n  },\n  validate: function validate() {\n    var result = {\n      isValid: true,\n      brokenRules: [],\n      validators: []\n    };\n    each(this.validators, function (_, validator) {\n      var validatorResult = validator.validate();\n      result.isValid = result.isValid && validatorResult.isValid;\n\n      if (validatorResult.brokenRule) {\n        result.brokenRules.push(validatorResult.brokenRule);\n      }\n\n      result.validators.push(validator);\n    });\n    this.fireEvent(\"validated\", [{\n      validators: result.validators,\n      brokenRules: result.brokenRules,\n      isValid: result.isValid\n    }]);\n    return result;\n  },\n  reset: function reset() {\n    each(this.validators, function (_, validator) {\n      validator.reset();\n    });\n  }\n}).include(EventsMixin);\nvar ValidationEngine = {\n  groups: [],\n  getGroupConfig: function getGroupConfig(group) {\n    var result = commonUtils.grep(this.groups, function (config) {\n      return config.group === group;\n    });\n\n    if (result.length) {\n      return result[0];\n    }\n  },\n  initGroups: function initGroups() {\n    this.groups = [];\n    this.addGroup();\n  },\n  addGroup: function addGroup(group) {\n    var config = this.getGroupConfig(group);\n\n    if (!config) {\n      config = new GroupConfig(group);\n      this.groups.push(config);\n    }\n\n    return config;\n  },\n  removeGroup: function removeGroup(group) {\n    var config = this.getGroupConfig(group),\n        index = inArray(config, this.groups);\n\n    if (index > -1) {\n      this.groups.splice(index, 1);\n    }\n\n    return config;\n  },\n  _setDefaultMessage: function _setDefaultMessage(rule, validator, name) {\n    if (!typeUtils.isDefined(rule.message)) {\n      if (validator.defaultFormattedMessage && typeUtils.isDefined(name)) {\n        rule.message = validator.defaultFormattedMessage(name);\n      } else {\n        rule.message = validator.defaultMessage();\n      }\n    }\n  },\n  validate: function validate(value, rules, name) {\n    var result = {\n      name: name,\n      value: value,\n      brokenRule: null,\n      isValid: true,\n      validationRules: rules\n    },\n        that = this;\n    each(rules || [], function (_, rule) {\n      var ruleValidationResult,\n          ruleValidator = rulesValidators[rule.type];\n\n      if (ruleValidator) {\n        if (typeUtils.isDefined(rule.isValid) && rule.value === value && !rule.reevaluate) {\n          if (!rule.isValid) {\n            result.isValid = false;\n            result.brokenRule = rule;\n            return false;\n          }\n\n          return true;\n        }\n\n        rule.value = value;\n        ruleValidationResult = ruleValidator.validate(value, rule);\n        rule.isValid = ruleValidationResult;\n\n        if (!ruleValidationResult) {\n          result.isValid = false;\n\n          that._setDefaultMessage(rule, ruleValidator, name);\n\n          result.brokenRule = rule;\n        }\n\n        if (!rule.isValid) {\n          return false;\n        }\n      } else {\n        throw errors.Error(\"E0100\");\n      }\n    });\n    return result;\n  },\n  registerValidatorInGroup: function registerValidatorInGroup(group, validator) {\n    var groupConfig = ValidationEngine.addGroup(group);\n\n    if (inArray(validator, groupConfig.validators) < 0) {\n      groupConfig.validators.push(validator);\n    }\n  },\n  _shouldRemoveGroup: function _shouldRemoveGroup(group, validatorsInGroup) {\n    var isDefaultGroup = void 0 === group,\n        isValidationGroupInstance = group && \"dxValidationGroup\" === group.NAME;\n    return !isDefaultGroup && !isValidationGroupInstance && !validatorsInGroup.length;\n  },\n  removeRegisteredValidator: function removeRegisteredValidator(group, validator) {\n    var config = ValidationEngine.getGroupConfig(group),\n        validatorsInGroup = config && config.validators;\n    var index = inArray(validator, validatorsInGroup);\n\n    if (index > -1) {\n      validatorsInGroup.splice(index, 1);\n\n      if (this._shouldRemoveGroup(group, validatorsInGroup)) {\n        this.removeGroup(group);\n      }\n    }\n  },\n  validateGroup: function validateGroup(group) {\n    var groupConfig = ValidationEngine.getGroupConfig(group);\n\n    if (!groupConfig) {\n      throw errors.Error(\"E0110\");\n    }\n\n    return groupConfig.validate();\n  },\n  resetGroup: function resetGroup(group) {\n    var groupConfig = ValidationEngine.getGroupConfig(group);\n\n    if (!groupConfig) {\n      throw errors.Error(\"E0110\");\n    }\n\n    return groupConfig.reset();\n  }\n};\nValidationEngine.initGroups();\nmodule.exports = ValidationEngine;\nmodule.exports.default = module.exports;","map":null,"metadata":{},"sourceType":"script"}