{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\Roan\\\\Documents\\\\GitHub\\\\OnTimeReactFrontEnd\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\Roan\\\\Documents\\\\GitHub\\\\OnTimeReactFrontEnd\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\Roan\\\\Documents\\\\GitHub\\\\OnTimeReactFrontEnd\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\Roan\\\\Documents\\\\GitHub\\\\OnTimeReactFrontEnd\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\Roan\\\\Documents\\\\GitHub\\\\OnTimeReactFrontEnd\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport axios from 'axios';\nimport jwtDecode from 'jwt-decode';\nimport FuseUtils from '@fuse/FuseUtils';\n\nvar jwtService =\n/*#__PURE__*/\nfunction (_FuseUtils$EventEmitt) {\n  _inherits(jwtService, _FuseUtils$EventEmitt);\n\n  function jwtService() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, jwtService);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(jwtService)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.setInterceptors = function () {\n      axios.interceptors.response.use(function (response) {\n        return response;\n      }, function (err) {\n        return new Promise(function (resolve, reject) {\n          if (err.response.status === 401 && err.config && !err.config.__isRetryRequest) {\n            // if you ever get an unauthorized response, logout the user\n            _this.emit('onAutoLogout', 'Invalid access_token');\n\n            _this.setSession(null);\n          }\n\n          throw err;\n        });\n      });\n    };\n\n    _this.handleAuthentication = function () {\n      var access_token = _this.getAccessToken();\n\n      if (!access_token) {\n        _this.emit('onNoAccessToken');\n\n        return;\n      }\n\n      if (_this.isAuthTokenValid(access_token)) {\n        _this.setSession(access_token);\n\n        _this.emit('onAutoLogin', true);\n      } else {\n        _this.setSession(null);\n\n        _this.emit('onAutoLogout', 'access_token expired');\n      }\n    };\n\n    _this.createUser = function (data) {\n      return new Promise(function (resolve, reject) {\n        axios.post('/api/auth/register', data).then(function (response) {\n          if (response.data.user) {\n            _this.setSession(response.data.access_token);\n\n            resolve(response.data.user);\n          } else {\n            reject(response.data.error);\n          }\n        });\n      });\n    };\n\n    _this.signInWithEmailAndPassword = function (email, password) {\n      return new Promise(function (resolve, reject) {\n        axios.get('/api/auth', {\n          data: {\n            email: email,\n            password: password\n          }\n        }).then(function (response) {\n          if (response.data.user) {\n            _this.setSession(response.data.access_token);\n\n            resolve(response.data.user);\n          } else {\n            reject(response.data.error);\n          }\n        });\n      });\n    };\n\n    _this.signInWithToken = function () {\n      return new Promise(function (resolve, reject) {\n        axios.get('/api/auth/access-token', {\n          data: {\n            access_token: _this.getAccessToken()\n          }\n        }).then(function (response) {\n          if (response.data.user) {\n            _this.setSession(response.data.access_token);\n\n            resolve(response.data.user);\n          } else {\n            _this.logout();\n\n            reject('Failed to login with token.');\n          }\n        }).catch(function (error) {\n          _this.logout();\n\n          reject('Failed to login with token.');\n        });\n      });\n    };\n\n    _this.updateUserData = function (user) {\n      return axios.post('/api/auth/user/update', {\n        user: user\n      });\n    };\n\n    _this.setSession = function (access_token) {\n      if (access_token) {\n        localStorage.setItem('jwt_access_token', access_token);\n        axios.defaults.headers.common['Authorization'] = 'Bearer ' + access_token;\n      } else {\n        localStorage.removeItem('jwt_access_token');\n        delete axios.defaults.headers.common['Authorization'];\n      }\n    };\n\n    _this.logout = function () {\n      _this.setSession(null);\n    };\n\n    _this.isAuthTokenValid = function (access_token) {\n      if (!access_token) {\n        return false;\n      }\n\n      var decoded = jwtDecode(access_token);\n      var currentTime = Date.now() / 1000;\n\n      if (decoded.exp < currentTime) {\n        console.warn('access token expired');\n        return false;\n      } else {\n        return true;\n      }\n    };\n\n    _this.getAccessToken = function () {\n      return window.localStorage.getItem('jwt_access_token');\n    };\n\n    return _this;\n  }\n\n  _createClass(jwtService, [{\n    key: \"init\",\n    value: function init() {\n      this.setInterceptors();\n      this.handleAuthentication();\n    }\n  }]);\n\n  return jwtService;\n}(FuseUtils.EventEmitter);\n\nvar instance = new jwtService();\nexport default instance;","map":{"version":3,"sources":["C:\\Users\\Roan\\Documents\\GitHub\\OnTimeReactFrontEnd\\src\\app\\services\\jwtService\\jwtService.js"],"names":["axios","jwtDecode","FuseUtils","jwtService","setInterceptors","interceptors","response","use","err","Promise","resolve","reject","status","config","__isRetryRequest","emit","setSession","handleAuthentication","access_token","getAccessToken","isAuthTokenValid","createUser","data","post","then","user","error","signInWithEmailAndPassword","email","password","get","signInWithToken","logout","catch","updateUserData","localStorage","setItem","defaults","headers","common","removeItem","decoded","currentTime","Date","now","exp","console","warn","window","getItem","EventEmitter","instance"],"mappings":"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","sourcesContent":["import axios from 'axios';\r\nimport jwtDecode from 'jwt-decode';\r\nimport FuseUtils from '@fuse/FuseUtils';\r\n\r\nclass jwtService extends FuseUtils.EventEmitter {\r\n\r\n    init()\r\n    {\r\n        this.setInterceptors();\r\n        this.handleAuthentication();\r\n    }\r\n\r\n    setInterceptors = () => {\r\n        axios.interceptors.response.use(response => {\r\n            return response;\r\n        }, err => {\r\n            return new Promise((resolve, reject) => {\r\n                if ( err.response.status === 401 && err.config && !err.config.__isRetryRequest )\r\n                {\r\n                    // if you ever get an unauthorized response, logout the user\r\n                    this.emit('onAutoLogout', 'Invalid access_token');\r\n                    this.setSession(null);\r\n                }\r\n                throw err;\r\n            });\r\n        });\r\n    };\r\n\r\n    handleAuthentication = () => {\r\n\r\n        let access_token = this.getAccessToken();\r\n\r\n        if ( !access_token )\r\n        {\r\n            this.emit('onNoAccessToken');\r\n\r\n            return;\r\n        }\r\n\r\n        if ( this.isAuthTokenValid(access_token) )\r\n        {\r\n            this.setSession(access_token);\r\n            this.emit('onAutoLogin', true);\r\n        }\r\n        else\r\n        {\r\n            this.setSession(null);\r\n            this.emit('onAutoLogout', 'access_token expired');\r\n        }\r\n    };\r\n\r\n    createUser = (data) => {\r\n        return new Promise((resolve, reject) => {\r\n            axios.post('/api/auth/register', data)\r\n                .then(response => {\r\n                    if ( response.data.user )\r\n                    {\r\n                        this.setSession(response.data.access_token);\r\n                        resolve(response.data.user);\r\n                    }\r\n                    else\r\n                    {\r\n                        reject(response.data.error);\r\n                    }\r\n                });\r\n        });\r\n    };\r\n\r\n    signInWithEmailAndPassword = (email, password) => {\r\n        return new Promise((resolve, reject) => {\r\n            axios.get('/api/auth', {\r\n                data: {\r\n                    email,\r\n                    password\r\n                }\r\n            }).then(response => {\r\n                if ( response.data.user )\r\n                {\r\n                    this.setSession(response.data.access_token);\r\n                    resolve(response.data.user);\r\n                }\r\n                else\r\n                {\r\n                    reject(response.data.error);\r\n                }\r\n            });\r\n        });\r\n    };\r\n\r\n    signInWithToken = () => {\r\n        return new Promise((resolve, reject) => {\r\n            axios.get('/api/auth/access-token', {\r\n                data: {\r\n                    access_token: this.getAccessToken()\r\n                }\r\n            })\r\n                .then(response => {\r\n                    if ( response.data.user )\r\n                    {\r\n                        this.setSession(response.data.access_token);\r\n                        resolve(response.data.user);\r\n                    }\r\n                    else\r\n                    {\r\n                        this.logout();\r\n                        reject('Failed to login with token.');\r\n                    }\r\n                })\r\n                .catch(error => {\r\n                    this.logout();\r\n                    reject('Failed to login with token.');\r\n                });\r\n        });\r\n    };\r\n\r\n    updateUserData = (user) => {\r\n        return axios.post('/api/auth/user/update', {\r\n            user: user\r\n        });\r\n    };\r\n\r\n    setSession = access_token => {\r\n        if ( access_token )\r\n        {\r\n            localStorage.setItem('jwt_access_token', access_token);\r\n            axios.defaults.headers.common['Authorization'] = 'Bearer ' + access_token;\r\n        }\r\n        else\r\n        {\r\n            localStorage.removeItem('jwt_access_token');\r\n            delete axios.defaults.headers.common['Authorization'];\r\n        }\r\n    };\r\n\r\n    logout = () => {\r\n        this.setSession(null);\r\n    };\r\n\r\n    isAuthTokenValid = access_token => {\r\n        if ( !access_token )\r\n        {\r\n            return false;\r\n        }\r\n        const decoded = jwtDecode(access_token);\r\n        const currentTime = Date.now() / 1000;\r\n        if ( decoded.exp < currentTime )\r\n        {\r\n            console.warn('access token expired');\r\n            return false;\r\n        }\r\n        else\r\n        {\r\n            return true;\r\n        }\r\n    };\r\n\r\n    getAccessToken = () => {\r\n        return window.localStorage.getItem('jwt_access_token');\r\n    };\r\n}\r\n\r\nconst instance = new jwtService();\r\n\r\nexport default instance;\r\n"]},"metadata":{},"sourceType":"module"}