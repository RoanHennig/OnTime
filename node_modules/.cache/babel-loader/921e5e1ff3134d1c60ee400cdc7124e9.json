{"ast":null,"code":"/**\r\n * DevExtreme (ui/scheduler/ui.scheduler.table_creator.js)\r\n * Version: 19.1.6 (build 19263-1729)\r\n * Build date: Fri Sep 20 2019\r\n *\r\n * Copyright (c) 2012 - 2019 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar $ = require(\"../../core/renderer\"),\n    domAdapter = require(\"../../core/dom_adapter\"),\n    dataUtils = require(\"../../core/element_data\"),\n    typeUtils = require(\"../../core/utils/type\"),\n    getPublicElement = require(\"../../core/utils/dom\").getPublicElement;\n\nvar ROW_SELECTOR = \"tr\";\nvar SchedulerTableCreator = {\n  VERTICAL: \"vertical\",\n  HORIZONTAL: \"horizontal\",\n  insertAllDayRow: function insertAllDayRow(allDayElements, tableBody, index) {\n    if (allDayElements[index]) {\n      var row = allDayElements[index].find(ROW_SELECTOR);\n\n      if (!row.length) {\n        row = $(domAdapter.createElement(ROW_SELECTOR));\n        row.append(allDayElements[index].get(0));\n      }\n\n      tableBody.appendChild(row.get ? row.get(0) : row);\n    }\n  },\n  makeTable: function makeTable(options) {\n    var row,\n        tableBody = domAdapter.createElement(\"tbody\"),\n        templateCallbacks = [],\n        rowCountInGroup = options.groupCount ? options.rowCount / options.groupCount : options.rowCount,\n        allDayElementIndex = 0,\n        allDayElements = options.allDayElements,\n        groupIndex = options.groupIndex,\n        rowCount = options.rowCount;\n    $(options.container).append(tableBody);\n\n    if (allDayElements) {\n      this.insertAllDayRow(allDayElements, tableBody, 0);\n      allDayElementIndex++;\n    }\n\n    for (var i = 0; i < rowCount; i++) {\n      row = domAdapter.createElement(ROW_SELECTOR);\n      tableBody.appendChild(row);\n      var isLastRowInGroup = (i + 1) % rowCountInGroup === 0;\n\n      if (options.rowClass) {\n        row.className = options.rowClass;\n      }\n\n      for (var j = 0; j < options.cellCount; j++) {\n        var td = domAdapter.createElement(\"td\");\n        row.appendChild(td);\n\n        if (options.cellClass) {\n          if (typeUtils.isFunction(options.cellClass)) {\n            td.className = options.cellClass(i, j);\n          } else {\n            td.className = options.cellClass;\n          }\n        }\n\n        var cellDataObject, dataKey, dataValue;\n\n        if (options.getCellData) {\n          cellDataObject = options.getCellData(td, i, j, groupIndex);\n          dataKey = cellDataObject.key;\n          dataValue = cellDataObject.value;\n          dataKey && dataUtils.data(td, dataKey, dataValue);\n        }\n\n        if (options.cellTemplate && options.cellTemplate.render) {\n          var templateOptions = {\n            model: {\n              text: options.getCellText ? options.getCellText(i, j) : \"\",\n              date: options.getCellDate ? options.getCellDate(i) : void 0\n            },\n            container: getPublicElement($(td)),\n            index: i * options.cellCount + j\n          };\n\n          if (dataValue) {\n            if (dataValue.startDate) {\n              templateOptions.model.startDate = dataValue.startDate;\n            }\n\n            if (dataValue.endDate) {\n              templateOptions.model.endDate = dataValue.endDate;\n            }\n\n            if (dataValue.groups) {\n              templateOptions.model.groups = dataValue.groups;\n            }\n\n            if (dataValue.allDay) {\n              templateOptions.model.allDay = dataValue.allDay;\n            }\n          }\n\n          templateCallbacks.push(options.cellTemplate.render.bind(options.cellTemplate, templateOptions));\n        } else {\n          if (options.getCellText) {\n            td.innerHTML = \"<div>\" + options.getCellText(i, j) + \"</div>\";\n          }\n        }\n      }\n\n      if (allDayElements && isLastRowInGroup) {\n        this.insertAllDayRow(allDayElements, tableBody, allDayElementIndex);\n        allDayElementIndex++;\n      }\n    }\n\n    return templateCallbacks;\n  },\n  makeGroupedTable: function makeGroupedTable(type, groups, cssClasses, cellCount, cellTemplate, rowCount, groupByDate) {\n    var rows = [];\n\n    if (type === this.VERTICAL) {\n      rows = this._makeVerticalGroupedRows(groups, cssClasses, cellTemplate, rowCount);\n    } else {\n      rows = this._makeHorizontalGroupedRows(groups, cssClasses, cellCount, cellTemplate, groupByDate);\n    }\n\n    return rows;\n  },\n  makeGroupedTableFromJSON: function makeGroupedTableFromJSON(type, data, config) {\n    var table,\n        cellStorage = [],\n        rowIndex = 0;\n    config = config || {};\n    var cellTag = config.cellTag || \"td\",\n        childrenField = config.childrenField || \"children\",\n        titleField = config.titleField || \"title\",\n        groupTableClass = config.groupTableClass,\n        groupRowClass = config.groupRowClass,\n        groupCellClass = config.groupCellClass,\n        groupCellCustomContent = config.groupCellCustomContent;\n\n    function createTable() {\n      table = domAdapter.createElement(\"table\");\n\n      if (groupTableClass) {\n        table.className = groupTableClass;\n      }\n    }\n\n    function getChildCount(item) {\n      if (item[childrenField]) {\n        return item[childrenField].length;\n      }\n\n      return 0;\n    }\n\n    function createCell(text, childCount, index, data) {\n      var cell = {\n        element: domAdapter.createElement(cellTag),\n        childCount: childCount\n      };\n\n      if (groupCellClass) {\n        cell.element.className = groupCellClass;\n      }\n\n      var cellText = domAdapter.createTextNode(text);\n\n      if (\"function\" === typeof groupCellCustomContent) {\n        groupCellCustomContent(cell.element, cellText, index, data);\n      } else {\n        cell.element.appendChild(cellText);\n      }\n\n      return cell;\n    }\n\n    function generateCells(data) {\n      for (var i = 0; i < data.length; i++) {\n        var childCount = getChildCount(data[i]),\n            cell = createCell(data[i][titleField], childCount, i, data[i]);\n\n        if (!cellStorage[rowIndex]) {\n          cellStorage[rowIndex] = [];\n        }\n\n        cellStorage[rowIndex].push(cell);\n\n        if (childCount) {\n          generateCells(data[i][childrenField]);\n        } else {\n          rowIndex++;\n        }\n      }\n    }\n\n    function putCellsToRows() {\n      cellStorage.forEach(function (cells) {\n        var row = domAdapter.createElement(ROW_SELECTOR);\n\n        if (groupRowClass) {\n          row.className = groupRowClass;\n        }\n\n        var rowspans = [];\n\n        for (var i = cells.length - 1; i >= 0; i--) {\n          var prev = cells[i + 1],\n              rowspan = cells[i].childCount;\n\n          if (prev && prev.childCount) {\n            rowspan *= prev.childCount;\n          }\n\n          rowspans.push(rowspan);\n        }\n\n        rowspans.reverse();\n        cells.forEach(function (cell, index) {\n          if (rowspans[index]) {\n            cell.element.setAttribute(\"rowSpan\", rowspans[index]);\n          }\n\n          row.appendChild(cell.element);\n        });\n        table.appendChild(row);\n      });\n    }\n\n    createTable();\n    generateCells(data);\n    putCellsToRows();\n    return table;\n  },\n  _makeVerticalGroupedRows: function _makeVerticalGroupedRows(groups, cssClasses, cellTemplate, rowCount) {\n    var i,\n        cellTemplates = [],\n        repeatCount = 1,\n        arr = [];\n\n    var cellIterator = function cellIterator(cell) {\n      if (cell.template) {\n        cellTemplates.push(cell.template);\n      }\n    };\n\n    for (i = 0; i < groups.length; i++) {\n      if (i > 0) {\n        repeatCount = groups[i - 1].items.length * repeatCount;\n      }\n\n      var cells = this._makeGroupedRowCells(groups[i], repeatCount, cssClasses, cellTemplate);\n\n      cells.forEach(cellIterator);\n      arr.push(cells);\n    }\n\n    var rows = [],\n        groupCount = arr.length,\n        maxCellCount = arr[groupCount - 1].length;\n\n    for (i = 0; i < maxCellCount; i++) {\n      rows.push($(\"<tr>\").addClass(cssClasses.groupHeaderRowClass));\n    }\n\n    for (i = groupCount - 1; i >= 0; i--) {\n      var currentColumnLength = arr[i].length,\n          rowspan = maxCellCount / currentColumnLength;\n\n      for (var j = 0; j < currentColumnLength; j++) {\n        var currentRowIndex = j * rowspan,\n            row = rows[currentRowIndex];\n        row.prepend(arr[i][j].element.attr(\"rowSpan\", rowspan));\n      }\n    }\n\n    return {\n      elements: rows,\n      cellTemplates: cellTemplates\n    };\n  },\n  _makeHorizontalGroupedRows: function _makeHorizontalGroupedRows(groups, cssClasses, cellCount, cellTemplate, groupByDate) {\n    var repeatCount = 1,\n        groupCount = groups.length,\n        rows = [],\n        cellTemplates = [],\n        repeatByDate = groupByDate ? cellCount : 1;\n\n    var cellIterator = function cellIterator(cell) {\n      if (cell.template) {\n        cellTemplates.push(cell.template);\n      }\n\n      return cell.element;\n    };\n\n    for (var i = 0; i < groupCount; i++) {\n      if (i > 0) {\n        repeatCount = groups[i - 1].items.length * repeatCount;\n      }\n\n      var cells = this._makeGroupedRowCells(groups[i], repeatCount, cssClasses, cellTemplate, repeatByDate);\n\n      rows.push($(\"<tr>\").addClass(cssClasses.groupRowClass).append(cells.map(cellIterator)));\n    }\n\n    var maxCellCount = rows[groupCount - 1].find(\"th\").length;\n\n    for (var j = 0; j < groupCount; j++) {\n      var $cell = rows[j].find(\"th\"),\n          colspan = maxCellCount / $cell.length;\n\n      if (!groupByDate) {\n        colspan *= cellCount;\n      }\n\n      if (colspan > 1 && 1 === repeatByDate || groupByDate && groupCount > 1) {\n        $cell.attr(\"colSpan\", colspan);\n      }\n    }\n\n    return {\n      elements: rows,\n      cellTemplates: cellTemplates\n    };\n  },\n  _makeGroupedRowCells: function _makeGroupedRowCells(group, repeatCount, cssClasses, cellTemplate, repeatByDate) {\n    repeatByDate = repeatByDate || 1;\n    repeatCount *= repeatByDate;\n    var cells = [],\n        items = group.items,\n        itemCount = items.length;\n\n    for (var i = 0; i < repeatCount; i++) {\n      for (var j = 0; j < itemCount; j++) {\n        var $container = $(\"<div>\"),\n            cell = {};\n\n        if (cellTemplate && cellTemplate.render) {\n          var templateOptions = {\n            model: items[j],\n            container: getPublicElement($container),\n            index: i * itemCount + j\n          };\n\n          if (group.data) {\n            templateOptions.model.data = group.data[j];\n          }\n\n          cell.template = cellTemplate.render.bind(cellTemplate, templateOptions);\n        } else {\n          $container.text(items[j].text);\n          $container = $(\"<div>\").append($container);\n        }\n\n        $container.addClass(cssClasses.groupHeaderContentClass);\n        var cssClass;\n\n        if (typeUtils.isFunction(cssClasses.groupHeaderClass)) {\n          cssClass = cssClasses.groupHeaderClass(j);\n        } else {\n          cssClass = cssClasses.groupHeaderClass;\n        }\n\n        cell.element = $(\"<th>\").addClass(cssClass).append($container);\n        cells.push(cell);\n      }\n    }\n\n    return cells;\n  }\n};\nmodule.exports = SchedulerTableCreator;","map":null,"metadata":{},"sourceType":"script"}