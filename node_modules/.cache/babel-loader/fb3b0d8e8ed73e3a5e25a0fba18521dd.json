{"ast":null,"code":"/**\r\n * DevExtreme (ui/scheduler/workspaces/ui.scheduler.work_space_week.js)\r\n * Version: 19.1.6 (build 19263-1729)\r\n * Build date: Fri Sep 20 2019\r\n *\r\n * Copyright (c) 2012 - 2019 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar $ = require(\"../../../core/renderer\"),\n    registerComponent = require(\"../../../core/component_registrator\"),\n    dateUtils = require(\"../../../core/utils/date\"),\n    dateLocalization = require(\"../../../localization/date\"),\n    each = require(\"../../../core/utils/iterator\").each,\n    SchedulerWorkSpace = require(\"./ui.scheduler.work_space.indicator\");\n\nvar WEEK_CLASS = \"dx-scheduler-work-space-week\";\nvar toMs = dateUtils.dateToMilliseconds;\nvar SchedulerWorkSpaceWeek = SchedulerWorkSpace.inherit({\n  _getElementClass: function _getElementClass() {\n    return WEEK_CLASS;\n  },\n  _getRowCount: function _getRowCount() {\n    return this._getCellCountInDay();\n  },\n  _getCellCount: function _getCellCount() {\n    return 7 * this.option(\"intervalCount\");\n  },\n  _getDateByIndex: function _getDateByIndex(headerIndex) {\n    var resultDate = new Date(this._firstViewDate);\n    resultDate.setDate(this._firstViewDate.getDate() + headerIndex);\n    return resultDate;\n  },\n  _getFormat: function _getFormat() {\n    return this._formatWeekdayAndDay;\n  },\n  _getStartViewDate: function _getStartViewDate() {\n    return dateUtils.getFirstWeekDate(this.option(\"startDate\"), this._firstDayOfWeek() || dateLocalization.firstDayOfWeekIndex());\n  },\n  _getIntervalDuration: function _getIntervalDuration() {\n    return 7 * toMs(\"day\") * this.option(\"intervalCount\");\n  },\n  _getCellsBetween: function _getCellsBetween($first, $last) {\n    if (this._hasAllDayClass($last)) {\n      return this.callBase($first, $last);\n    }\n\n    var $cells = this._getCells(),\n        firstColumn = $first.index(),\n        firstRow = $first.parent().index(),\n        lastColumn = $last.index(),\n        lastRow = $last.parent().index(),\n        groupCount = this._getGroupCount(),\n        cellCount = groupCount > 0 ? this._getTotalCellCount(groupCount) : this._getCellCount(),\n        rowCount = this._getTotalRowCount(groupCount),\n        result = [];\n\n    for (var i = 0; i < cellCount; i++) {\n      for (var j = 0; j < rowCount; j++) {\n        var cell = $cells.get(cellCount * j + i);\n        result.push(cell);\n      }\n    }\n\n    var lastCellGroup = this.getCellData($last).groups,\n        indexesDifference = this.option(\"showAllDayPanel\") && this._isVerticalGroupedWorkSpace() ? this._getGroupIndexByResourceId(lastCellGroup) + 1 : 0;\n    var newFirstIndex = rowCount * firstColumn + firstRow - indexesDifference,\n        newLastIndex = rowCount * lastColumn + lastRow - indexesDifference;\n\n    if (newFirstIndex > newLastIndex) {\n      var buffer = newFirstIndex;\n      newFirstIndex = newLastIndex;\n      newLastIndex = buffer;\n    }\n\n    $cells = $(result).slice(newFirstIndex, newLastIndex + 1);\n\n    if (this._getGroupCount()) {\n      var arr = [],\n          focusedGroupIndex = this._getGroupIndexByCell($first);\n\n      each($cells, function (_, cell) {\n        var groupIndex = this._getGroupIndexByCell($(cell));\n\n        if (focusedGroupIndex === groupIndex) {\n          arr.push(cell);\n        }\n      }.bind(this));\n      $cells = $(arr);\n    }\n\n    return $cells;\n  },\n  _getRightCell: function _getRightCell(isMultiSelection) {\n    if (!isMultiSelection) {\n      return this.callBase(isMultiSelection);\n    }\n\n    var $rightCell,\n        $focusedCell = this._$focusedCell,\n        groupCount = this._getGroupCount(),\n        rowCellCount = isMultiSelection ? this._getCellCount() : this._getTotalCellCount(groupCount),\n        edgeCellIndex = this._isRTL() ? 0 : rowCellCount - 1,\n        direction = this._isRTL() ? \"prev\" : \"next\";\n\n    if ($focusedCell.index() === edgeCellIndex || this._isGroupEndCell($focusedCell)) {\n      $rightCell = $focusedCell;\n    } else {\n      $rightCell = $focusedCell[direction]();\n      $rightCell = this._checkForViewBounds($rightCell);\n    }\n\n    return $rightCell;\n  },\n  _getLeftCell: function _getLeftCell(isMultiSelection) {\n    if (!isMultiSelection) {\n      return this.callBase(isMultiSelection);\n    }\n\n    var $leftCell,\n        $focusedCell = this._$focusedCell,\n        groupCount = this._getGroupCount(),\n        rowCellCount = isMultiSelection ? this._getCellCount() : this._getTotalCellCount(groupCount),\n        edgeCellIndex = this._isRTL() ? rowCellCount - 1 : 0,\n        direction = this._isRTL() ? \"next\" : \"prev\";\n\n    if ($focusedCell.index() === edgeCellIndex || this._isGroupStartCell($focusedCell)) {\n      $leftCell = $focusedCell;\n    } else {\n      $leftCell = $focusedCell[direction]();\n      $leftCell = this._checkForViewBounds($leftCell);\n    }\n\n    return $leftCell;\n  }\n});\nregisterComponent(\"dxSchedulerWorkSpaceWeek\", SchedulerWorkSpaceWeek);\nmodule.exports = SchedulerWorkSpaceWeek;","map":null,"metadata":{},"sourceType":"script"}