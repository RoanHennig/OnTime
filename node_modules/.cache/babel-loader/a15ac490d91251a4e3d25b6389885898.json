{"ast":null,"code":"/**\r\n * DevExtreme (ui/text_box/ui.text_editor.base.js)\r\n * Version: 19.1.6 (build 19263-1729)\r\n * Build date: Fri Sep 20 2019\r\n *\r\n * Copyright (c) 2012 - 2019 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar $ = require(\"../../core/renderer\"),\n    domAdapter = require(\"../../core/dom_adapter\"),\n    eventsEngine = require(\"../../events/core/events_engine\"),\n    domUtils = require(\"../../core/utils/dom\"),\n    focused = require(\"../widget/selectors\").focused,\n    isDefined = require(\"../../core/utils/type\").isDefined,\n    extend = require(\"../../core/utils/extend\").extend,\n    inArray = require(\"../../core/utils/array\").inArray,\n    each = require(\"../../core/utils/iterator\").each,\n    themes = require(\"../themes\"),\n    Editor = require(\"../editor/editor\"),\n    eventUtils = require(\"../../events/utils\"),\n    pointerEvents = require(\"../../events/pointer\"),\n    ClearButton = require(\"./ui.text_editor.clear\").default,\n    TextEditorButtonCollection = require(\"./texteditor_button_collection/index\").default,\n    config = require(\"../../core/config\"),\n    errors = require(\"../widget/ui.errors\"),\n    Deferred = require(\"../../core/utils/deferred\").Deferred;\n\nvar TEXTEDITOR_CLASS = \"dx-texteditor\",\n    TEXTEDITOR_INPUT_CONTAINER_CLASS = \"dx-texteditor-input-container\",\n    TEXTEDITOR_INPUT_CLASS = \"dx-texteditor-input\",\n    TEXTEDITOR_INPUT_SELECTOR = \".\" + TEXTEDITOR_INPUT_CLASS,\n    TEXTEDITOR_CONTAINER_CLASS = \"dx-texteditor-container\",\n    TEXTEDITOR_BUTTONS_CONTAINER_CLASS = \"dx-texteditor-buttons-container\",\n    TEXTEDITOR_PLACEHOLDER_CLASS = \"dx-placeholder\",\n    TEXTEDITOR_EMPTY_INPUT_CLASS = \"dx-texteditor-empty\",\n    TEXTEDITOR_STYLING_MODE_PREFIX = \"dx-editor-\",\n    ALLOWED_STYLE_CLASSES = [TEXTEDITOR_STYLING_MODE_PREFIX + \"outlined\", TEXTEDITOR_STYLING_MODE_PREFIX + \"filled\", TEXTEDITOR_STYLING_MODE_PREFIX + \"underlined\"],\n    STATE_INVISIBLE_CLASS = \"dx-state-invisible\";\nvar EVENTS_LIST = [\"KeyDown\", \"KeyPress\", \"KeyUp\", \"Change\", \"Cut\", \"Copy\", \"Paste\", \"Input\"];\nvar CONTROL_KEYS = [\"tab\", \"enter\", \"shift\", \"control\", \"alt\", \"escape\", \"pageUp\", \"pageDown\", \"end\", \"home\", \"leftArrow\", \"upArrow\", \"rightArrow\", \"downArrow\"];\n\nfunction checkButtonsOptionType(buttons) {\n  if (isDefined(buttons) && !Array.isArray(buttons)) {\n    throw errors.Error(\"E1053\");\n  }\n}\n\nvar TextEditorBase = Editor.inherit({\n  ctor: function ctor(_, options) {\n    if (options) {\n      checkButtonsOptionType(options.buttons);\n    }\n\n    this._buttonCollection = new TextEditorButtonCollection(this, this._getDefaultButtons());\n    this._$beforeButtonsContainer = null;\n    this._$afterButtonsContainer = null;\n    this.callBase.apply(this, arguments);\n  },\n  _getDefaultOptions: function _getDefaultOptions() {\n    return extend(this.callBase(), {\n      buttons: void 0,\n      value: \"\",\n      spellcheck: false,\n      showClearButton: false,\n      valueChangeEvent: \"change\",\n      placeholder: \"\",\n      inputAttr: {},\n      onFocusIn: null,\n      onFocusOut: null,\n      onKeyDown: null,\n      onKeyPress: null,\n      onKeyUp: null,\n      onChange: null,\n      onInput: null,\n      onCut: null,\n      onCopy: null,\n      onPaste: null,\n      onEnterKey: null,\n      mode: \"text\",\n      hoverStateEnabled: true,\n      focusStateEnabled: true,\n      text: void 0,\n      valueFormat: function valueFormat(value) {\n        return isDefined(value) && false !== value ? value : \"\";\n      },\n      stylingMode: config().editorStylingMode || \"outlined\"\n    });\n  },\n  _defaultOptionsRules: function _defaultOptionsRules() {\n    var themeName = themes.current();\n    return this.callBase().concat([{\n      device: function device() {\n        return themes.isMaterial(themeName);\n      },\n      options: {\n        stylingMode: config().editorStylingMode || \"underlined\"\n      }\n    }]);\n  },\n  _getDefaultButtons: function _getDefaultButtons() {\n    return [{\n      name: \"clear\",\n      Ctor: ClearButton\n    }];\n  },\n  _isClearButtonVisible: function _isClearButtonVisible() {\n    return this.option(\"showClearButton\") && !this.option(\"readOnly\");\n  },\n  _input: function _input() {\n    return this.$element().find(TEXTEDITOR_INPUT_SELECTOR).first();\n  },\n  _isFocused: function _isFocused() {\n    return focused(this._input()) || this.callBase();\n  },\n  _inputWrapper: function _inputWrapper() {\n    return this.$element();\n  },\n  _buttonsContainer: function _buttonsContainer() {\n    return this._inputWrapper().find(\".\" + TEXTEDITOR_BUTTONS_CONTAINER_CLASS).eq(0);\n  },\n  _isControlKey: function _isControlKey(key) {\n    return CONTROL_KEYS.indexOf(key) !== -1;\n  },\n  _renderStylingMode: function _renderStylingMode() {\n    var _this = this;\n\n    var optionName = \"stylingMode\";\n    var optionValue = this.option(optionName);\n    ALLOWED_STYLE_CLASSES.forEach(function (className) {\n      return _this.$element().removeClass(className);\n    });\n    var stylingModeClass = TEXTEDITOR_STYLING_MODE_PREFIX + optionValue;\n\n    if (ALLOWED_STYLE_CLASSES.indexOf(stylingModeClass) === -1) {\n      var defaultOptionValue = this._getDefaultOptions()[optionName];\n\n      var platformOptionValue = this._convertRulesToOptions(this._defaultOptionsRules())[optionName];\n\n      stylingModeClass = TEXTEDITOR_STYLING_MODE_PREFIX + (platformOptionValue || defaultOptionValue);\n    }\n\n    this.$element().addClass(stylingModeClass);\n\n    this._updateButtonsStyling(optionValue);\n  },\n  _initMarkup: function _initMarkup() {\n    this.$element().addClass(TEXTEDITOR_CLASS);\n\n    this._renderInput();\n\n    this._renderStylingMode();\n\n    this._renderInputType();\n\n    this._renderPlaceholder();\n\n    this._renderProps();\n\n    this.callBase();\n\n    this._renderValue();\n  },\n  _render: function _render() {\n    this._renderPlaceholder();\n\n    this._refreshValueChangeEvent();\n\n    this._renderEvents();\n\n    this._renderEnterKeyAction();\n\n    this._renderEmptinessEvent();\n\n    this.callBase();\n  },\n  _renderInput: function _renderInput() {\n    this._$textEditorContainer = $(\"<div>\").addClass(TEXTEDITOR_CONTAINER_CLASS).appendTo(this.$element());\n    this._$textEditorInputContainer = $(\"<div>\").addClass(TEXTEDITOR_INPUT_CONTAINER_CLASS).appendTo(this._$textEditorContainer);\n\n    this._$textEditorInputContainer.append(this._createInput());\n\n    this._renderButtonContainers();\n  },\n  _renderButtonContainers: function _renderButtonContainers() {\n    var buttons = this.option(\"buttons\");\n    this._$beforeButtonsContainer = this._buttonCollection.renderBeforeButtons(buttons, this._$textEditorContainer);\n    this._$afterButtonsContainer = this._buttonCollection.renderAfterButtons(buttons, this._$textEditorContainer);\n  },\n  _clean: function _clean() {\n    this._buttonCollection.clean();\n\n    this._$beforeButtonsContainer = null;\n    this._$afterButtonsContainer = null;\n    this._$textEditorContainer = null;\n    this.callBase();\n  },\n  _createInput: function _createInput() {\n    var $input = $(\"<input>\");\n\n    this._applyInputAttributes($input, this.option(\"inputAttr\"));\n\n    return $input;\n  },\n  _setSubmitElementName: function _setSubmitElementName(name) {\n    var inputAttrName = this.option(\"inputAttr.name\");\n    return this.callBase(name || inputAttrName || \"\");\n  },\n  _applyInputAttributes: function _applyInputAttributes($input, customAttributes) {\n    $input.attr(\"autocomplete\", \"off\").attr(customAttributes).addClass(TEXTEDITOR_INPUT_CLASS).css(\"minHeight\", this.option(\"height\") ? \"0\" : \"\");\n  },\n  _updateButtons: function _updateButtons(names) {\n    this._buttonCollection.updateButtons(names);\n  },\n  _updateButtonsStyling: function _updateButtonsStyling(editorStylingMode) {\n    var that = this;\n    each(this.option(\"buttons\"), function (_, buttonOptions) {\n      if (buttonOptions.options && !buttonOptions.options.stylingMode) {\n        var buttonInstance = that.getButton(buttonOptions.name);\n        buttonInstance.option && buttonInstance.option(\"stylingMode\", \"underlined\" === editorStylingMode ? \"text\" : \"contained\");\n      }\n    });\n  },\n  _renderValue: function _renderValue() {\n    var renderInputPromise = this._renderInputValue();\n\n    return renderInputPromise.promise();\n  },\n  _renderInputValue: function _renderInputValue(value) {\n    value = value || this.option(\"value\");\n    var text = this.option(\"text\"),\n        displayValue = this.option(\"displayValue\"),\n        valueFormat = this.option(\"valueFormat\");\n\n    if (void 0 !== displayValue && null !== value) {\n      text = valueFormat(displayValue);\n    } else {\n      if (!isDefined(text)) {\n        text = valueFormat(value);\n      }\n    }\n\n    this.option(\"text\", text);\n\n    if (this._input().val() !== (isDefined(text) ? text : \"\")) {\n      this._renderDisplayText(text);\n    } else {\n      this._toggleEmptinessEventHandler();\n    }\n\n    return new Deferred().resolve();\n  },\n  _renderDisplayText: function _renderDisplayText(text) {\n    this._input().val(text);\n\n    this._toggleEmptinessEventHandler();\n  },\n  _isValueValid: function _isValueValid() {\n    if (this._input().length) {\n      var validity = this._input().get(0).validity;\n\n      if (validity) {\n        return validity.valid;\n      }\n    }\n\n    return true;\n  },\n  _toggleEmptiness: function _toggleEmptiness(isEmpty) {\n    this.$element().toggleClass(TEXTEDITOR_EMPTY_INPUT_CLASS, isEmpty);\n\n    this._togglePlaceholder(isEmpty);\n  },\n  _togglePlaceholder: function _togglePlaceholder(isEmpty) {\n    if (!this._$placeholder) {\n      return;\n    }\n\n    this._$placeholder.toggleClass(STATE_INVISIBLE_CLASS, !isEmpty);\n  },\n  _renderProps: function _renderProps() {\n    this._toggleReadOnlyState();\n\n    this._toggleSpellcheckState();\n\n    this._toggleTabIndex();\n  },\n  _toggleDisabledState: function _toggleDisabledState(value) {\n    this.callBase.apply(this, arguments);\n\n    var $input = this._input();\n\n    if (value) {\n      $input.attr(\"disabled\", true);\n    } else {\n      $input.removeAttr(\"disabled\");\n    }\n  },\n  _toggleTabIndex: function _toggleTabIndex() {\n    var $input = this._input(),\n        disabled = this.option(\"disabled\"),\n        focusStateEnabled = this.option(\"focusStateEnabled\");\n\n    if (disabled || !focusStateEnabled) {\n      $input.attr(\"tabIndex\", -1);\n    } else {\n      $input.removeAttr(\"tabIndex\");\n    }\n  },\n  _toggleReadOnlyState: function _toggleReadOnlyState() {\n    this._input().prop(\"readOnly\", this._readOnlyPropValue());\n\n    this.callBase();\n  },\n  _readOnlyPropValue: function _readOnlyPropValue() {\n    return this.option(\"readOnly\");\n  },\n  _toggleSpellcheckState: function _toggleSpellcheckState() {\n    this._input().prop(\"spellcheck\", this.option(\"spellcheck\"));\n  },\n  _renderPlaceholder: function _renderPlaceholder() {\n    this._renderPlaceholderMarkup();\n\n    this._attachPlaceholderEvents();\n  },\n  _renderPlaceholderMarkup: function _renderPlaceholderMarkup() {\n    if (this._$placeholder) {\n      this._$placeholder.remove();\n\n      this._$placeholder = null;\n    }\n\n    var $input = this._input(),\n        placeholderText = this.option(\"placeholder\"),\n        $placeholder = this._$placeholder = $(\"<div>\").attr(\"data-dx_placeholder\", placeholderText);\n\n    $placeholder.insertAfter($input);\n    $placeholder.addClass(TEXTEDITOR_PLACEHOLDER_CLASS);\n  },\n  _attachPlaceholderEvents: function _attachPlaceholderEvents() {\n    var that = this,\n        startEvent = eventUtils.addNamespace(pointerEvents.up, that.NAME);\n    eventsEngine.on(that._$placeholder, startEvent, function () {\n      eventsEngine.trigger(that._input(), \"focus\");\n    });\n\n    that._toggleEmptinessEventHandler();\n  },\n  _placeholder: function _placeholder() {\n    return this._$placeholder || $();\n  },\n  _clearValueHandler: function _clearValueHandler(e) {\n    var $input = this._input();\n\n    e.stopPropagation();\n\n    this._saveValueChangeEvent(e);\n\n    this.reset();\n    !this._isFocused() && eventsEngine.trigger($input, \"focus\");\n    eventsEngine.trigger($input, \"input\");\n  },\n  _renderEvents: function _renderEvents() {\n    var that = this,\n        $input = that._input();\n\n    each(EVENTS_LIST, function (_, event) {\n      if (that.hasActionSubscription(\"on\" + event)) {\n        var action = that._createActionByOption(\"on\" + event, {\n          excludeValidators: [\"readOnly\"]\n        });\n\n        eventsEngine.on($input, eventUtils.addNamespace(event.toLowerCase(), that.NAME), function (e) {\n          if (that._disposed) {\n            return;\n          }\n\n          action({\n            event: e\n          });\n        });\n      }\n    });\n  },\n  _refreshEvents: function _refreshEvents() {\n    var that = this,\n        $input = this._input();\n\n    each(EVENTS_LIST, function (_, event) {\n      eventsEngine.off($input, eventUtils.addNamespace(event.toLowerCase(), that.NAME));\n    });\n\n    this._renderEvents();\n  },\n  _keyPressHandler: function _keyPressHandler() {\n    this.option(\"text\", this._input().val());\n  },\n  _renderValueChangeEvent: function _renderValueChangeEvent() {\n    var keyPressEvent = eventUtils.addNamespace(this._renderValueEventName(), this.NAME + \"TextChange\"),\n        valueChangeEvent = eventUtils.addNamespace(this.option(\"valueChangeEvent\"), this.NAME + \"ValueChange\");\n    eventsEngine.on(this._input(), keyPressEvent, this._keyPressHandler.bind(this));\n    eventsEngine.on(this._input(), valueChangeEvent, this._valueChangeEventHandler.bind(this));\n  },\n  _cleanValueChangeEvent: function _cleanValueChangeEvent() {\n    var eventNamespace = this.NAME + \"ValueChange\",\n        keyPressEvent = eventUtils.addNamespace(this._renderValueEventName(), this.NAME + \"TextChange\");\n    eventsEngine.off(this._input(), \".\" + eventNamespace);\n    eventsEngine.off(this._input(), keyPressEvent);\n  },\n  _refreshValueChangeEvent: function _refreshValueChangeEvent() {\n    this._cleanValueChangeEvent();\n\n    this._renderValueChangeEvent();\n  },\n  _renderValueEventName: function _renderValueEventName() {\n    return \"input change keypress\";\n  },\n  _focusTarget: function _focusTarget() {\n    return this._input();\n  },\n  _focusEventTarget: function _focusEventTarget() {\n    return this.element();\n  },\n  _preventNestedFocusEvent: function _preventNestedFocusEvent(event) {\n    if (event.isDefaultPrevented()) {\n      return true;\n    }\n\n    var result = this._isNestedTarget(event.relatedTarget);\n\n    if (\"focusin\" === event.type) {\n      result = result && this._isNestedTarget(event.target);\n    }\n\n    result && event.preventDefault();\n    return result;\n  },\n  _isNestedTarget: function _isNestedTarget(target) {\n    return !!this.$element().find(target).length;\n  },\n  _focusClassTarget: function _focusClassTarget() {\n    return this.$element();\n  },\n  _focusInHandler: function _focusInHandler(event) {\n    this._preventNestedFocusEvent(event);\n\n    this.callBase.apply(this, arguments);\n  },\n  _focusOutHandler: function _focusOutHandler(event) {\n    this._preventNestedFocusEvent(event);\n\n    this.callBase.apply(this, arguments);\n  },\n  _toggleFocusClass: function _toggleFocusClass(isFocused, $element) {\n    this.callBase(isFocused, this._focusClassTarget($element));\n  },\n  _hasFocusClass: function _hasFocusClass(element) {\n    return this.callBase($(element || this.$element()));\n  },\n  _renderEmptinessEvent: function _renderEmptinessEvent() {\n    var $input = this._input();\n\n    eventsEngine.on($input, \"input blur\", this._toggleEmptinessEventHandler.bind(this));\n  },\n  _toggleEmptinessEventHandler: function _toggleEmptinessEventHandler() {\n    var text = this._input().val(),\n        isEmpty = (\"\" === text || null === text) && this._isValueValid();\n\n    this._toggleEmptiness(isEmpty);\n  },\n  _valueChangeEventHandler: function _valueChangeEventHandler(e, formattedValue) {\n    this._saveValueChangeEvent(e);\n\n    this.option(\"value\", arguments.length > 1 ? formattedValue : this._input().val());\n\n    this._saveValueChangeEvent(void 0);\n  },\n  _renderEnterKeyAction: function _renderEnterKeyAction() {\n    this._enterKeyAction = this._createActionByOption(\"onEnterKey\", {\n      excludeValidators: [\"readOnly\"]\n    });\n    eventsEngine.off(this._input(), \"keyup.onEnterKey.dxTextEditor\");\n    eventsEngine.on(this._input(), \"keyup.onEnterKey.dxTextEditor\", this._enterKeyHandlerUp.bind(this));\n  },\n  _enterKeyHandlerUp: function _enterKeyHandlerUp(e) {\n    if (this._disposed) {\n      return;\n    }\n\n    if (\"enter\" === eventUtils.normalizeKeyName(e)) {\n      this._enterKeyAction({\n        event: e\n      });\n    }\n  },\n  _updateValue: function _updateValue() {\n    this.option(\"text\", void 0);\n\n    this._renderValue();\n  },\n  _dispose: function _dispose() {\n    this._enterKeyAction = void 0;\n    this.callBase();\n  },\n  _getSubmitElement: function _getSubmitElement() {\n    return this._input();\n  },\n  _optionChanged: function _optionChanged(args) {\n    var name = args.name;\n\n    if (inArray(name.replace(\"on\", \"\"), EVENTS_LIST) > -1) {\n      this._refreshEvents();\n\n      return;\n    }\n\n    switch (name) {\n      case \"valueChangeEvent\":\n        this._refreshValueChangeEvent();\n\n        this._refreshFocusEvent();\n\n        this._refreshEvents();\n\n        break;\n\n      case \"onValueChanged\":\n        this._createValueChangeAction();\n\n        break;\n\n      case \"focusStateEnabled\":\n        this.callBase(args);\n\n        this._toggleTabIndex();\n\n        break;\n\n      case \"spellcheck\":\n        this._toggleSpellcheckState();\n\n        break;\n\n      case \"mode\":\n        this._renderInputType();\n\n        break;\n\n      case \"onEnterKey\":\n        this._renderEnterKeyAction();\n\n        break;\n\n      case \"placeholder\":\n        this._renderPlaceholder();\n\n        break;\n\n      case \"readOnly\":\n      case \"disabled\":\n        this._updateButtons();\n\n        this.callBase(args);\n        break;\n\n      case \"showClearButton\":\n        this._updateButtons([\"clear\"]);\n\n        break;\n\n      case \"text\":\n        break;\n\n      case \"value\":\n        this._updateValue();\n\n        this.callBase(args);\n        break;\n\n      case \"inputAttr\":\n        this._applyInputAttributes(this._input(), args.value);\n\n        break;\n\n      case \"stylingMode\":\n        this._renderStylingMode();\n\n        break;\n\n      case \"buttons\":\n        if (args.fullName === args.name) {\n          checkButtonsOptionType(args.value);\n        }\n\n        this._$beforeButtonsContainer && this._$beforeButtonsContainer.remove();\n        this._$afterButtonsContainer && this._$afterButtonsContainer.remove();\n\n        this._buttonCollection.clean();\n\n        this._renderButtonContainers();\n\n        break;\n\n      case \"valueFormat\":\n        this._invalidate();\n\n        break;\n\n      default:\n        this.callBase(args);\n    }\n  },\n  _renderInputType: function _renderInputType() {\n    this._setInputType(this.option(\"mode\"));\n  },\n  _setInputType: function _setInputType(type) {\n    var input = this._input();\n\n    if (\"search\" === type) {\n      type = \"text\";\n    }\n\n    try {\n      input.prop(\"type\", type);\n    } catch (e) {\n      input.prop(\"type\", \"text\");\n    }\n  },\n  getButton: function getButton(name) {\n    return this._buttonCollection.getButton(name);\n  },\n  focus: function focus() {\n    eventsEngine.trigger(this._input(), \"focus\");\n  },\n  blur: function blur() {\n    if (this._input().is(domAdapter.getActiveElement())) {\n      domUtils.resetActiveElement();\n    }\n  },\n  reset: function reset() {\n    var defaultOptions = this._getDefaultOptions();\n\n    if (this.option(\"value\") === defaultOptions.value) {\n      this.option(\"text\", \"\");\n\n      this._renderValue();\n    } else {\n      this.option(\"value\", defaultOptions.value);\n    }\n  },\n  on: function on(eventName, eventHandler) {\n    var result = this.callBase(eventName, eventHandler),\n        event = eventName.charAt(0).toUpperCase() + eventName.substr(1);\n\n    if (EVENTS_LIST.indexOf(event) >= 0) {\n      this._refreshEvents();\n    }\n\n    return result;\n  }\n});\nmodule.exports = TextEditorBase;","map":null,"metadata":{},"sourceType":"script"}