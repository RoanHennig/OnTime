{"ast":null,"code":"/**\r\n * DevExtreme (ui/validation_summary.js)\r\n * Version: 19.1.6 (build 19263-1729)\r\n * Build date: Fri Sep 20 2019\r\n *\r\n * Copyright (c) 2012 - 2019 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar registerComponent = require(\"../core/component_registrator\"),\n    eventsEngine = require(\"../events/core/events_engine\"),\n    grep = require(\"../core/utils/common\").grep,\n    extend = require(\"../core/utils/extend\").extend,\n    iteratorUtils = require(\"../core/utils/iterator\"),\n    ValidationMixin = require(\"./validation/validation_mixin\"),\n    ValidationEngine = require(\"./validation_engine\"),\n    CollectionWidget = require(\"./collection/ui.collection_widget.edit\");\n\nvar VALIDATION_SUMMARY_CLASS = \"dx-validationsummary\",\n    ITEM_CLASS = VALIDATION_SUMMARY_CLASS + \"-item\",\n    ITEM_DATA_KEY = VALIDATION_SUMMARY_CLASS + \"-item-data\";\nvar ValidationSummary = CollectionWidget.inherit({\n  _getDefaultOptions: function _getDefaultOptions() {\n    return extend(this.callBase(), {\n      focusStateEnabled: false,\n      noDataText: null\n    });\n  },\n  _setOptionsByReference: function _setOptionsByReference() {\n    this.callBase();\n    extend(this._optionsByReference, {\n      validationGroup: true\n    });\n  },\n  _init: function _init() {\n    this.callBase();\n\n    this._initGroupRegistration();\n  },\n  _initGroupRegistration: function _initGroupRegistration() {\n    var group = this._findGroup(),\n        groupConfig = ValidationEngine.addGroup(group);\n\n    this._unsubscribeGroup();\n\n    this._groupWasInit = true;\n    this._validationGroup = group;\n    this.groupSubscription = this._groupValidationHandler.bind(this);\n    groupConfig.on(\"validated\", this.groupSubscription);\n  },\n  _unsubscribeGroup: function _unsubscribeGroup() {\n    var groupConfig = ValidationEngine.getGroupConfig(this._validationGroup);\n    groupConfig && groupConfig.off(\"validated\", this.groupSubscription);\n  },\n  _getOrderedItems: function _getOrderedItems(validators, items) {\n    var orderedItems = [];\n    iteratorUtils.each(validators, function (_, validator) {\n      var firstItem = grep(items, function (item) {\n        if (item.validator === validator) {\n          return true;\n        }\n      })[0];\n\n      if (firstItem) {\n        orderedItems.push(firstItem);\n      }\n    });\n    return orderedItems;\n  },\n  _groupValidationHandler: function _groupValidationHandler(params) {\n    var that = this,\n        items = that._getOrderedItems(params.validators, iteratorUtils.map(params.brokenRules, function (rule) {\n      return {\n        text: rule.message,\n        validator: rule.validator\n      };\n    }));\n\n    that.validators = params.validators;\n    iteratorUtils.each(that.validators, function (_, validator) {\n      if (validator._validationSummary !== this) {\n        var handler = that._itemValidationHandler.bind(that),\n            disposingHandler = function disposingHandler() {\n          validator.off(\"validated\", handler);\n          validator._validationSummary = null;\n          handler = null;\n        };\n\n        validator.on(\"validated\", handler);\n        validator.on(\"disposing\", disposingHandler);\n        validator._validationSummary = this;\n      }\n    });\n    that.option(\"items\", items);\n  },\n  _itemValidationHandler: function _itemValidationHandler(itemValidationResult) {\n    var elementIndex,\n        items = this.option(\"items\"),\n        isValid = itemValidationResult.isValid,\n        replacementFound = false,\n        newMessage = itemValidationResult.brokenRule && itemValidationResult.brokenRule.message,\n        validator = itemValidationResult.validator;\n    iteratorUtils.each(items, function (index, item) {\n      if (item.validator === validator) {\n        if (isValid) {\n          elementIndex = index;\n        } else {\n          item.text = newMessage;\n        }\n\n        replacementFound = true;\n        return false;\n      }\n    });\n\n    if (isValid ^ replacementFound) {\n      return;\n    }\n\n    if (isValid) {\n      items.splice(elementIndex, 1);\n    } else {\n      items.push({\n        text: newMessage,\n        validator: validator\n      });\n    }\n\n    items = this._getOrderedItems(this.validators, items);\n    this.option(\"items\", items);\n  },\n  _initMarkup: function _initMarkup() {\n    this.$element().addClass(VALIDATION_SUMMARY_CLASS);\n    this.callBase();\n  },\n  _optionChanged: function _optionChanged(args) {\n    switch (args.name) {\n      case \"validationGroup\":\n        this._initGroupRegistration();\n\n        break;\n\n      default:\n        this.callBase(args);\n    }\n  },\n  _itemClass: function _itemClass() {\n    return ITEM_CLASS;\n  },\n  _itemDataKey: function _itemDataKey() {\n    return ITEM_DATA_KEY;\n  },\n  _postprocessRenderItem: function _postprocessRenderItem(params) {\n    eventsEngine.on(params.itemElement, \"click\", function () {\n      params.itemData.validator && params.itemData.validator.focus && params.itemData.validator.focus();\n    });\n  },\n  _dispose: function _dispose() {\n    this.callBase();\n\n    this._unsubscribeGroup();\n  }\n}).include(ValidationMixin);\nregisterComponent(\"dxValidationSummary\", ValidationSummary);\nmodule.exports = ValidationSummary;\nmodule.exports.default = module.exports;","map":null,"metadata":{},"sourceType":"script"}