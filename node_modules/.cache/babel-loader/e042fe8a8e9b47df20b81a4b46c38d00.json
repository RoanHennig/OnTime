{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\Roan\\\\Documents\\\\GitHub\\\\OnTimeReactFrontEnd\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\Roan\\\\Documents\\\\GitHub\\\\OnTimeReactFrontEnd\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport Auth0Lock from 'auth0-lock';\nimport jwtDecode from 'jwt-decode';\nimport axios from 'axios';\nimport AUTH_CONFIG from './auth0ServiceConfig';\n\nvar auth0Service =\n/*#__PURE__*/\nfunction () {\n  function auth0Service() {\n    var _this = this;\n\n    _classCallCheck(this, auth0Service);\n\n    this.sdk = {\n      auth0Manage: null\n    };\n\n    this.login = function () {\n      if (!_this.lock) {\n        return false;\n      } // Call the show method to display the widget.\n\n\n      _this.lock.show();\n    };\n\n    this.register = function () {\n      if (!_this.lock) {\n        return false;\n      }\n\n      _this.lock.show({\n        initialScreen: 'signUp'\n      });\n    };\n\n    this.handleAuthentication = function () {\n      if (!_this.lock) {\n        return false;\n      } // Add a callback for Lock's `authenticated` event\n\n\n      _this.lock.on('authenticated', _this.setSession); // Add a callback for Lock's `authorization_error` event\n\n\n      _this.lock.on('authorization_error', function (err) {\n        console.warn(\"Error: \".concat(err.error, \". Check the console for further details.\"));\n      });\n\n      _this.lock.on('signup ready', _this.onSignupReady);\n\n      _this.lock.on('signin ready', _this.onSigninReady);\n    };\n\n    this.onAuthenticated = function (callback) {\n      if (!_this.lock) {\n        return false;\n      }\n\n      _this.lock.on('authenticated', callback);\n    };\n\n    this.onSignupReady = function () {\n      if (!_this.lock) {\n        return false;\n      }\n    };\n\n    this.onSigninReady = function () {\n      if (!_this.lock) {\n        return false;\n      }\n    };\n\n    this.setSession = function (authResult) {\n      if (authResult && authResult.accessToken && authResult.idToken) {\n        // Set the time that the access token will expire at\n        var expiresAt = JSON.stringify(authResult.expiresIn * 1000 + new Date().getTime());\n        localStorage.setItem('access_token', authResult.accessToken);\n        localStorage.setItem('id_token', authResult.idToken);\n        localStorage.setItem('expires_at', expiresAt);\n      }\n    };\n\n    this.logout = function () {\n      // Clear access token and ID token from local storage\n      localStorage.removeItem('access_token');\n      localStorage.removeItem('id_token');\n      localStorage.removeItem('expires_at');\n      localStorage.removeItem('auth0.ssodata');\n    };\n\n    this.isAuthenticated = function () {\n      if (!_this.lock) {\n        return false;\n      } // Check whether the current time is past the\n      // access token's expiry time\n\n\n      var expiresAt = JSON.parse(localStorage.getItem('expires_at'));\n      var isNotExpired = new Date().getTime() < expiresAt;\n\n      if (isNotExpired) {\n        return true;\n      } else {\n        _this.logout();\n\n        return false;\n      }\n    };\n\n    this.getUserData = function () {\n      return new Promise(function (resolve, reject) {\n        var tokenData = _this.getTokenData();\n\n        var userId = tokenData.sub;\n        var auth0UserUrl = 'https://' + AUTH_CONFIG.domain + '/api/v2/users/' + userId;\n        axios.get(auth0UserUrl, {\n          headers: {\n            'Content-Type': 'application/json',\n            'Authorization': 'Bearer ' + _this.getAccessToken()\n          }\n        }).then(function (response) {\n          if (response.data.app_metadata.accountStatus && response.data.app_metadata.accountStatus === 'Complete') {\n            _this.registrationComplete = true;\n          } else {\n            response.data.app_metadata.roles = ['newBusinessOwner'];\n          }\n\n          resolve(response.data);\n        }).catch(function (error) {\n          // handle error\n          console.warn('Cannot retrieve user data', error);\n          reject(error);\n        });\n      });\n    };\n\n    this.updateUserData = function (user_metadata) {\n      var tokenData = _this.getTokenData();\n\n      var userId = tokenData.sub;\n      var auth0UserUrl = 'https://' + AUTH_CONFIG.domain + '/api/v2/users/' + userId;\n      var dataObj = JSON.stringify({\n        user_metadata: user_metadata\n      });\n      return axios.patch(auth0UserUrl, dataObj, {\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': 'Bearer ' + _this.getAccessToken()\n        }\n      });\n    };\n\n    this.getAccessToken = function () {\n      return localStorage.getItem('access_token');\n    };\n\n    this.getIdToken = function () {\n      return window.localStorage.getItem('id_token');\n    };\n\n    this.getTokenData = function () {\n      var token = _this.getIdToken();\n\n      var decoded = jwtDecode(token);\n\n      if (!decoded) {\n        return null;\n      }\n\n      return decoded;\n    };\n\n    this.isRegistrationComplete = function () {\n      return _this.registrationComplete;\n    };\n  }\n\n  _createClass(auth0Service, [{\n    key: \"init\",\n    value: function init(success) {\n      if (Object.entries(AUTH_CONFIG).length === 0 && AUTH_CONFIG.constructor === Object) {\n        if (process.env.NODE_ENV === 'development') {\n          console.warn(\"Missing Auth0 configuration at src/app/services/auth0Service/auth0ServiceConfig.js\");\n        }\n\n        success(false);\n        return;\n      }\n\n      this.registrationComplete = false;\n      this.lock = new Auth0Lock(AUTH_CONFIG.clientId, AUTH_CONFIG.domain, {\n        autoclose: true,\n        avatar: null,\n        socialButtonStyle: \"big\",\n        auth: {\n          sso: false,\n          redirect: true,\n          redirectUrl: AUTH_CONFIG.callbackUrl,\n          responseType: 'token id_token',\n          audience: \"https://\".concat(AUTH_CONFIG.domain, \"/api/v2/\"),\n          allowedConnections: ['Username-Password-Authentication'],\n          params: {\n            scope: 'openid profile email user_metadata app_metadata picture update:current_user_metadata create:current_user_metadata read:current_user'\n          }\n        },\n        theme: {\n          primaryColor: '#D0605E',\n          labeledSubmitButton: false\n        },\n        additionalSignUpFields: [{\n          name: \"first_name\",\n          placeholder: \"your first name\",\n          icon: \"assets/images/icons/usericon.png\",\n          validator: function validator() {\n            return true;\n          }\n        }, {\n          name: \"last_name\",\n          placeholder: \"your last name\",\n          icon: \"assets/images/icons/usericon.png\",\n          validator: function validator() {\n            return true;\n          }\n        }, {\n          name: \"business_name\",\n          placeholder: \"your business name\",\n          icon: \"assets/images/icons/businessicon.png\",\n          validator: function validator() {\n            return true;\n          }\n        }]\n      });\n      this.handleAuthentication();\n      success(true);\n    }\n  }]);\n\n  return auth0Service;\n}();\n\nvar instance = new auth0Service();\nexport default instance;","map":{"version":3,"sources":["C:\\Users\\Roan\\Documents\\GitHub\\OnTimeReactFrontEnd\\src\\app\\services\\auth0Service\\auth0Service.js"],"names":["Auth0Lock","jwtDecode","axios","AUTH_CONFIG","auth0Service","sdk","auth0Manage","login","lock","show","register","initialScreen","handleAuthentication","on","setSession","err","console","warn","error","onSignupReady","onSigninReady","onAuthenticated","callback","authResult","accessToken","idToken","expiresAt","JSON","stringify","expiresIn","Date","getTime","localStorage","setItem","logout","removeItem","isAuthenticated","parse","getItem","isNotExpired","getUserData","Promise","resolve","reject","tokenData","getTokenData","userId","sub","auth0UserUrl","domain","get","headers","getAccessToken","then","response","data","app_metadata","accountStatus","registrationComplete","roles","catch","updateUserData","user_metadata","dataObj","patch","getIdToken","window","token","decoded","isRegistrationComplete","success","Object","entries","length","constructor","process","env","NODE_ENV","clientId","autoclose","avatar","socialButtonStyle","auth","sso","redirect","redirectUrl","callbackUrl","responseType","audience","allowedConnections","params","scope","theme","primaryColor","labeledSubmitButton","additionalSignUpFields","name","placeholder","icon","validator","instance"],"mappings":"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","sourcesContent":["import Auth0Lock from 'auth0-lock';\r\nimport jwtDecode from 'jwt-decode';\r\nimport axios from 'axios';\r\nimport AUTH_CONFIG from './auth0ServiceConfig';\r\n\r\nclass auth0Service {\r\n    sdk = {auth0Manage: null};\r\n    \r\n\r\n    init(success)\r\n    {\r\n        if ( Object.entries(AUTH_CONFIG).length === 0 && AUTH_CONFIG.constructor === Object )\r\n        {\r\n            if ( process.env.NODE_ENV === 'development' )\r\n            {\r\n                console.warn(\"Missing Auth0 configuration at src/app/services/auth0Service/auth0ServiceConfig.js\");\r\n            }\r\n            success(false);\r\n            return;\r\n        }\r\n        this.registrationComplete = false;\r\n        this.lock = new Auth0Lock(\r\n            AUTH_CONFIG.clientId,\r\n            AUTH_CONFIG.domain,\r\n            {\r\n                autoclose        : true,\r\n                avatar           : null,\r\n                socialButtonStyle: \"big\",\r\n                auth             : {\r\n                    sso: false,\r\n                    redirect: true,\r\n                    redirectUrl : AUTH_CONFIG.callbackUrl,\r\n                    responseType: 'token id_token',\r\n                    audience    : `https://${AUTH_CONFIG.domain}/api/v2/`,\r\n                    allowedConnections: ['Username-Password-Authentication'],\r\n                    params      : {\r\n                        scope: 'openid profile email user_metadata app_metadata picture update:current_user_metadata create:current_user_metadata read:current_user'\r\n                    }\r\n                },\r\n                theme: {\r\n                    primaryColor: '#D0605E',\r\n                    labeledSubmitButton: false\r\n                },\r\n                additionalSignUpFields: [{\r\n                    name: \"first_name\",\r\n                    placeholder: \"your first name\",\r\n                    icon:\"assets/images/icons/usericon.png\",\r\n                    validator: function() { \r\n                      return true;\r\n                    }\r\n                  },\r\n                  {\r\n                    name: \"last_name\",\r\n                    placeholder: \"your last name\",\r\n                    icon:\"assets/images/icons/usericon.png\",\r\n                    validator: function() { \r\n                      return true;\r\n                    }\r\n                  },\r\n                  {\r\n                    name: \"business_name\",\r\n                    placeholder: \"your business name\",\r\n                    icon: \"assets/images/icons/businessicon.png\",\r\n                    validator: function() { \r\n                      return true;\r\n                    }\r\n                  }\r\n                ]\r\n            }\r\n        );\r\n        this.handleAuthentication();\r\n        success(true);\r\n    }\r\n\r\n    login = () => {\r\n        if ( !this.lock )\r\n        {\r\n            return false;\r\n        }\r\n        // Call the show method to display the widget.\r\n        this.lock.show();\r\n    };\r\n\r\n    register = () => {\r\n        if ( !this.lock )\r\n        {\r\n            return false;\r\n        }\r\n\r\n        this.lock.show({\r\n            initialScreen: 'signUp'\r\n        });\r\n    };\r\n\r\n    handleAuthentication = () => {\r\n        if ( !this.lock )\r\n        {\r\n            return false;\r\n        }\r\n\r\n        // Add a callback for Lock's `authenticated` event\r\n        this.lock.on('authenticated', this.setSession);\r\n        // Add a callback for Lock's `authorization_error` event\r\n        this.lock.on('authorization_error', (err) => {\r\n            console.warn(`Error: ${err.error}. Check the console for further details.`);\r\n        });\r\n\r\n        this.lock.on('signup ready', this.onSignupReady);\r\n        this.lock.on('signin ready', this.onSigninReady);\r\n    };\r\n\r\n    onAuthenticated = (callback) => {\r\n        if ( !this.lock )\r\n        {\r\n            return false;\r\n        }\r\n        this.lock.on('authenticated', callback);\r\n    };\r\n\r\n    onSignupReady = () => {\r\n        if ( !this.lock )\r\n        {\r\n            return false;\r\n        }\r\n    };\r\n\r\n    onSigninReady = () => {\r\n        if ( !this.lock )\r\n        {\r\n            return false;\r\n        }\r\n    };\r\n\r\n    setSession = (authResult) => {\r\n\r\n        if ( authResult && authResult.accessToken && authResult.idToken )\r\n        {\r\n            // Set the time that the access token will expire at\r\n            let expiresAt = JSON.stringify((authResult.expiresIn * 1000) + new Date().getTime());\r\n            localStorage.setItem('access_token', authResult.accessToken);\r\n            localStorage.setItem('id_token', authResult.idToken);\r\n            localStorage.setItem('expires_at', expiresAt);\r\n        }\r\n    };\r\n\r\n    logout = () => {\r\n        // Clear access token and ID token from local storage\r\n        localStorage.removeItem('access_token');\r\n        localStorage.removeItem('id_token');\r\n        localStorage.removeItem('expires_at');\r\n        localStorage.removeItem('auth0.ssodata');\r\n    };\r\n\r\n    isAuthenticated = () => {\r\n        if ( !this.lock )\r\n        {\r\n            return false;\r\n        }\r\n        // Check whether the current time is past the\r\n        // access token's expiry time\r\n        let expiresAt = JSON.parse(localStorage.getItem('expires_at'));\r\n        const isNotExpired = new Date().getTime() < expiresAt;\r\n        if ( isNotExpired )\r\n        {\r\n            return true;\r\n        }\r\n        else\r\n        {\r\n            this.logout();\r\n            return false;\r\n        }\r\n    };\r\n\r\n    getUserData = () => {\r\n        return new Promise((resolve, reject) => {\r\n\r\n            const tokenData = this.getTokenData();\r\n            const {sub: userId} = tokenData;\r\n\r\n            const auth0UserUrl = 'https://' + AUTH_CONFIG.domain + '/api/v2/users/' + userId;\r\n\r\n            axios.get(auth0UserUrl, {\r\n                headers: {\r\n                    'Content-Type' : 'application/json',\r\n                    'Authorization': 'Bearer ' + this.getAccessToken()\r\n                }\r\n            }).then(response => {\r\n                    if(response.data.app_metadata.accountStatus &&\r\n                     response.data.app_metadata.accountStatus === 'Complete'){\r\n                    this.registrationComplete = true;\r\n                }\r\n                else {\r\n                    response.data.app_metadata.roles = ['newBusinessOwner'];\r\n                }\r\n                resolve(response.data);\r\n            }).catch(error => {\r\n                // handle error\r\n                console.warn('Cannot retrieve user data', error);\r\n                reject(error);\r\n            });\r\n        });\r\n    };\r\n\r\n    updateUserData = (user_metadata) => {\r\n        const tokenData = this.getTokenData();\r\n        const {sub: userId} = tokenData;\r\n\r\n        const auth0UserUrl = 'https://' + AUTH_CONFIG.domain + '/api/v2/users/' + userId;\r\n        const dataObj = JSON.stringify({user_metadata});\r\n\r\n        return axios.patch(auth0UserUrl, dataObj, {\r\n            headers: {\r\n                'Content-Type' : 'application/json',\r\n                'Authorization': 'Bearer ' + this.getAccessToken()\r\n            }\r\n        });\r\n    };\r\n\r\n    getAccessToken = () => {\r\n        return localStorage.getItem('access_token');\r\n    };\r\n\r\n    getIdToken = () => {\r\n        return window.localStorage.getItem('id_token');\r\n    };\r\n\r\n    getTokenData = () => {\r\n        const token = this.getIdToken();\r\n        const decoded = jwtDecode(token);\r\n        if ( !decoded )\r\n        {\r\n            return null;\r\n        }\r\n        return decoded;\r\n    }\r\n\r\n    isRegistrationComplete = () => {\r\n        return this.registrationComplete;\r\n    }\r\n}\r\n\r\nconst instance = new auth0Service();\r\n\r\nexport default instance;\r\n"]},"metadata":{},"sourceType":"module"}