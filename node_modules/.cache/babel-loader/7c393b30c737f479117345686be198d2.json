{"ast":null,"code":"/**\r\n * DevExtreme (ui/form/ui.form.js)\r\n * Version: 19.1.6 (build 19263-1729)\r\n * Build date: Fri Sep 20 2019\r\n *\r\n * Copyright (c) 2012 - 2019 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar _renderer = require(\"../../core/renderer\");\n\nvar _renderer2 = _interopRequireDefault(_renderer);\n\nvar _events_engine = require(\"../../events/core/events_engine\");\n\nvar _events_engine2 = _interopRequireDefault(_events_engine);\n\nvar _component_registrator = require(\"../../core/component_registrator\");\n\nvar _component_registrator2 = _interopRequireDefault(_component_registrator);\n\nvar _guid = require(\"../../core/guid\");\n\nvar _guid2 = _interopRequireDefault(_guid);\n\nvar _common = require(\"../../core/utils/common\");\n\nvar _type = require(\"../../core/utils/type\");\n\nvar _iterator = require(\"../../core/utils/iterator\");\n\nvar _array = require(\"../../core/utils/array\");\n\nvar _extend = require(\"../../core/utils/extend\");\n\nvar _string = require(\"../../core/utils/string\");\n\nvar _browser = require(\"../../core/utils/browser\");\n\nvar _browser2 = _interopRequireDefault(_browser);\n\nvar _dom = require(\"../../core/utils/dom\");\n\nvar _message = require(\"../../localization/message\");\n\nvar _message2 = _interopRequireDefault(_message);\n\nvar _ui = require(\"../widget/ui.widget\");\n\nvar _ui2 = _interopRequireDefault(_ui);\n\nvar _window = require(\"../../core/utils/window\");\n\nvar _validation_engine = require(\"../validation_engine\");\n\nvar _validation_engine2 = _interopRequireDefault(_validation_engine);\n\nvar _uiForm = require(\"./ui.form.layout_manager\");\n\nvar _uiForm2 = _interopRequireDefault(_uiForm);\n\nvar _uiForm3 = require(\"./ui.form.items_runtime_info\");\n\nvar _uiForm4 = _interopRequireDefault(_uiForm3);\n\nvar _tab_panel = require(\"../tab_panel\");\n\nvar _tab_panel2 = _interopRequireDefault(_tab_panel);\n\nvar _ui3 = require(\"../scroll_view/ui.scrollable\");\n\nvar _ui4 = _interopRequireDefault(_ui3);\n\nvar _deferred = require(\"../../core/utils/deferred\");\n\nvar _themes = require(\"../themes\");\n\nvar _themes2 = _interopRequireDefault(_themes);\n\nvar _uiForm5 = require(\"./ui.form.item_options_actions\");\n\nvar _uiForm6 = _interopRequireDefault(_uiForm5);\n\nrequire(\"../validation_summary\");\n\nrequire(\"../validation_group\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nvar FORM_CLASS = \"dx-form\";\nvar FIELD_ITEM_CLASS = \"dx-field-item\";\nvar FIELD_ITEM_LABEL_TEXT_CLASS = \"dx-field-item-label-text\";\nvar FORM_GROUP_CLASS = \"dx-form-group\";\nvar FORM_GROUP_CONTENT_CLASS = \"dx-form-group-content\";\nvar FORM_GROUP_WITH_CAPTION_CLASS = \"dx-form-group-with-caption\";\nvar FORM_GROUP_CAPTION_CLASS = \"dx-form-group-caption\";\nvar HIDDEN_LABEL_CLASS = \"dx-layout-manager-hidden-label\";\nvar FIELD_ITEM_LABEL_CLASS = \"dx-field-item-label\";\nvar FIELD_ITEM_LABEL_CONTENT_CLASS = \"dx-field-item-label-content\";\nvar FIELD_ITEM_TAB_CLASS = \"dx-field-item-tab\";\nvar FORM_FIELD_ITEM_COL_CLASS = \"dx-col-\";\nvar GROUP_COL_COUNT_CLASS = \"dx-group-colcount-\";\nvar FIELD_ITEM_CONTENT_CLASS = \"dx-field-item-content\";\nvar FORM_VALIDATION_SUMMARY = \"dx-form-validation-summary\";\nvar WIDGET_CLASS = \"dx-widget\";\nvar FOCUSED_STATE_CLASS = \"dx-state-focused\";\n\nvar Form = _ui2.default.inherit({\n  _init: function _init() {\n    this.callBase();\n    this._cachedColCountOptions = [];\n    this._itemsRunTimeInfo = new _uiForm4.default();\n    this._groupsColCount = [];\n\n    this._attachSyncSubscriptions();\n  },\n  _initOptions: function _initOptions(options) {\n    if (!(\"screenByWidth\" in options)) {\n      options.screenByWidth = _window.defaultScreenFactorFunc;\n    }\n\n    this.callBase(options);\n  },\n  _getDefaultOptions: function _getDefaultOptions() {\n    return (0, _extend.extend)(this.callBase(), {\n      formID: \"dx-\" + new _guid2.default(),\n      formData: {},\n      colCount: 1,\n      screenByWidth: null,\n      colCountByScreen: void 0,\n      labelLocation: \"left\",\n      readOnly: false,\n      onFieldDataChanged: null,\n      customizeItem: null,\n      onEditorEnterKey: null,\n      minColWidth: 200,\n      alignItemLabels: true,\n      alignItemLabelsInAllGroups: true,\n      showColonAfterLabel: true,\n      showRequiredMark: true,\n      showOptionalMark: false,\n      requiredMark: \"*\",\n      optionalMark: _message2.default.format(\"dxForm-optionalMark\"),\n      requiredMessage: _message2.default.getFormatter(\"dxForm-requiredMessage\"),\n      showValidationSummary: false,\n      items: void 0,\n      scrollingEnabled: false,\n      validationGroup: void 0,\n      stylingMode: void 0\n    });\n  },\n  _defaultOptionsRules: function _defaultOptionsRules() {\n    return this.callBase().concat([{\n      device: function device() {\n        return _themes2.default.isMaterial();\n      },\n      options: {\n        showColonAfterLabel: false,\n        labelLocation: \"top\"\n      }\n    }]);\n  },\n  _setOptionsByReference: function _setOptionsByReference() {\n    this.callBase();\n    (0, _extend.extend)(this._optionsByReference, {\n      formData: true,\n      validationGroup: true\n    });\n  },\n  _getColCount: function _getColCount($element) {\n    var $cols,\n        index = 0,\n        isColsExist = true;\n\n    while (isColsExist) {\n      $cols = $element.find(\".\" + FORM_FIELD_ITEM_COL_CLASS + index);\n\n      if (!$cols.length) {\n        isColsExist = false;\n      } else {\n        index++;\n      }\n    }\n\n    return index;\n  },\n  _createHiddenElement: function _createHiddenElement(rootLayoutManager) {\n    this._$hiddenElement = (0, _renderer2.default)(\"<div>\").addClass(WIDGET_CLASS).addClass(HIDDEN_LABEL_CLASS).appendTo(\"body\");\n\n    var $hiddenLabel = rootLayoutManager._renderLabel({\n      text: \" \",\n      location: this.option(\"labelLocation\")\n    }).appendTo(this._$hiddenElement);\n\n    this._hiddenLabelText = $hiddenLabel.find(\".\" + FIELD_ITEM_LABEL_TEXT_CLASS)[0];\n  },\n  _removeHiddenElement: function _removeHiddenElement() {\n    this._$hiddenElement.remove();\n\n    this._hiddenLabelText = null;\n  },\n  _getLabelWidthByText: function _getLabelWidthByText(text) {\n    this._hiddenLabelText.innerHTML = text;\n    return this._hiddenLabelText.offsetWidth;\n  },\n  _getLabelsSelectorByCol: function _getLabelsSelectorByCol(index, options) {\n    options = options || {};\n    var fieldItemClass = options.inOneColumn ? FIELD_ITEM_CLASS : FORM_FIELD_ITEM_COL_CLASS + index,\n        cssExcludeTabbedSelector = options.excludeTabbed ? \":not(.\" + FIELD_ITEM_TAB_CLASS + \")\" : \"\",\n        childLabelContentSelector = \"> .\" + FIELD_ITEM_LABEL_CLASS + \" > .\" + FIELD_ITEM_LABEL_CONTENT_CLASS;\n    return \".\" + fieldItemClass + cssExcludeTabbedSelector + childLabelContentSelector;\n  },\n  _getLabelText: function _getLabelText(labelText) {\n    var child,\n        i,\n        length = labelText.children.length,\n        result = \"\";\n\n    for (i = 0; i < length; i++) {\n      child = labelText.children[i];\n      result += !(0, _string.isEmpty)(child.innerText) ? child.innerText : child.innerHTML;\n    }\n\n    return result;\n  },\n  _applyLabelsWidthByCol: function _applyLabelsWidthByCol($container, index, options) {\n    var labelWidth,\n        i,\n        $labelTexts = $container.find(this._getLabelsSelectorByCol(index, options)),\n        $labelTextsLength = $labelTexts.length,\n        maxWidth = 0;\n\n    for (i = 0; i < $labelTextsLength; i++) {\n      labelWidth = this._getLabelWidthByText(this._getLabelText($labelTexts[i]));\n\n      if (labelWidth > maxWidth) {\n        maxWidth = labelWidth;\n      }\n    }\n\n    for (i = 0; i < $labelTextsLength; i++) {\n      $labelTexts[i].style.width = maxWidth + \"px\";\n    }\n  },\n  _applyLabelsWidth: function _applyLabelsWidth($container, excludeTabbed, inOneColumn, colCount) {\n    colCount = inOneColumn ? 1 : colCount || this._getColCount($container);\n    var i,\n        applyLabelsOptions = {\n      excludeTabbed: excludeTabbed,\n      inOneColumn: inOneColumn\n    };\n\n    for (i = 0; i < colCount; i++) {\n      this._applyLabelsWidthByCol($container, i, applyLabelsOptions);\n    }\n  },\n  _getGroupElementsInColumn: function _getGroupElementsInColumn($container, columnIndex, colCount) {\n    var cssColCountSelector = (0, _type.isDefined)(colCount) ? \".\" + GROUP_COL_COUNT_CLASS + colCount : \"\",\n        groupSelector = \".\" + FORM_FIELD_ITEM_COL_CLASS + columnIndex + \" > .\" + FIELD_ITEM_CONTENT_CLASS + \" > .\" + FORM_GROUP_CLASS + cssColCountSelector;\n    return $container.find(groupSelector);\n  },\n  _applyLabelsWidthWithGroups: function _applyLabelsWidthWithGroups($container, colCount, excludeTabbed) {\n    var alignItemLabelsInAllGroups = this.option(\"alignItemLabelsInAllGroups\");\n\n    if (alignItemLabelsInAllGroups) {\n      this._applyLabelsWidthWithNestedGroups($container, colCount, excludeTabbed);\n    } else {\n      var i,\n          $groups = this.$element().find(\".\" + FORM_GROUP_CLASS);\n\n      for (i = 0; i < $groups.length; i++) {\n        this._applyLabelsWidth($groups.eq(i), excludeTabbed);\n      }\n    }\n  },\n  _applyLabelsWidthWithNestedGroups: function _applyLabelsWidthWithNestedGroups($container, colCount, excludeTabbed) {\n    var colIndex,\n        groupsColIndex,\n        groupColIndex,\n        $groupsByCol,\n        applyLabelsOptions = {\n      excludeTabbed: excludeTabbed\n    };\n\n    for (colIndex = 0; colIndex < colCount; colIndex++) {\n      $groupsByCol = this._getGroupElementsInColumn($container, colIndex);\n\n      this._applyLabelsWidthByCol($groupsByCol, 0, applyLabelsOptions);\n\n      for (groupsColIndex = 0; groupsColIndex < this._groupsColCount.length; groupsColIndex++) {\n        $groupsByCol = this._getGroupElementsInColumn($container, colIndex, this._groupsColCount[groupsColIndex]);\n\n        var groupColCount = this._getColCount($groupsByCol);\n\n        for (groupColIndex = 1; groupColIndex < groupColCount; groupColIndex++) {\n          this._applyLabelsWidthByCol($groupsByCol, groupColIndex, applyLabelsOptions);\n        }\n      }\n    }\n  },\n  _alignLabelsInColumn: function _alignLabelsInColumn(options) {\n    if (!(0, _window.hasWindow)()) {\n      return;\n    }\n\n    this._createHiddenElement(options.layoutManager);\n\n    if (options.inOneColumn) {\n      this._applyLabelsWidth(options.$container, options.excludeTabbed, true);\n    } else {\n      if (this._checkGrouping(options.items)) {\n        this._applyLabelsWidthWithGroups(options.$container, options.layoutManager._getColCount(), options.excludeTabbed);\n      } else {\n        this._applyLabelsWidth(options.$container, options.excludeTabbed, false, options.layoutManager._getColCount());\n      }\n    }\n\n    this._removeHiddenElement();\n  },\n  _prepareFormData: function _prepareFormData() {\n    if (!(0, _type.isDefined)(this.option(\"formData\"))) {\n      this.option(\"formData\", {});\n    }\n  },\n  _initMarkup: function _initMarkup() {\n    _validation_engine2.default.addGroup(this._getValidationGroup());\n\n    this._clearCachedInstances();\n\n    this._prepareFormData();\n\n    this.$element().addClass(FORM_CLASS);\n    this.callBase();\n    this.setAria(\"role\", \"form\", this.$element());\n\n    if (this.option(\"scrollingEnabled\")) {\n      this._renderScrollable();\n    }\n\n    this._renderLayout();\n\n    this._renderValidationSummary();\n\n    this._lastMarkupScreenFactor = this._targetScreenFactor || this._getCurrentScreenFactor();\n  },\n  _getCurrentScreenFactor: function _getCurrentScreenFactor() {\n    return (0, _window.hasWindow)() ? (0, _window.getCurrentScreenFactor)(this.option(\"screenByWidth\")) : \"lg\";\n  },\n  _clearCachedInstances: function _clearCachedInstances() {\n    this._itemsRunTimeInfo.clear();\n\n    this._cachedLayoutManagers = [];\n  },\n  _alignLabels: function _alignLabels(layoutManager, inOneColumn) {\n    this._alignLabelsInColumn({\n      $container: this.$element(),\n      layoutManager: layoutManager,\n      excludeTabbed: true,\n      items: this.option(\"items\"),\n      inOneColumn: inOneColumn\n    });\n  },\n  _clean: function _clean() {\n    this.callBase();\n    this._groupsColCount = [];\n    this._cachedColCountOptions = [];\n    this._lastMarkupScreenFactor = void 0;\n  },\n  _renderScrollable: function _renderScrollable() {\n    var useNativeScrolling = this.option(\"useNativeScrolling\");\n    this._scrollable = new _ui4.default(this.$element(), {\n      useNative: !!useNativeScrolling,\n      useSimulatedScrollbar: !useNativeScrolling,\n      useKeyboard: false,\n      direction: \"both\",\n      bounceEnabled: false\n    });\n  },\n  _getContent: function _getContent() {\n    return this.option(\"scrollingEnabled\") ? this._scrollable.$content() : this.$element();\n  },\n  _renderValidationSummary: function _renderValidationSummary() {\n    var $validationSummary = this.$element().find(\".\" + FORM_VALIDATION_SUMMARY);\n\n    if ($validationSummary.length > 0) {\n      $validationSummary.remove();\n    }\n\n    if (this.option(\"showValidationSummary\")) {\n      (0, _renderer2.default)(\"<div>\").addClass(FORM_VALIDATION_SUMMARY).dxValidationSummary({\n        validationGroup: this._getValidationGroup()\n      }).appendTo(this._getContent());\n    }\n  },\n  _prepareItems: function _prepareItems(items, parentIsTabbedItem) {\n    if (items) {\n      var result = [];\n\n      for (var i = 0; i < items.length; i++) {\n        var item = items[i];\n\n        var guid = this._itemsRunTimeInfo.add(item);\n\n        if ((0, _type.isObject)(item)) {\n          var itemCopy = (0, _extend.extend)({}, item);\n          itemCopy.guid = guid;\n\n          this._tryPrepareGroupItem(itemCopy);\n\n          this._tryPrepareTabbedItem(itemCopy);\n\n          this._tryPrepareItemTemplate(itemCopy);\n\n          if (parentIsTabbedItem) {\n            itemCopy.cssItemClass = FIELD_ITEM_TAB_CLASS;\n          }\n\n          if (itemCopy.items) {\n            itemCopy.items = this._prepareItems(itemCopy.items, parentIsTabbedItem);\n          }\n\n          result.push(itemCopy);\n        } else {\n          result.push(item);\n        }\n      }\n\n      return result;\n    }\n  },\n  _tryPrepareGroupItem: function _tryPrepareGroupItem(item) {\n    if (\"group\" === item.itemType) {\n      item.alignItemLabels = (0, _common.ensureDefined)(item.alignItemLabels, true);\n\n      if (item.template) {\n        item.groupContentTemplate = this._getTemplate(item.template);\n      }\n\n      item.template = this._itemGroupTemplate.bind(this, item);\n    }\n  },\n  _tryPrepareTabbedItem: function _tryPrepareTabbedItem(item) {\n    if (\"tabbed\" === item.itemType) {\n      item.template = this._itemTabbedTemplate.bind(this, item);\n      item.tabs = this._prepareItems(item.tabs, true);\n    }\n  },\n  _tryPrepareItemTemplate: function _tryPrepareItemTemplate(item) {\n    if (item.template) {\n      item.template = this._getTemplate(item.template);\n    }\n  },\n  _checkGrouping: function _checkGrouping(items) {\n    if (items) {\n      for (var i = 0; i < items.length; i++) {\n        var item = items[i];\n\n        if (\"group\" === item.itemType) {\n          return true;\n        }\n      }\n    }\n  },\n  _renderLayout: function _renderLayout() {\n    var that = this,\n        items = that.option(\"items\"),\n        $content = that._getContent();\n\n    items = that._prepareItems(items);\n    that._rootLayoutManager = that._renderLayoutManager(items, $content, {\n      colCount: that.option(\"colCount\"),\n      alignItemLabels: that.option(\"alignItemLabels\"),\n      screenByWidth: this.option(\"screenByWidth\"),\n      colCountByScreen: this.option(\"colCountByScreen\"),\n      onLayoutChanged: function onLayoutChanged(inOneColumn) {\n        that._alignLabels.bind(that)(that._rootLayoutManager, inOneColumn);\n      },\n      onContentReady: function onContentReady(e) {\n        that._alignLabels(e.component, e.component.isSingleColumnMode());\n      }\n    });\n  },\n  _tryGetItemsForTemplate: function _tryGetItemsForTemplate(item) {\n    return item.items || [];\n  },\n  _itemTabbedTemplate: function _itemTabbedTemplate(item, e, $container) {\n    var that = this,\n        $tabPanel = (0, _renderer2.default)(\"<div>\").appendTo($container),\n        tabPanelOptions = (0, _extend.extend)({}, item.tabPanelOptions, {\n      dataSource: item.tabs,\n      onItemRendered: function onItemRendered(args) {\n        (0, _dom.triggerShownEvent)(args.itemElement);\n      },\n      itemTemplate: function itemTemplate(itemData, e, container) {\n        var layoutManager,\n            $container = (0, _renderer2.default)(container),\n            alignItemLabels = (0, _common.ensureDefined)(itemData.alignItemLabels, true);\n        layoutManager = that._renderLayoutManager(that._tryGetItemsForTemplate(itemData), $container, {\n          colCount: itemData.colCount,\n          alignItemLabels: alignItemLabels,\n          screenByWidth: this.option(\"screenByWidth\"),\n          colCountByScreen: itemData.colCountByScreen,\n          cssItemClass: itemData.cssItemClass,\n          onLayoutChanged: function onLayoutChanged(inOneColumn) {\n            that._alignLabelsInColumn.bind(that)({\n              $container: $container,\n              layoutManager: layoutManager,\n              items: itemData.items,\n              inOneColumn: inOneColumn\n            });\n          }\n        });\n\n        if (alignItemLabels) {\n          that._alignLabelsInColumn.bind(that)({\n            $container: $container,\n            layoutManager: layoutManager,\n            items: itemData.items,\n            inOneColumn: layoutManager.isSingleColumnMode()\n          });\n        }\n      }\n    });\n\n    that._createComponent($tabPanel, _tab_panel2.default, tabPanelOptions);\n  },\n  _itemGroupTemplate: function _itemGroupTemplate(item, e, $container) {\n    var $groupContent,\n        colCount,\n        layoutManager,\n        $group = (0, _renderer2.default)(\"<div>\").toggleClass(FORM_GROUP_WITH_CAPTION_CLASS, (0, _type.isDefined)(item.caption) && item.caption.length).addClass(FORM_GROUP_CLASS).appendTo($container);\n\n    if (item.caption) {\n      (0, _renderer2.default)(\"<span>\").addClass(FORM_GROUP_CAPTION_CLASS).text(item.caption).appendTo($group);\n    }\n\n    $groupContent = (0, _renderer2.default)(\"<div>\").addClass(FORM_GROUP_CONTENT_CLASS).appendTo($group);\n\n    if (item.groupContentTemplate) {\n      var data = {\n        formData: this.option(\"formData\"),\n        component: this\n      };\n      item.groupContentTemplate.render({\n        model: data,\n        container: (0, _dom.getPublicElement)($groupContent)\n      });\n    } else {\n      layoutManager = this._renderLayoutManager(this._tryGetItemsForTemplate(item), $groupContent, {\n        colCount: item.colCount,\n        colCountByScreen: item.colCountByScreen,\n        alignItemLabels: item.alignItemLabels,\n        cssItemClass: item.cssItemClass\n      });\n      colCount = layoutManager._getColCount();\n\n      if ((0, _array.inArray)(colCount, this._groupsColCount) === -1) {\n        this._groupsColCount.push(colCount);\n      }\n\n      $group.addClass(GROUP_COL_COUNT_CLASS + colCount);\n    }\n  },\n  _renderLayoutManager: function _renderLayoutManager(items, $rootElement, options) {\n    var instance,\n        $element = (0, _renderer2.default)(\"<div>\"),\n        that = this,\n        config = that._getLayoutManagerConfig(items, options),\n        baseColCountByScreen = {\n      lg: options.colCount,\n      md: options.colCount,\n      sm: options.colCount,\n      xs: 1\n    };\n\n    that._cachedColCountOptions.push({\n      colCountByScreen: (0, _extend.extend)(baseColCountByScreen, options.colCountByScreen)\n    });\n\n    $element.appendTo($rootElement);\n    instance = that._createComponent($element, \"dxLayoutManager\", config);\n    instance.on(\"autoColCountChanged\", function () {\n      that._refresh();\n    });\n\n    that._cachedLayoutManagers.push(instance);\n\n    return instance;\n  },\n  _getValidationGroup: function _getValidationGroup() {\n    return this.option(\"validationGroup\") || this;\n  },\n  _getLayoutManagerConfig: function _getLayoutManagerConfig(items, options) {\n    var that = this,\n        baseConfig = {\n      form: that,\n      validationGroup: that._getValidationGroup(),\n      showRequiredMark: that.option(\"showRequiredMark\"),\n      showOptionalMark: that.option(\"showOptionalMark\"),\n      requiredMark: that.option(\"requiredMark\"),\n      optionalMark: that.option(\"optionalMark\"),\n      requiredMessage: that.option(\"requiredMessage\"),\n      screenByWidth: that.option(\"screenByWidth\"),\n      layoutData: that.option(\"formData\"),\n      labelLocation: that.option(\"labelLocation\"),\n      customizeItem: that.option(\"customizeItem\"),\n      minColWidth: that.option(\"minColWidth\"),\n      showColonAfterLabel: that.option(\"showColonAfterLabel\"),\n      onEditorEnterKey: that.option(\"onEditorEnterKey\"),\n      onFieldDataChanged: function onFieldDataChanged(args) {\n        if (!that._isDataUpdating) {\n          that._triggerOnFieldDataChanged(args);\n        }\n      },\n      validationBoundary: that.option(\"scrollingEnabled\") ? that.$element() : void 0\n    };\n    return (0, _extend.extend)(baseConfig, {\n      items: items,\n      onContentReady: function onContentReady(args) {\n        that._itemsRunTimeInfo.addItemsOrExtendFrom(args.component._itemsRunTimeInfo);\n\n        options.onContentReady && options.onContentReady(args);\n      },\n      colCount: options.colCount,\n      alignItemLabels: options.alignItemLabels,\n      cssItemClass: options.cssItemClass,\n      colCountByScreen: options.colCountByScreen,\n      onLayoutChanged: options.onLayoutChanged,\n      width: options.width\n    });\n  },\n  _createComponent: function _createComponent($element, type, config) {\n    var that = this;\n    config = config || {};\n\n    that._extendConfig(config, {\n      readOnly: that.option(\"readOnly\")\n    });\n\n    return that.callBase($element, type, config);\n  },\n  _attachSyncSubscriptions: function _attachSyncSubscriptions() {\n    var that = this;\n    that.on(\"optionChanged\", function (args) {\n      var optionFullName = args.fullName;\n\n      if (\"formData\" === optionFullName) {\n        if (!(0, _type.isDefined)(args.value)) {\n          that._options.formData = args.value = {};\n        }\n\n        that._triggerOnFieldDataChangedByDataSet(args.value);\n      }\n\n      if (that._cachedLayoutManagers.length) {\n        (0, _iterator.each)(that._cachedLayoutManagers, function (index, layoutManager) {\n          if (\"formData\" === optionFullName) {\n            that._isDataUpdating = true;\n            layoutManager.option(\"layoutData\", args.value);\n            that._isDataUpdating = false;\n          }\n\n          if (\"readOnly\" === args.name || \"disabled\" === args.name) {\n            layoutManager.option(optionFullName, args.value);\n          }\n        });\n      }\n    });\n  },\n  _optionChanged: function _optionChanged(args) {\n    var rootNameOfComplexOption = this._getRootLevelOfExpectedComplexOption(args.fullName, [\"formData\", \"items\"]);\n\n    if (rootNameOfComplexOption) {\n      this._customHandlerOfComplexOption(args, rootNameOfComplexOption);\n\n      return;\n    }\n\n    switch (args.name) {\n      case \"formData\":\n        if (!this.option(\"items\")) {\n          this._invalidate();\n        } else {\n          if ((0, _type.isEmptyObject)(args.value)) {\n            this._resetValues();\n          }\n        }\n\n        break;\n\n      case \"items\":\n      case \"colCount\":\n      case \"onFieldDataChanged\":\n      case \"onEditorEnterKey\":\n      case \"labelLocation\":\n      case \"alignItemLabels\":\n      case \"showColonAfterLabel\":\n      case \"customizeItem\":\n      case \"alignItemLabelsInAllGroups\":\n      case \"showRequiredMark\":\n      case \"showOptionalMark\":\n      case \"requiredMark\":\n      case \"optionalMark\":\n      case \"requiredMessage\":\n      case \"scrollingEnabled\":\n      case \"formID\":\n      case \"colCountByScreen\":\n      case \"screenByWidth\":\n      case \"stylingMode\":\n        this._invalidate();\n\n        break;\n\n      case \"showValidationSummary\":\n        this._renderValidationSummary();\n\n        break;\n\n      case \"minColWidth\":\n        if (\"auto\" === this.option(\"colCount\")) {\n          this._invalidate();\n        }\n\n        break;\n\n      case \"readOnly\":\n        break;\n\n      case \"width\":\n        this.callBase(args);\n\n        this._rootLayoutManager.option(args.name, args.value);\n\n        this._alignLabels(this._rootLayoutManager, this._rootLayoutManager.isSingleColumnMode());\n\n        break;\n\n      case \"visible\":\n        this.callBase(args);\n\n        if (args.value) {\n          (0, _dom.triggerShownEvent)(this.$element());\n        }\n\n        break;\n\n      case \"validationGroup\":\n        _validation_engine2.default.removeGroup(args.previousValue || this);\n\n        this._invalidate();\n\n        break;\n\n      default:\n        this.callBase(args);\n    }\n  },\n  _getRootLevelOfExpectedComplexOption: function _getRootLevelOfExpectedComplexOption(fullOptionName, expectedRootNames) {\n    var result,\n        splitFullName = fullOptionName.split(\".\");\n\n    if (splitFullName.length > 1) {\n      var i,\n          rootOptionName = splitFullName[0];\n\n      for (i = 0; i < expectedRootNames.length; i++) {\n        if (rootOptionName.search(expectedRootNames[i]) !== -1) {\n          result = expectedRootNames[i];\n        }\n      }\n    }\n\n    return result;\n  },\n  _tryCreateItemOptionAction: function _tryCreateItemOptionAction(optionName, item, value, previousValue) {\n    return (0, _uiForm6.default)(optionName, {\n      item: item,\n      value: value,\n      previousValue: previousValue,\n      itemsRunTimeInfo: this._itemsRunTimeInfo\n    });\n  },\n  _tryExecuteItemOptionAction: function _tryExecuteItemOptionAction(action) {\n    return action && action.tryExecute();\n  },\n  _customHandlerOfComplexOption: function _customHandlerOfComplexOption(args, rootOptionName) {\n    var nameParts = args.fullName.split(\".\");\n    var value = args.value;\n\n    if (\"items\" === rootOptionName) {\n      var itemPath = this._getItemPath(nameParts);\n\n      var item = this.option(itemPath);\n      var optionNameWithoutPath = args.fullName.replace(itemPath + \".\", \"\");\n      var simpleOptionName = optionNameWithoutPath.split(\".\")[0].replace(/\\[\\d+]/, \"\");\n\n      var itemAction = this._tryCreateItemOptionAction(simpleOptionName, item, item[simpleOptionName], args.previousValue);\n\n      if (!this._tryExecuteItemOptionAction(itemAction) && item) {\n        this._changeItemOption(item, optionNameWithoutPath, value);\n\n        var items = this._generateItemsFromData(this.option(\"items\"));\n\n        this.option(\"items\", items);\n      }\n    }\n\n    if (\"formData\" === rootOptionName) {\n      var dataField = nameParts.slice(1).join(\".\");\n      var editor = this.getEditor(dataField);\n\n      if (editor) {\n        editor.option(\"value\", value);\n      } else {\n        this._triggerOnFieldDataChanged({\n          dataField: dataField,\n          value: value\n        });\n      }\n    }\n  },\n  _getItemPath: function _getItemPath(nameParts) {\n    var i,\n        itemPath = nameParts[0];\n\n    for (i = 1; i < nameParts.length; i++) {\n      if (nameParts[i].search(\"items|tabs\") !== -1) {\n        itemPath += \".\" + nameParts[i];\n      } else {\n        break;\n      }\n    }\n\n    return itemPath;\n  },\n  _triggerOnFieldDataChanged: function _triggerOnFieldDataChanged(args) {\n    this._createActionByOption(\"onFieldDataChanged\")(args);\n  },\n  _triggerOnFieldDataChangedByDataSet: function _triggerOnFieldDataChangedByDataSet(data) {\n    var that = this;\n\n    if (data && (0, _type.isObject)(data)) {\n      (0, _iterator.each)(data, function (dataField, value) {\n        that._triggerOnFieldDataChanged({\n          dataField: dataField,\n          value: value\n        });\n      });\n    }\n  },\n  _updateFieldValue: function _updateFieldValue(dataField, value) {\n    if ((0, _type.isDefined)(this.option(\"formData\"))) {\n      var editor = this.getEditor(dataField);\n      this.option(\"formData.\" + dataField, value);\n\n      if (editor) {\n        var editorValue = editor.option(\"value\");\n\n        if (editorValue !== value) {\n          editor.option(\"value\", value);\n        }\n      }\n    }\n  },\n  _generateItemsFromData: function _generateItemsFromData(items) {\n    var formData = this.option(\"formData\"),\n        result = [];\n\n    if (!items && (0, _type.isDefined)(formData)) {\n      (0, _iterator.each)(formData, function (dataField) {\n        result.push({\n          dataField: dataField\n        });\n      });\n    }\n\n    if (items) {\n      (0, _iterator.each)(items, function (index, item) {\n        if ((0, _type.isObject)(item)) {\n          result.push(item);\n        } else {\n          result.push({\n            dataField: item\n          });\n        }\n      });\n    }\n\n    return result;\n  },\n  _getItemByField: function _getItemByField(field, items) {\n    var resultItem,\n        that = this,\n        fieldParts = (0, _type.isObject)(field) ? field : that._getFieldParts(field),\n        fieldName = fieldParts.fieldName,\n        fieldPath = fieldParts.fieldPath;\n\n    if (items.length) {\n      (0, _iterator.each)(items, function (index, item) {\n        var itemType = item.itemType;\n\n        if (fieldPath.length) {\n          var path = fieldPath.slice();\n          item = that._getItemByFieldPath(path, fieldName, item);\n        } else {\n          if (\"group\" === itemType && !(item.caption || item.name) || \"tabbed\" === itemType) {\n            var subItemsField = that._getSubItemField(itemType);\n\n            item.items = that._generateItemsFromData(item.items);\n            item = that._getItemByField({\n              fieldName: fieldName,\n              fieldPath: fieldPath\n            }, item[subItemsField]);\n          }\n        }\n\n        if (that._isExpectedItem(item, fieldName)) {\n          resultItem = item;\n          return false;\n        }\n      });\n    }\n\n    return resultItem;\n  },\n  _getFieldParts: function _getFieldParts(field) {\n    var fieldSeparator = \".\",\n        fieldName = field,\n        separatorIndex = fieldName.indexOf(fieldSeparator),\n        resultPath = [];\n\n    while (separatorIndex !== -1) {\n      resultPath.push(fieldName.substr(0, separatorIndex));\n      fieldName = fieldName.substr(separatorIndex + 1);\n      separatorIndex = fieldName.indexOf(fieldSeparator);\n    }\n\n    return {\n      fieldName: fieldName,\n      fieldPath: resultPath.reverse()\n    };\n  },\n  _getItemByFieldPath: function _getItemByFieldPath(path, fieldName, item) {\n    var result,\n        that = this,\n        itemType = item.itemType,\n        subItemsField = that._getSubItemField(itemType),\n        isItemWithSubItems = \"group\" === itemType || \"tabbed\" === itemType || item.title;\n\n    do {\n      if (isItemWithSubItems) {\n        var pathNode,\n            name = item.name || item.caption || item.title,\n            isGroupWithName = (0, _type.isDefined)(name),\n            nameWithoutSpaces = that._getTextWithoutSpaces(name);\n\n        item[subItemsField] = that._generateItemsFromData(item[subItemsField]);\n\n        if (isGroupWithName) {\n          pathNode = path.pop();\n        }\n\n        if (!path.length) {\n          result = that._getItemByField(fieldName, item[subItemsField]);\n\n          if (result) {\n            break;\n          }\n        }\n\n        if (!isGroupWithName || isGroupWithName && nameWithoutSpaces === pathNode) {\n          if (path.length) {\n            result = that._searchItemInEverySubItem(path, fieldName, item[subItemsField]);\n          }\n        }\n      } else {\n        break;\n      }\n    } while (path.length && !(0, _type.isDefined)(result));\n\n    return result;\n  },\n  _getSubItemField: function _getSubItemField(itemType) {\n    return \"tabbed\" === itemType ? \"tabs\" : \"items\";\n  },\n  _searchItemInEverySubItem: function _searchItemInEverySubItem(path, fieldName, items) {\n    var result,\n        that = this;\n    (0, _iterator.each)(items, function (index, groupItem) {\n      result = that._getItemByFieldPath(path.slice(), fieldName, groupItem);\n\n      if (result) {\n        return false;\n      }\n    });\n\n    if (!result) {\n      result = false;\n    }\n\n    return result;\n  },\n  _getTextWithoutSpaces: function _getTextWithoutSpaces(text) {\n    return text ? text.replace(/\\s/g, \"\") : void 0;\n  },\n  _isExpectedItem: function _isExpectedItem(item, fieldName) {\n    return item && (item.dataField === fieldName || item.name === fieldName || this._getTextWithoutSpaces(item.title) === fieldName || \"group\" === item.itemType && this._getTextWithoutSpaces(item.caption) === fieldName);\n  },\n  _changeItemOption: function _changeItemOption(item, option, value) {\n    if ((0, _type.isObject)(item)) {\n      item[option] = value;\n    }\n  },\n  _dimensionChanged: function _dimensionChanged() {\n    var currentScreenFactor = this._getCurrentScreenFactor();\n\n    if (this._lastMarkupScreenFactor !== currentScreenFactor) {\n      if (this._isColCountChanged(this._lastMarkupScreenFactor, currentScreenFactor)) {\n        this._targetScreenFactor = currentScreenFactor;\n\n        this._refresh();\n\n        this._targetScreenFactor = void 0;\n      }\n\n      this._lastMarkupScreenFactor = currentScreenFactor;\n    }\n  },\n  _isColCountChanged: function _isColCountChanged(oldScreenSize, newScreenSize) {\n    var isChanged = false;\n    (0, _iterator.each)(this._cachedColCountOptions, function (index, item) {\n      if (item.colCountByScreen[oldScreenSize] !== item.colCountByScreen[newScreenSize]) {\n        isChanged = true;\n        return false;\n      }\n    });\n    return isChanged;\n  },\n  _refresh: function _refresh() {\n    var editorSelector = \".\" + FOCUSED_STATE_CLASS + \" input, .\" + FOCUSED_STATE_CLASS + \" textarea\";\n\n    _events_engine2.default.trigger(this.$element().find(editorSelector), \"change\");\n\n    this.callBase();\n  },\n  _resetValues: function _resetValues() {\n    var validationGroup = this._getValidationGroup(),\n        validationGroupConfig = _validation_engine2.default.getGroupConfig(validationGroup);\n\n    validationGroupConfig && validationGroupConfig.reset();\n\n    this._itemsRunTimeInfo.each(function (_, itemRunTimeInfo) {\n      if ((0, _type.isDefined)(itemRunTimeInfo.widgetInstance) && (0, _type.isDefined)(itemRunTimeInfo.item) && \"button\" !== itemRunTimeInfo.item.itemType) {\n        itemRunTimeInfo.widgetInstance.reset();\n        itemRunTimeInfo.widgetInstance.option(\"isValid\", true);\n      }\n    });\n  },\n  _updateData: function _updateData(data, value, isComplexData) {\n    var that = this,\n        _data = isComplexData ? value : data;\n\n    if ((0, _type.isObject)(_data)) {\n      (0, _iterator.each)(_data, function (dataField, fieldValue) {\n        that._updateData(isComplexData ? data + \".\" + dataField : dataField, fieldValue, (0, _type.isObject)(fieldValue));\n      });\n    } else {\n      if ((0, _type.isString)(data)) {\n        that._updateFieldValue(data, value);\n      }\n    }\n  },\n  registerKeyHandler: function registerKeyHandler(key, handler) {\n    this.callBase(key, handler);\n\n    this._itemsRunTimeInfo.each(function (_, itemRunTimeInfo) {\n      if ((0, _type.isDefined)(itemRunTimeInfo.widgetInstance)) {\n        itemRunTimeInfo.widgetInstance.registerKeyHandler(key, handler);\n      }\n    });\n  },\n  _focusTarget: function _focusTarget() {\n    return this.$element().find(\".\" + FIELD_ITEM_CONTENT_CLASS + \" [tabindex]\").first();\n  },\n  _visibilityChanged: function _visibilityChanged(visible) {\n    if (visible && _browser2.default.msie) {\n      this._refresh();\n    }\n  },\n  _dispose: function _dispose() {\n    _validation_engine2.default.removeGroup(this._getValidationGroup());\n\n    this.callBase();\n  },\n  resetValues: function resetValues() {\n    this._resetValues();\n  },\n  updateData: function updateData(data, value) {\n    this._updateData(data, value);\n  },\n  getEditor: function getEditor(dataField) {\n    return this._itemsRunTimeInfo.findWidgetInstanceByDataField(dataField) || this._itemsRunTimeInfo.findWidgetInstanceByName(dataField);\n  },\n  getButton: function getButton(name) {\n    return this._itemsRunTimeInfo.findWidgetInstanceByName(name);\n  },\n  updateDimensions: function updateDimensions() {\n    var that = this,\n        deferred = new _deferred.Deferred();\n\n    if (that._scrollable) {\n      that._scrollable.update().done(function () {\n        deferred.resolveWith(that);\n      });\n    } else {\n      deferred.resolveWith(that);\n    }\n\n    return deferred.promise();\n  },\n  itemOption: function itemOption(id, option, value) {\n    var _this = this;\n\n    var items = this._generateItemsFromData(this.option(\"items\"));\n\n    var item = this._getItemByField(id, items);\n\n    switch (arguments.length) {\n      case 1:\n        return item;\n\n      case 3:\n        var itemAction = this._tryCreateItemOptionAction(option, item, value, item[option]);\n\n        this._changeItemOption(item, option, value);\n\n        if (!this._tryExecuteItemOptionAction(itemAction)) {\n          this.option(\"items\", items);\n        }\n\n        break;\n\n      default:\n        if ((0, _type.isObject)(option)) {\n          var allowUpdateItems = void 0;\n          (0, _iterator.each)(option, function (optionName, optionValue) {\n            var itemAction = _this._tryCreateItemOptionAction(optionName, item, optionValue, item[optionName]);\n\n            _this._changeItemOption(item, optionName, optionValue);\n\n            if (!allowUpdateItems && !_this._tryExecuteItemOptionAction(itemAction)) {\n              allowUpdateItems = true;\n            }\n          });\n          allowUpdateItems && this.option(\"items\", items);\n        }\n\n    }\n  },\n  validate: function validate() {\n    return _validation_engine2.default.validateGroup(this._getValidationGroup());\n  },\n  getItemID: function getItemID(name) {\n    return \"dx_\" + this.option(\"formID\") + \"_\" + (name || new _guid2.default());\n  },\n  getTargetScreenFactor: function getTargetScreenFactor() {\n    return this._targetScreenFactor;\n  }\n});\n\n(0, _component_registrator2.default)(\"dxForm\", Form);\nmodule.exports = Form;","map":null,"metadata":{},"sourceType":"script"}