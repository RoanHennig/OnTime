{"ast":null,"code":"/**\r\n * DevExtreme (ui/scheduler/tooltip_strategies/desktopTooltipStrategy.js)\r\n * Version: 19.1.6 (build 19263-1729)\r\n * Build date: Fri Sep 20 2019\r\n *\r\n * Copyright (c) 2012 - 2019 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DesktopTooltipStrategy = void 0;\n\nvar _get = function get(object, property, receiver) {\n  if (null === object) {\n    object = Function.prototype;\n  }\n\n  var desc = Object.getOwnPropertyDescriptor(object, property);\n\n  if (void 0 === desc) {\n    var parent = Object.getPrototypeOf(object);\n\n    if (null === parent) {\n      return;\n    } else {\n      return get(parent, property, receiver);\n    }\n  } else {\n    if (\"value\" in desc) {\n      return desc.value;\n    } else {\n      var getter = desc.get;\n\n      if (void 0 === getter) {\n        return;\n      }\n\n      return getter.call(receiver);\n    }\n  }\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n\n      if (\"value\" in descriptor) {\n        descriptor.writable = true;\n      }\n\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) {\n      defineProperties(Constructor.prototype, protoProps);\n    }\n\n    if (staticProps) {\n      defineProperties(Constructor, staticProps);\n    }\n\n    return Constructor;\n  };\n}();\n\nvar _renderer = require(\"../../../core/renderer\");\n\nvar _renderer2 = _interopRequireDefault(_renderer);\n\nvar _tooltipStrategyBase = require(\"./tooltipStrategyBase\");\n\nvar _tooltip = require(\"../../tooltip\");\n\nvar _tooltip2 = _interopRequireDefault(_tooltip);\n\nvar _translator = require(\"../../../animation/translator\");\n\nvar _translator2 = _interopRequireDefault(_translator);\n\nvar _drag = require(\"../../../events/drag\");\n\nvar _drag2 = _interopRequireDefault(_drag);\n\nvar _events_engine = require(\"../../../events/core/events_engine\");\n\nvar _events_engine2 = _interopRequireDefault(_events_engine);\n\nvar _function_template = require(\"../../widget/function_template\");\n\nvar _function_template2 = _interopRequireDefault(_function_template);\n\nvar _support = require(\"../../../core/utils/support\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (\"object\" === typeof call || \"function\" === typeof call) ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (\"function\" !== typeof superClass && null !== superClass) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n\n  if (superClass) {\n    Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n  }\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nvar APPOINTMENT_TOOLTIP_WRAPPER_CLASS = \"dx-scheduler-appointment-tooltip-wrapper\";\nvar ALL_DAY_PANEL_APPOINTMENT_CLASS = \"dx-scheduler-all-day-appointment\";\nvar SCROLLABLE_WRAPPER_CLASS_NAME = \".dx-scheduler-date-table-scrollable .dx-scrollable-wrapper\";\nvar MAX_TOOLTIP_HEIGHT = 200;\n\nvar TooltipBehaviorBase = function () {\n  function TooltipBehaviorBase(scheduler, target) {\n    _classCallCheck(this, TooltipBehaviorBase);\n\n    this.scheduler = scheduler;\n    this.target = target;\n  }\n\n  _createClass(TooltipBehaviorBase, [{\n    key: \"onListItemRendered\",\n    value: function value(e) {}\n  }, {\n    key: \"onListItemClick\",\n    value: function value(e) {}\n  }, {\n    key: \"getItemListTemplateName\",\n    value: function value() {\n      return \"appointmentTooltipTemplate\";\n    }\n  }, {\n    key: \"getItemListDefaultTemplateName\",\n    value: function value() {\n      return \"appointmentTooltip\";\n    }\n  }, {\n    key: \"createFunctionTemplate\",\n    value: function value(template, data, targetData, index) {\n      return (0, _tooltipStrategyBase.createDefaultTooltipTemplate)(template, data, targetData, index);\n    }\n  }]);\n\n  return TooltipBehaviorBase;\n}();\n\nvar TooltipSingleAppointmentBehavior = function (_TooltipBehaviorBase) {\n  _inherits(TooltipSingleAppointmentBehavior, _TooltipBehaviorBase);\n\n  function TooltipSingleAppointmentBehavior() {\n    _classCallCheck(this, TooltipSingleAppointmentBehavior);\n\n    return _possibleConstructorReturn(this, (TooltipSingleAppointmentBehavior.__proto__ || Object.getPrototypeOf(TooltipSingleAppointmentBehavior)).apply(this, arguments));\n  }\n\n  _createClass(TooltipSingleAppointmentBehavior, [{\n    key: \"onListItemClick\",\n    value: function value(e) {\n      this.scheduler.showAppointmentPopup(e.itemData.data, false, e.itemData.currentData);\n    }\n  }, {\n    key: \"canRaiseClickEvent\",\n    value: function value() {\n      return false;\n    }\n  }]);\n\n  return TooltipSingleAppointmentBehavior;\n}(TooltipBehaviorBase);\n\nvar TooltipManyAppointmentsBehavior = function (_TooltipBehaviorBase2) {\n  _inherits(TooltipManyAppointmentsBehavior, _TooltipBehaviorBase2);\n\n  function TooltipManyAppointmentsBehavior() {\n    _classCallCheck(this, TooltipManyAppointmentsBehavior);\n\n    return _possibleConstructorReturn(this, (TooltipManyAppointmentsBehavior.__proto__ || Object.getPrototypeOf(TooltipManyAppointmentsBehavior)).apply(this, arguments));\n  }\n\n  _createClass(TooltipManyAppointmentsBehavior, [{\n    key: \"onListItemRendered\",\n    value: function value(e) {\n      var _this3 = this;\n\n      if (this.scheduler._allowDragging()) {\n        var appData = e.itemData.data;\n\n        _events_engine2.default.on(e.itemElement, _drag2.default.start, function (e) {\n          return _this3._onAppointmentDragStart(appData, appData.settings, e);\n        });\n\n        _events_engine2.default.on(e.itemElement, _drag2.default.move, function (e) {\n          return _this3._onAppointmentDragMove(e, appData.allDay);\n        });\n\n        _events_engine2.default.on(e.itemElement, _drag2.default.end, function () {\n          return _this3._onAppointmentDragEnd(appData);\n        });\n      }\n    }\n  }, {\n    key: \"canRaiseClickEvent\",\n    value: function value() {\n      return true;\n    }\n  }, {\n    key: \"createFunctionTemplate\",\n    value: function value(template, data, targetData, index) {\n      if (this._isEmptyDropDownAppointmentTemplate()) {\n        return _get(TooltipManyAppointmentsBehavior.prototype.__proto__ || Object.getPrototypeOf(TooltipManyAppointmentsBehavior.prototype), \"createFunctionTemplate\", this).call(this, template, data, targetData, index);\n      }\n\n      return new _function_template2.default(function (options) {\n        return template.render({\n          model: data,\n          index: index,\n          container: options.container\n        });\n      });\n    }\n  }, {\n    key: \"getItemListTemplateName\",\n    value: function value() {\n      return this._isEmptyDropDownAppointmentTemplate() ? \"appointmentTooltipTemplate\" : \"dropDownAppointmentTemplate\";\n    }\n  }, {\n    key: \"getItemListDefaultTemplateName\",\n    value: function value() {\n      return this._isEmptyDropDownAppointmentTemplate() ? \"appointmentTooltip\" : \"dropDownAppointment\";\n    }\n  }, {\n    key: \"_isEmptyDropDownAppointmentTemplate\",\n    value: function value() {\n      return \"dropDownAppointment\" === this.scheduler.option(\"dropDownAppointmentTemplate\");\n    }\n  }, {\n    key: \"_onAppointmentDragStart\",\n    value: function value(itemData, settings, eventArgs) {\n      var appointmentInstance = this.scheduler.getAppointmentsInstance(),\n          appointmentIndex = appointmentInstance.option(\"items\").length;\n      settings[0].isCompact = false;\n      settings[0].virtual = false;\n      appointmentInstance._currentAppointmentSettings = settings;\n\n      appointmentInstance._renderItem(appointmentIndex, {\n        itemData: itemData,\n        settings: settings\n      });\n\n      var $items = appointmentInstance._findItemElementByItem(itemData);\n\n      $items.length > 0 && this._prepareDragItem($items, settings, eventArgs);\n      this.scheduler.hideAppointmentTooltip();\n    }\n  }, {\n    key: \"_onAppointmentDragMove\",\n    value: function value(eventArgs, allDay) {\n      var coordinates = {\n        left: this._startPosition.left + eventArgs.offset.x,\n        top: this._startPosition.top + eventArgs.offset.y\n      };\n      this.scheduler.getAppointmentsInstance().notifyObserver(\"correctAppointmentCoordinates\", {\n        coordinates: coordinates,\n        allDay: allDay,\n        isFixedContainer: false,\n        callback: function callback(result) {\n          if (result) {\n            coordinates = result;\n          }\n        }\n      });\n\n      _translator2.default.move(this._$draggedItem, coordinates);\n    }\n  }, {\n    key: \"_onAppointmentDragEnd\",\n    value: function value(itemData) {\n      _events_engine2.default.trigger(this._$draggedItem, _drag2.default.end);\n\n      this._removeFakeAppointmentIfDragEndOnCurrentCell(itemData);\n    }\n  }, {\n    key: \"_removeFakeAppointmentIfDragEndOnCurrentCell\",\n    value: function value(itemData) {\n      var appointments = this.scheduler.getAppointmentsInstance(),\n          newCellIndex = this.scheduler._workSpace.getDroppableCellIndex(),\n          oldCellIndex = this.scheduler._workSpace.getCellIndexByCoordinates(this._startPosition);\n\n      newCellIndex === oldCellIndex && appointments._clearItem({\n        itemData: itemData\n      });\n    }\n  }, {\n    key: \"_prepareDragItem\",\n    value: function value($items, settings, eventArgs) {\n      var dragContainerOffset = this._getDragContainerOffset();\n\n      this._$draggedItem = $items.length > 1 ? this._getRecurrencePart($items, settings[0].startDate) : $items[0];\n      var scrollTop = this._$draggedItem.hasClass(ALL_DAY_PANEL_APPOINTMENT_CLASS) ? this.scheduler._workSpace.getAllDayHeight() : this.scheduler._workSpace.getScrollableScrollTop();\n      this._startPosition = {\n        top: eventArgs.pageY - dragContainerOffset.top - this._$draggedItem.height() / 2 + scrollTop,\n        left: eventArgs.pageX - dragContainerOffset.left - this._$draggedItem.width() / 2\n      };\n\n      _translator2.default.move(this._$draggedItem, this._startPosition);\n\n      _events_engine2.default.trigger(this._$draggedItem, _drag2.default.start);\n    }\n  }, {\n    key: \"_getDragContainerOffset\",\n    value: function value() {\n      return this.scheduler._$element.find(SCROLLABLE_WRAPPER_CLASS_NAME).offset();\n    }\n  }, {\n    key: \"_getRecurrencePart\",\n    value: function value(appointments, startDate) {\n      var result = void 0;\n\n      for (var i = 0; i < appointments.length; i++) {\n        var $appointment = appointments[i],\n            appointmentStartDate = $appointment.data(\"dxAppointmentStartDate\");\n\n        if (appointmentStartDate.getTime() === startDate.getTime()) {\n          result = $appointment;\n        }\n      }\n\n      return result;\n    }\n  }]);\n\n  return TooltipManyAppointmentsBehavior;\n}(TooltipBehaviorBase);\n\nvar DesktopTooltipStrategy = exports.DesktopTooltipStrategy = function (_TooltipStrategyBase) {\n  _inherits(DesktopTooltipStrategy, _TooltipStrategyBase);\n\n  function DesktopTooltipStrategy(scheduler) {\n    _classCallCheck(this, DesktopTooltipStrategy);\n\n    var _this4 = _possibleConstructorReturn(this, (DesktopTooltipStrategy.__proto__ || Object.getPrototypeOf(DesktopTooltipStrategy)).call(this, scheduler));\n\n    _this4.skipHidingOnScroll = false;\n    return _this4;\n  }\n\n  _createClass(DesktopTooltipStrategy, [{\n    key: \"_showCore\",\n    value: function value(target, dataList, isSingleBehavior) {\n      this.behavior = this._createBehavior(isSingleBehavior, target);\n\n      _get(DesktopTooltipStrategy.prototype.__proto__ || Object.getPrototypeOf(DesktopTooltipStrategy.prototype), \"_showCore\", this).call(this, target, dataList, isSingleBehavior);\n\n      this.tooltip.option(\"position\", this._getTooltipPosition(dataList));\n      this.list.focus();\n      this.list.option(\"focusedElement\", null);\n    }\n  }, {\n    key: \"_createBehavior\",\n    value: function value(isSingleBehavior, target) {\n      return isSingleBehavior ? new TooltipSingleAppointmentBehavior(this.scheduler, target) : new TooltipManyAppointmentsBehavior(this.scheduler, target);\n    }\n  }, {\n    key: \"_getTooltipPosition\",\n    value: function value(dataList) {\n      return {\n        my: \"bottom\",\n        at: \"top\",\n        of: this.target,\n        collision: \"fit flipfit\",\n        boundary: this._getBoundary(dataList),\n        offset: this.scheduler.option(\"_appointmentTooltipOffset\")\n      };\n    }\n  }, {\n    key: \"_getBoundary\",\n    value: function value(dataList) {\n      return this._isAppointmentInAllDayPanel(dataList[0].data) ? this.scheduler.$element() : this.scheduler.getWorkSpaceScrollableContainer();\n    }\n  }, {\n    key: \"_isAppointmentInAllDayPanel\",\n    value: function value(appointmentData) {\n      var workSpace = this.scheduler._workSpace,\n          itTakesAllDay = this.scheduler.appointmentTakesAllDay(appointmentData);\n      return itTakesAllDay && workSpace.supportAllDayRow() && workSpace.option(\"showAllDayPanel\");\n    }\n  }, {\n    key: \"_createFunctionTemplate\",\n    value: function value(template, data, targetData, index) {\n      return this.behavior.createFunctionTemplate(template, data, targetData, index);\n    }\n  }, {\n    key: \"_getItemListTemplateName\",\n    value: function value() {\n      return this.behavior.getItemListTemplateName();\n    }\n  }, {\n    key: \"_getItemListDefaultTemplateName\",\n    value: function value() {\n      return this.behavior.getItemListDefaultTemplateName();\n    }\n  }, {\n    key: \"_createListOption\",\n    value: function value(target, dataList) {\n      var result = _get(DesktopTooltipStrategy.prototype.__proto__ || Object.getPrototypeOf(DesktopTooltipStrategy.prototype), \"_createListOption\", this).call(this, target, dataList);\n\n      result.showScrollbar = _support.touch ? \"always\" : \"onHover\";\n      return result;\n    }\n  }, {\n    key: \"_createTooltip\",\n    value: function value(target) {\n      var _this5 = this;\n\n      this.$tooltip = this._createTooltipElement();\n      return this.scheduler._createComponent(this.$tooltip, _tooltip2.default, {\n        target: target,\n        onShowing: this._onTooltipShowing.bind(this),\n        closeOnTargetScroll: function closeOnTargetScroll() {\n          return _this5.skipHidingOnScroll;\n        },\n        maxHeight: MAX_TOOLTIP_HEIGHT,\n        rtlEnabled: this.scheduler.option(\"rtlEnabled\")\n      });\n    }\n  }, {\n    key: \"dispose\",\n    value: function value() {\n      clearTimeout(this.skipHidingOnScrollTimeId);\n    }\n  }, {\n    key: \"_onTooltipShowing\",\n    value: function value() {\n      var _this6 = this;\n\n      clearTimeout(this.skipHidingOnScrollTimeId);\n      this.skipHidingOnScroll = true;\n      this.skipHidingOnScrollTimeId = setTimeout(function () {\n        _this6.skipHidingOnScroll = false;\n        clearTimeout(_this6.skipHidingOnScrollTimeId);\n      }, 0);\n    }\n  }, {\n    key: \"_createTooltipElement\",\n    value: function value() {\n      return (0, _renderer2.default)(\"<div>\").appendTo(this.scheduler.$element()).addClass(APPOINTMENT_TOOLTIP_WRAPPER_CLASS);\n    }\n  }, {\n    key: \"_onListItemRendered\",\n    value: function value(e) {\n      this.behavior.onListItemRendered(e);\n    }\n  }, {\n    key: \"_canRaiseClickEvent\",\n    value: function value() {\n      return this.behavior.canRaiseClickEvent();\n    }\n  }]);\n\n  return DesktopTooltipStrategy;\n}(_tooltipStrategyBase.TooltipStrategyBase);","map":null,"metadata":{},"sourceType":"script"}