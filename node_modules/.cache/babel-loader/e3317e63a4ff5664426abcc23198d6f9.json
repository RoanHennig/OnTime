{"ast":null,"code":"/**\r\n * DevExtreme (ui/button.js)\r\n * Version: 19.1.6 (build 19263-1729)\r\n * Build date: Fri Sep 20 2019\r\n *\r\n * Copyright (c) 2012 - 2019 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar $ = require(\"../core/renderer\"),\n    eventsEngine = require(\"../events/core/events_engine\"),\n    iconUtils = require(\"../core/utils/icon\"),\n    domUtils = require(\"../core/utils/dom\"),\n    devices = require(\"../core/devices\"),\n    registerComponent = require(\"../core/component_registrator\"),\n    extend = require(\"../core/utils/extend\").extend,\n    ValidationMixin = require(\"./validation/validation_mixin\"),\n    ValidationEngine = require(\"./validation_engine\"),\n    Widget = require(\"./widget/ui.widget\"),\n    inkRipple = require(\"./widget/utils.ink_ripple\"),\n    eventUtils = require(\"../events/utils\"),\n    themes = require(\"./themes\"),\n    clickEvent = require(\"../events/click\"),\n    FunctionTemplate = require(\"./widget/function_template\");\n\nvar BUTTON_CLASS = \"dx-button\",\n    BUTTON_CONTENT_CLASS = \"dx-button-content\",\n    BUTTON_HAS_TEXT_CLASS = \"dx-button-has-text\",\n    BUTTON_HAS_ICON_CLASS = \"dx-button-has-icon\",\n    BUTTON_ICON_RIGHT_CLASS = \"dx-button-icon-right\",\n    ICON_RIGHT_CLASS = \"dx-icon-right\",\n    BUTTON_STYLING_MODE_CLASS_PREFIX = \"dx-button-mode-\",\n    ALLOWED_STYLE_CLASSES = [BUTTON_STYLING_MODE_CLASS_PREFIX + \"contained\", BUTTON_STYLING_MODE_CLASS_PREFIX + \"text\", BUTTON_STYLING_MODE_CLASS_PREFIX + \"outlined\"],\n    TEMPLATE_WRAPPER_CLASS = \"dx-template-wrapper\",\n    BUTTON_TEXT_CLASS = \"dx-button-text\",\n    ANONYMOUS_TEMPLATE_NAME = \"content\",\n    BUTTON_LEFT_ICON_POSITION = \"left\",\n    BUTTON_FEEDBACK_HIDE_TIMEOUT = 100;\nvar Button = Widget.inherit({\n  _supportedKeys: function _supportedKeys() {\n    var that = this,\n        click = function click(e) {\n      e.preventDefault();\n\n      that._executeClickAction(e);\n    };\n\n    return extend(this.callBase(), {\n      space: click,\n      enter: click\n    });\n  },\n  _setDeprecatedOptions: function _setDeprecatedOptions() {\n    this.callBase();\n  },\n  _getDefaultOptions: function _getDefaultOptions() {\n    return extend(this.callBase(), {\n      hoverStateEnabled: true,\n      onClick: null,\n      type: \"normal\",\n      text: \"\",\n      icon: \"\",\n      iconPosition: BUTTON_LEFT_ICON_POSITION,\n      validationGroup: void 0,\n      activeStateEnabled: true,\n      template: \"content\",\n      useSubmitBehavior: false,\n      useInkRipple: false,\n      stylingMode: \"contained\"\n    });\n  },\n  _defaultOptionsRules: function _defaultOptionsRules() {\n    return this.callBase().concat([{\n      device: function device() {\n        return \"desktop\" === devices.real().deviceType && !devices.isSimulator();\n      },\n      options: {\n        focusStateEnabled: true\n      }\n    }, {\n      device: function device() {\n        var themeName = themes.current();\n        return themes.isMaterial(themeName);\n      },\n      options: {\n        useInkRipple: true\n      }\n    }]);\n  },\n  _getAnonymousTemplateName: function _getAnonymousTemplateName() {\n    return ANONYMOUS_TEMPLATE_NAME;\n  },\n  _feedbackHideTimeout: BUTTON_FEEDBACK_HIDE_TIMEOUT,\n  _initTemplates: function _initTemplates() {\n    this.callBase();\n    var that = this;\n    this._defaultTemplates.content = new FunctionTemplate(function (options) {\n      var data = options.model,\n          $iconElement = iconUtils.getImageContainer(data && data.icon),\n          $textContainer = data && data.text ? $(\"<span>\").text(data.text).addClass(BUTTON_TEXT_CLASS) : void 0,\n          $container = $(options.container);\n      $container.append($textContainer);\n\n      if (that.option(\"iconPosition\") === BUTTON_LEFT_ICON_POSITION) {\n        $container.prepend($iconElement);\n      } else {\n        $iconElement.addClass(ICON_RIGHT_CLASS);\n        $container.append($iconElement);\n      }\n    }, this);\n  },\n  _initMarkup: function _initMarkup() {\n    this.$element().addClass(BUTTON_CLASS);\n\n    this._renderType();\n\n    this._renderStylingMode();\n\n    this.option(\"useInkRipple\") && this._renderInkRipple();\n\n    this._renderClick();\n\n    this.setAria(\"role\", \"button\");\n\n    this._updateAriaLabel();\n\n    this.callBase();\n\n    this._updateContent();\n  },\n  _renderInkRipple: function _renderInkRipple() {\n    var isOnlyIconButton = !this.option(\"text\") && this.option(\"icon\") || \"back\" === this.option(\"type\"),\n        config = {};\n\n    if (isOnlyIconButton) {\n      extend(config, {\n        waveSizeCoefficient: 1,\n        useHoldAnimation: false,\n        isCentered: true\n      });\n    }\n\n    this._inkRipple = inkRipple.render(config);\n  },\n  _toggleActiveState: function _toggleActiveState($element, value, e) {\n    this.callBase.apply(this, arguments);\n\n    if (!this._inkRipple) {\n      return;\n    }\n\n    var config = {\n      element: this._$content,\n      event: e\n    };\n\n    if (value) {\n      this._inkRipple.showWave(config);\n    } else {\n      this._inkRipple.hideWave(config);\n    }\n  },\n  _updateContent: function _updateContent() {\n    var $element = this.$element(),\n        data = this._getContentData();\n\n    if (this._$content) {\n      this._$content.empty();\n    } else {\n      this._$content = $(\"<div>\").addClass(BUTTON_CONTENT_CLASS).appendTo($element);\n    }\n\n    $element.toggleClass(BUTTON_HAS_ICON_CLASS, !!data.icon).toggleClass(BUTTON_ICON_RIGHT_CLASS, !!data.icon && this.option(\"iconPosition\") !== BUTTON_LEFT_ICON_POSITION).toggleClass(BUTTON_HAS_TEXT_CLASS, !!data.text);\n\n    var transclude = this._getAnonymousTemplateName() === this.option(\"template\"),\n        template = this._getTemplateByOption(\"template\"),\n        $result = $(template.render({\n      model: data,\n      container: domUtils.getPublicElement(this._$content),\n      transclude: transclude\n    }));\n\n    if ($result.hasClass(TEMPLATE_WRAPPER_CLASS)) {\n      this._$content.replaceWith($result);\n\n      this._$content = $result;\n\n      this._$content.addClass(BUTTON_CONTENT_CLASS);\n    }\n\n    if (this.option(\"useSubmitBehavior\")) {\n      this._renderSubmitInput();\n    }\n  },\n  _renderSubmitInput: function _renderSubmitInput() {\n    var submitAction = this._createAction(function (args) {\n      var e = args.event,\n          validationGroup = ValidationEngine.getGroupConfig(args.component._findGroup());\n\n      if (validationGroup && !validationGroup.validate().isValid) {\n        e.preventDefault();\n      }\n\n      e.stopPropagation();\n    });\n\n    this._$submitInput = $(\"<input>\").attr(\"type\", \"submit\").attr(\"tabindex\", -1).addClass(\"dx-button-submit-input\").appendTo(this._$content);\n    eventsEngine.on(this._$submitInput, \"click\", function (e) {\n      submitAction({\n        event: e\n      });\n    });\n  },\n  _getContentData: function _getContentData() {\n    var icon = this.option(\"icon\"),\n        text = this.option(\"text\"),\n        back = \"back\" === this.option(\"type\");\n\n    if (back && !icon) {\n      icon = \"back\";\n    }\n\n    return {\n      icon: icon,\n      text: text\n    };\n  },\n  _renderClick: function _renderClick() {\n    var that = this,\n        eventName = eventUtils.addNamespace(clickEvent.name, this.NAME),\n        actionConfig = {\n      excludeValidators: [\"readOnly\"]\n    };\n\n    if (this.option(\"useSubmitBehavior\")) {\n      actionConfig.afterExecute = function (e) {\n        setTimeout(function () {\n          e.component._$submitInput.get(0).click();\n        });\n      };\n    }\n\n    this._clickAction = this._createActionByOption(\"onClick\", actionConfig);\n    eventsEngine.off(this.$element(), eventName);\n    eventsEngine.on(this.$element(), eventName, function (e) {\n      that._executeClickAction(e);\n    });\n  },\n  _executeClickAction: function _executeClickAction(e) {\n    this._clickAction({\n      event: e,\n      validationGroup: ValidationEngine.getGroupConfig(this._findGroup())\n    });\n  },\n  _updateAriaLabel: function _updateAriaLabel() {\n    var icon = this.option(\"icon\"),\n        text = this.option(\"text\");\n\n    if (\"image\" === iconUtils.getImageSourceType(icon)) {\n      if (icon.indexOf(\"base64\") === -1) {\n        icon = icon.replace(/.+\\/([^.]+)\\..+$/, \"$1\");\n      } else {\n        icon = \"Base64\";\n      }\n    }\n\n    var ariaLabel = text || icon || \"\";\n    ariaLabel = ariaLabel.toString().trim();\n    this.setAria(\"label\", ariaLabel.length ? ariaLabel : null);\n  },\n  _renderType: function _renderType() {\n    var type = this.option(\"type\");\n\n    if (type) {\n      this.$element().addClass(\"dx-button-\" + type);\n    }\n  },\n  _renderStylingMode: function _renderStylingMode() {\n    var _this = this;\n\n    var optionName = \"stylingMode\";\n    ALLOWED_STYLE_CLASSES.forEach(function (className) {\n      return _this.$element().removeClass(className);\n    });\n    var stylingModeClass = BUTTON_STYLING_MODE_CLASS_PREFIX + this.option(optionName);\n\n    if (ALLOWED_STYLE_CLASSES.indexOf(stylingModeClass) === -1) {\n      var defaultOptionValue = this._getDefaultOptions()[optionName];\n\n      stylingModeClass = BUTTON_STYLING_MODE_CLASS_PREFIX + defaultOptionValue;\n    }\n\n    this.$element().addClass(stylingModeClass);\n  },\n  _refreshType: function _refreshType(prevType) {\n    var type = this.option(\"type\");\n    prevType && this.$element().removeClass(\"dx-button-\" + prevType).addClass(\"dx-button-\" + type);\n\n    if (!this.$element().hasClass(BUTTON_HAS_ICON_CLASS) && \"back\" === type) {\n      this._updateContent();\n    }\n  },\n  _optionChanged: function _optionChanged(args) {\n    switch (args.name) {\n      case \"onClick\":\n        this._renderClick();\n\n        break;\n\n      case \"icon\":\n      case \"text\":\n        this._updateContent();\n\n        this._updateAriaLabel();\n\n        break;\n\n      case \"type\":\n        this._refreshType(args.previousValue);\n\n        this._updateContent();\n\n        this._updateAriaLabel();\n\n        break;\n\n      case \"template\":\n      case \"iconPosition\":\n        this._updateContent();\n\n        break;\n\n      case \"stylingMode\":\n        this._renderStylingMode();\n\n        break;\n\n      case \"useInkRipple\":\n      case \"useSubmitBehavior\":\n        this._invalidate();\n\n        break;\n\n      default:\n        this.callBase(args);\n    }\n  },\n  _clean: function _clean() {\n    delete this._inkRipple;\n    this.callBase();\n    delete this._$content;\n  }\n}).include(ValidationMixin);\nregisterComponent(\"dxButton\", Button);\nmodule.exports = Button;\nmodule.exports.default = module.exports;","map":null,"metadata":{},"sourceType":"script"}