{"ast":null,"code":"import _defineProperty from \"C:\\\\Users\\\\Roan\\\\Documents\\\\GitHub\\\\OnTimeReactFrontEnd\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport firebaseService from 'app/services/firebaseService';\nimport * as UserActions from './user.actions';\nimport * as Actions from 'app/store/actions';\nimport jwtService from 'app/services/jwtService';\nexport var REGISTER_ERROR = 'REGISTER_ERROR';\nexport var REGISTER_SUCCESS = 'REGISTER_SUCCESS';\nexport function submitRegister(_ref) {\n  var displayName = _ref.displayName,\n      password = _ref.password,\n      email = _ref.email;\n  return function (dispatch) {\n    return jwtService.createUser({\n      displayName: displayName,\n      password: password,\n      email: email\n    }).then(function (user) {\n      dispatch(UserActions.setUserData(user));\n      return dispatch({\n        type: REGISTER_SUCCESS\n      });\n    }).catch(function (error) {\n      return dispatch({\n        type: REGISTER_ERROR,\n        payload: error\n      });\n    });\n  };\n}\nexport function registerWithFirebase(model) {\n  var email = model.email,\n      password = model.password,\n      displayName = model.displayName;\n  return function (dispatch) {\n    return firebaseService.auth && firebaseService.auth.createUserWithEmailAndPassword(email, password).then(function (response) {\n      dispatch(UserActions.createUserSettingsFirebase(_objectSpread({}, response.user, {\n        displayName: displayName,\n        email: email\n      })));\n      return dispatch({\n        type: REGISTER_SUCCESS\n      });\n    }).catch(function (error) {\n      var usernameErrorCodes = ['auth/operation-not-allowed', 'auth/user-not-found', 'auth/user-disabled'];\n      var emailErrorCodes = ['auth/email-already-in-use', 'auth/invalid-email'];\n      var passwordErrorCodes = ['auth/weak-password', 'auth/wrong-password'];\n      var response = {\n        email: emailErrorCodes.includes(error.code) ? error.message : null,\n        displayName: usernameErrorCodes.includes(error.code) ? error.message : null,\n        password: passwordErrorCodes.includes(error.code) ? error.message : null\n      };\n\n      if (error.code === 'auth/invalid-api-key') {\n        dispatch(Actions.showMessage({\n          message: error.message\n        }));\n      }\n\n      return dispatch({\n        type: REGISTER_ERROR,\n        payload: response\n      });\n    });\n  };\n}","map":{"version":3,"sources":["C:\\Users\\Roan\\Documents\\GitHub\\OnTimeReactFrontEnd\\src\\app\\auth\\store\\actions\\register.actions.js"],"names":["firebaseService","UserActions","Actions","jwtService","REGISTER_ERROR","REGISTER_SUCCESS","submitRegister","displayName","password","email","dispatch","createUser","then","user","setUserData","type","catch","error","payload","registerWithFirebase","model","auth","createUserWithEmailAndPassword","response","createUserSettingsFirebase","usernameErrorCodes","emailErrorCodes","passwordErrorCodes","includes","code","message","showMessage"],"mappings":"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","sourcesContent":["import firebaseService from 'app/services/firebaseService';\r\nimport * as UserActions from './user.actions';\r\nimport * as Actions from 'app/store/actions';\r\nimport jwtService from 'app/services/jwtService';\r\n\r\nexport const REGISTER_ERROR = 'REGISTER_ERROR';\r\nexport const REGISTER_SUCCESS = 'REGISTER_SUCCESS';\r\n\r\nexport function submitRegister({displayName, password, email})\r\n{\r\n    return (dispatch) =>\r\n        jwtService.createUser({\r\n            displayName,\r\n            password,\r\n            email\r\n        })\r\n            .then((user) => {\r\n                    dispatch(UserActions.setUserData(user));\r\n                    return dispatch({\r\n                        type: REGISTER_SUCCESS\r\n                    });\r\n                }\r\n            )\r\n            .catch(error => {\r\n                return dispatch({\r\n                    type   : REGISTER_ERROR,\r\n                    payload: error\r\n                });\r\n            });\r\n}\r\n\r\nexport function registerWithFirebase(model)\r\n{\r\n    const {email, password, displayName} = model;\r\n    return (dispatch) =>\r\n        firebaseService.auth && firebaseService.auth.createUserWithEmailAndPassword(email, password)\r\n            .then(response => {\r\n\r\n                dispatch(UserActions.createUserSettingsFirebase({\r\n                    ...response.user,\r\n                    displayName,\r\n                    email\r\n                }));\r\n\r\n                return dispatch({\r\n                    type: REGISTER_SUCCESS\r\n                });\r\n            })\r\n            .catch(error => {\r\n                const usernameErrorCodes = [\r\n                    'auth/operation-not-allowed',\r\n                    'auth/user-not-found',\r\n                    'auth/user-disabled'\r\n                ];\r\n\r\n                const emailErrorCodes = [\r\n                    'auth/email-already-in-use',\r\n                    'auth/invalid-email'\r\n                ];\r\n\r\n                const passwordErrorCodes = [\r\n                    'auth/weak-password',\r\n                    'auth/wrong-password'\r\n                ];\r\n\r\n                const response = {\r\n                    email      : emailErrorCodes.includes(error.code) ? error.message : null,\r\n                    displayName: usernameErrorCodes.includes(error.code) ? error.message : null,\r\n                    password   : passwordErrorCodes.includes(error.code) ? error.message : null\r\n                };\r\n\r\n                if ( error.code === 'auth/invalid-api-key' )\r\n                {\r\n                    dispatch(Actions.showMessage({message: error.message}));\r\n                }\r\n\r\n                return dispatch({\r\n                    type   : REGISTER_ERROR,\r\n                    payload: response\r\n                });\r\n            });\r\n}\r\n"]},"metadata":{},"sourceType":"module"}