{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\Roan\\\\Documents\\\\GitHub\\\\OnTimeReactFrontEnd\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\Roan\\\\Documents\\\\GitHub\\\\OnTimeReactFrontEnd\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\Roan\\\\Documents\\\\GitHub\\\\OnTimeReactFrontEnd\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\Roan\\\\Documents\\\\GitHub\\\\OnTimeReactFrontEnd\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\Roan\\\\Documents\\\\GitHub\\\\OnTimeReactFrontEnd\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\Roan\\\\Documents\\\\GitHub\\\\OnTimeReactFrontEnd\\\\src\\\\app\\\\auth\\\\Auth.js\";\nimport React, { Component } from 'react';\nimport history from '@history';\nimport { FuseSplashScreen } from '@fuse';\nimport { connect } from 'react-redux';\nimport * as userActions from 'app/auth/store/actions';\nimport { bindActionCreators } from 'redux';\nimport * as Actions from 'app/store/actions';\nimport firebaseService from 'app/services/firebaseService';\nimport auth0Service from 'app/services/auth0Service';\nimport jwtService from 'app/services/jwtService';\n\nvar Auth =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Auth, _Component);\n\n  function Auth() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Auth);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Auth)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      waitAuthCheck: true,\n      isRegistrationComplete: false\n    };\n\n    _this.jwtCheck = function () {\n      return new Promise(function (resolve) {\n        jwtService.on('onAutoLogin', function () {\n          _this.props.showMessage({\n            message: 'Logging in with JWT'\n          });\n          /**\r\n           * Sign in and retrieve user data from Api\r\n           */\n\n\n          jwtService.signInWithToken().then(function (user) {\n            _this.props.setUserData(user);\n\n            resolve();\n\n            _this.props.showMessage({\n              message: 'Logged in with JWT'\n            });\n          }).catch(function (error) {\n            _this.props.showMessage({\n              message: error\n            });\n\n            resolve();\n          });\n        });\n        jwtService.on('onAutoLogout', function (message) {\n          if (message) {\n            _this.props.showMessage({\n              message: message\n            });\n          }\n\n          _this.props.logout();\n\n          resolve();\n        });\n        jwtService.on('onNoAccessToken', function () {\n          resolve();\n        });\n        jwtService.init();\n        return Promise.resolve();\n      });\n    };\n\n    _this.auth0Check = function () {\n      return new Promise(function (resolve) {\n        auth0Service.init(function (success) {\n          if (!success) {\n            resolve();\n          }\n        });\n\n        if (auth0Service.isAuthenticated()) {\n          _this.props.showMessage({\n            message: 'Logging in with Auth0'\n          });\n          /**\r\n           * Retrieve user data from Auth0\r\n           */\n\n\n          auth0Service.getUserData().then(function (tokenData) {\n            _this.props.setUserDataAuth0(tokenData);\n\n            resolve();\n\n            _this.props.showMessage({\n              message: 'Logged in with Auth0'\n            });\n          });\n\n          if (!_this.state.isRegistrationComplete) {\n            history.push({\n              pathname: '/business-setup'\n            });\n\n            _this.props.showMessage({\n              message: 'Registration Incomplete'\n            });\n          }\n        } else {\n          resolve();\n        }\n\n        return Promise.resolve();\n      });\n    };\n\n    _this.firebaseCheck = function () {\n      return new Promise(function (resolve) {\n        firebaseService.init(function (success) {\n          if (!success) {\n            resolve();\n          }\n        });\n        firebaseService.onAuthStateChanged(function (authUser) {\n          if (authUser) {\n            _this.props.showMessage({\n              message: 'Logging in with Firebase'\n            });\n            /**\r\n             * Retrieve user data from Firebase\r\n             */\n\n\n            firebaseService.getUserData(authUser.uid).then(function (user) {\n              _this.props.setUserDataFirebase(user, authUser);\n\n              resolve();\n\n              _this.props.showMessage({\n                message: 'Logged in with Firebase'\n              });\n            }, function (error) {\n              resolve();\n            });\n          } else {\n            resolve();\n          }\n        });\n        return Promise.resolve();\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(Auth, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      return Promise.all([// Comment the lines which you do not use\n      //this.firebaseCheck(),\n      this.auth0Check()]).then(function () {\n        _this2.setState({\n          waitAuthCheck: false,\n          isRegistrationComplete: auth0Service.isRegistrationComplete\n        });\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return this.state.waitAuthCheck ? React.createElement(FuseSplashScreen, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164\n        },\n        __self: this\n      }) : React.createElement(React.Fragment, {\n        children: this.props.children,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164\n        },\n        __self: this\n      });\n    }\n  }]);\n\n  return Auth;\n}(Component);\n\nfunction mapDispatchToProps(dispatch) {\n  return bindActionCreators({\n    logout: userActions.logoutUser,\n    setUserData: userActions.setUserData,\n    setUserDataAuth0: userActions.setUserDataAuth0,\n    setUserDataFirebase: userActions.setUserDataFirebase,\n    showMessage: Actions.showMessage,\n    hideMessage: Actions.hideMessage\n  }, dispatch);\n}\n\nexport default connect(null, mapDispatchToProps)(Auth);","map":{"version":3,"sources":["C:\\Users\\Roan\\Documents\\GitHub\\OnTimeReactFrontEnd\\src\\app\\auth\\Auth.js"],"names":["React","Component","history","FuseSplashScreen","connect","userActions","bindActionCreators","Actions","firebaseService","auth0Service","jwtService","Auth","state","waitAuthCheck","isRegistrationComplete","jwtCheck","Promise","resolve","on","props","showMessage","message","signInWithToken","then","user","setUserData","catch","error","logout","init","auth0Check","success","isAuthenticated","getUserData","tokenData","setUserDataAuth0","push","pathname","firebaseCheck","onAuthStateChanged","authUser","uid","setUserDataFirebase","all","setState","children","mapDispatchToProps","dispatch","logoutUser","hideMessage"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\r\nimport history from '@history';\r\nimport {FuseSplashScreen} from '@fuse';\r\nimport {connect} from 'react-redux';\r\nimport * as userActions from 'app/auth/store/actions';\r\nimport {bindActionCreators} from 'redux';\r\nimport * as Actions from 'app/store/actions';\r\nimport firebaseService from 'app/services/firebaseService';\r\nimport auth0Service from 'app/services/auth0Service';\r\nimport jwtService from 'app/services/jwtService';\r\n\r\nclass Auth extends Component {\r\n\r\n    state = {\r\n        waitAuthCheck: true,\r\n        isRegistrationComplete: false\r\n    }\r\n\r\n    componentDidMount()\r\n    {\r\n        return Promise.all([\r\n            // Comment the lines which you do not use\r\n            //this.firebaseCheck(),\r\n            this.auth0Check(),\r\n            //this.jwtCheck()\r\n        ]).then(() => {\r\n            this.setState({waitAuthCheck: false, isRegistrationComplete:auth0Service.isRegistrationComplete})\r\n        })\r\n    }\r\n\r\n    jwtCheck = () => new Promise(resolve => {\r\n\r\n        jwtService.on('onAutoLogin', () => {\r\n\r\n            this.props.showMessage({message: 'Logging in with JWT'});\r\n\r\n            /**\r\n             * Sign in and retrieve user data from Api\r\n             */\r\n            jwtService.signInWithToken()\r\n                .then(user => {\r\n\r\n                    this.props.setUserData(user);\r\n\r\n                    resolve();\r\n\r\n                    this.props.showMessage({message: 'Logged in with JWT'});\r\n                })\r\n                .catch(error => {\r\n\r\n                    this.props.showMessage({message: error});\r\n\r\n                    resolve();\r\n                })\r\n        });\r\n\r\n        jwtService.on('onAutoLogout', (message) => {\r\n\r\n            if ( message )\r\n            {\r\n                this.props.showMessage({message});\r\n            }\r\n\r\n            this.props.logout();\r\n\r\n            resolve();\r\n        });\r\n\r\n        jwtService.on('onNoAccessToken', () => {\r\n\r\n            resolve();\r\n        });\r\n\r\n        jwtService.init();\r\n\r\n        return Promise.resolve();\r\n    })\r\n\r\n    auth0Check = () => new Promise(resolve => {\r\n        auth0Service.init(\r\n            success => {\r\n                if ( !success )\r\n                {\r\n                    resolve();\r\n                }\r\n            }\r\n        );\r\n\r\n        if ( auth0Service.isAuthenticated() )\r\n        {\r\n            this.props.showMessage({message: 'Logging in with Auth0'});\r\n\r\n            /**\r\n             * Retrieve user data from Auth0\r\n             */\r\n            auth0Service.getUserData().then(tokenData => {\r\n\r\n                this.props.setUserDataAuth0(tokenData);\r\n\r\n                resolve();\r\n\r\n                this.props.showMessage({message: 'Logged in with Auth0'});\r\n            })\r\n\r\n            if(!this.state.isRegistrationComplete){\r\n                history.push({\r\n                    pathname: '/business-setup'\r\n                });\r\n    \r\n                this.props.showMessage({message: 'Registration Incomplete'});\r\n            }\r\n        }\r\n        else\r\n        {\r\n            resolve();\r\n        }\r\n\r\n        return Promise.resolve();\r\n    })\r\n\r\n    firebaseCheck = () => new Promise(resolve => {\r\n\r\n        firebaseService.init(\r\n            success => {\r\n                if ( !success )\r\n                {\r\n                    resolve();\r\n                }\r\n            }\r\n        );\r\n\r\n        firebaseService.onAuthStateChanged(authUser => {\r\n            if ( authUser )\r\n            {\r\n\r\n                this.props.showMessage({message: 'Logging in with Firebase'});\r\n\r\n                /**\r\n                 * Retrieve user data from Firebase\r\n                 */\r\n                firebaseService.getUserData(authUser.uid).then(user => {\r\n\r\n                    this.props.setUserDataFirebase(user, authUser);\r\n\r\n                    resolve();\r\n\r\n                    this.props.showMessage({message: 'Logged in with Firebase'});\r\n                }, error => {\r\n\r\n                    resolve();\r\n                })\r\n            }\r\n            else\r\n            {\r\n                resolve();\r\n            }\r\n        });\r\n\r\n        return Promise.resolve();\r\n    })\r\n\r\n    render()\r\n    {\r\n        return this.state.waitAuthCheck ? <FuseSplashScreen/> : <React.Fragment children={this.props.children}/>;\r\n    }\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch)\r\n{\r\n    return bindActionCreators({\r\n            logout             : userActions.logoutUser,\r\n            setUserData        : userActions.setUserData,\r\n            setUserDataAuth0   : userActions.setUserDataAuth0,\r\n            setUserDataFirebase: userActions.setUserDataFirebase,\r\n            showMessage        : Actions.showMessage,\r\n            hideMessage        : Actions.hideMessage\r\n        },\r\n        dispatch);\r\n}\r\n\r\nexport default connect(null, mapDispatchToProps)(Auth);\r\n"]},"metadata":{},"sourceType":"module"}