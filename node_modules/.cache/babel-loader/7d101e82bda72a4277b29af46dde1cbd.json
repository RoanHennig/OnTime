{"ast":null,"code":"/**\r\n * DevExtreme (ui/scheduler/tooltip_strategies/tooltipStrategyBase.js)\r\n * Version: 19.1.6 (build 19263-1729)\r\n * Build date: Fri Sep 20 2019\r\n *\r\n * Copyright (c) 2012 - 2019 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TooltipStrategyBase = exports.createDefaultTooltipTemplate = void 0;\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n\n      if (\"value\" in descriptor) {\n        descriptor.writable = true;\n      }\n\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) {\n      defineProperties(Constructor.prototype, protoProps);\n    }\n\n    if (staticProps) {\n      defineProperties(Constructor, staticProps);\n    }\n\n    return Constructor;\n  };\n}();\n\nvar _button = require(\"../../button\");\n\nvar _button2 = _interopRequireDefault(_button);\n\nvar _date = require(\"../../../core/utils/date\");\n\nvar _date2 = _interopRequireDefault(_date);\n\nvar _function_template = require(\"../../widget/function_template\");\n\nvar _function_template2 = _interopRequireDefault(_function_template);\n\nvar _renderer = require(\"../../../core/renderer\");\n\nvar _renderer2 = _interopRequireDefault(_renderer);\n\nvar _uiList = require(\"../../list/ui.list.edit\");\n\nvar _uiList2 = _interopRequireDefault(_uiList);\n\nvar _extend = require(\"../../../core/utils/extend\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nvar TOOLTIP_APPOINTMENT_ITEM = \"dx-tooltip-appointment-item\",\n    TOOLTIP_APPOINTMENT_ITEM_CONTENT = TOOLTIP_APPOINTMENT_ITEM + \"-content\",\n    TOOLTIP_APPOINTMENT_ITEM_CONTENT_SUBJECT = TOOLTIP_APPOINTMENT_ITEM + \"-content-subject\",\n    TOOLTIP_APPOINTMENT_ITEM_CONTENT_DATE = TOOLTIP_APPOINTMENT_ITEM + \"-content-date\",\n    TOOLTIP_APPOINTMENT_ITEM_MARKER = TOOLTIP_APPOINTMENT_ITEM + \"-marker\",\n    TOOLTIP_APPOINTMENT_ITEM_MARKER_BODY = TOOLTIP_APPOINTMENT_ITEM + \"-marker-body\",\n    TOOLTIP_APPOINTMENT_ITEM_DELETE_BUTTON_CONTAINER = TOOLTIP_APPOINTMENT_ITEM + \"-delete-button-container\",\n    TOOLTIP_APPOINTMENT_ITEM_DELETE_BUTTON = TOOLTIP_APPOINTMENT_ITEM + \"-delete-button\";\n\nvar createDefaultTooltipTemplate = exports.createDefaultTooltipTemplate = function (template, data, targetData, index) {\n  return new _function_template2.default(function (options) {\n    return template.render({\n      model: data,\n      targetedAppointmentData: targetData,\n      container: options.container,\n      currentIndex: index\n    });\n  });\n};\n\nvar TooltipStrategyBase = exports.TooltipStrategyBase = function () {\n  function TooltipStrategyBase(scheduler) {\n    _classCallCheck(this, TooltipStrategyBase);\n\n    this.scheduler = scheduler;\n  }\n\n  _createClass(TooltipStrategyBase, [{\n    key: \"show\",\n    value: function value(target, dataList, isSingleItemBehavior) {\n      if (this._canShowTooltip(target, dataList)) {\n        this.hide();\n\n        this._showCore(target, dataList, isSingleItemBehavior);\n      }\n    }\n  }, {\n    key: \"_showCore\",\n    value: function value(target, dataList, isSingleItemBehavior) {\n      var _this = this;\n\n      if (!this.tooltip) {\n        this.tooltip = this._createTooltip(target);\n        this.list = this._createList(dataList);\n        this.tooltip.option(\"contentTemplate\", function () {\n          return _this.list.$element();\n        });\n      } else {\n        this._shouldUseTarget() && this.tooltip.option(\"target\", target);\n        this.list.option(\"dataSource\", dataList);\n      }\n\n      this.tooltip.option(\"visible\", true);\n      this.list.option(\"focusStateEnabled\", this.scheduler.option(\"focusStateEnabled\"));\n    }\n  }, {\n    key: \"dispose\",\n    value: function value() {}\n  }, {\n    key: \"hide\",\n    value: function value() {\n      if (this.tooltip) {\n        this.tooltip.option(\"visible\", false);\n      }\n    }\n  }, {\n    key: \"_shouldUseTarget\",\n    value: function value() {\n      return true;\n    }\n  }, {\n    key: \"_createTooltip\",\n    value: function value(target, list) {}\n  }, {\n    key: \"_canShowTooltip\",\n    value: function value(target, dataList) {\n      if (!dataList.length || this.tooltip && this.tooltip.option(\"visible\") && (0, _renderer2.default)(this.tooltip.option(\"target\")).get(0) === (0, _renderer2.default)(target).get(0)) {\n        return false;\n      }\n\n      return true;\n    }\n  }, {\n    key: \"_createListOption\",\n    value: function value(dataList) {\n      var _this2 = this;\n\n      return {\n        dataSource: dataList,\n        onItemRendered: function onItemRendered(e) {\n          return _this2._onListItemRendered(e);\n        },\n        onItemClick: function onItemClick(e) {\n          return _this2._onListItemClick(e);\n        },\n        itemTemplate: function itemTemplate(item, index) {\n          return _this2._renderTemplate(_this2.tooltip.option(\"target\"), item.data, item.currentData || item.data, index, item.color);\n        }\n      };\n    }\n  }, {\n    key: \"_createList\",\n    value: function value(dataList) {\n      return this.scheduler._createComponent((0, _renderer2.default)(\"<div>\"), _uiList2.default, this._createListOption(dataList));\n    }\n  }, {\n    key: \"_onListItemRendered\",\n    value: function value(e) {}\n  }, {\n    key: \"_getTargetData\",\n    value: function value(data, $appointment) {\n      return this.scheduler.fire(\"getTargetedAppointmentData\", data, $appointment);\n    }\n  }, {\n    key: \"_renderTemplate\",\n    value: function value(target, data, currentData, index, color) {\n      this._createTemplate(data, currentData, color);\n\n      var template = this.scheduler._getAppointmentTemplate(this._getItemListTemplateName());\n\n      return this._createFunctionTemplate(template, data, this._getTargetData(data, target), index);\n    }\n  }, {\n    key: \"_createFunctionTemplate\",\n    value: function value(template, data, targetData, index) {\n      return createDefaultTooltipTemplate(template, data, targetData, index);\n    }\n  }, {\n    key: \"_getItemListTemplateName\",\n    value: function value() {\n      return \"appointmentTooltipTemplate\";\n    }\n  }, {\n    key: \"_getItemListDefaultTemplateName\",\n    value: function value() {\n      return \"appointmentTooltip\";\n    }\n  }, {\n    key: \"_onListItemClick\",\n    value: function value(e) {\n      this.hide();\n\n      if (this._canRaiseClickEvent()) {\n        this._raiseClickEventAndShowAppointmentPopup(e);\n      } else {\n        this.scheduler.showAppointmentPopup(e.itemData.data, false, e.itemData.currentData);\n      }\n    }\n  }, {\n    key: \"_canRaiseClickEvent\",\n    value: function value() {\n      return true;\n    }\n  }, {\n    key: \"_raiseClickEventAndShowAppointmentPopup\",\n    value: function value(e) {\n      var config = {\n        itemData: e.itemData.data,\n        itemElement: e.itemElement\n      };\n      var showEditAppointmentPopupAction = this.createAppointmentClickAction();\n      showEditAppointmentPopupAction(this.createClickEventArgument(config, e));\n    }\n  }, {\n    key: \"createAppointmentClickAction\",\n    value: function value() {\n      var _this3 = this;\n\n      return this.scheduler._createActionByOption(\"onAppointmentClick\", {\n        afterExecute: function afterExecute(e) {\n          var config = e.args[0];\n          config.event.stopPropagation();\n\n          _this3.scheduler.fire(\"showEditAppointmentPopup\", {\n            data: config.appointmentData\n          });\n        }\n      });\n    }\n  }, {\n    key: \"createClickEventArgument\",\n    value: function value(config, clickArg) {\n      var result = (0, _extend.extendFromObject)(this.scheduler.fire(\"mapAppointmentFields\", config), clickArg, false);\n      return this.trimClickEventArgument(result);\n    }\n  }, {\n    key: \"trimClickEventArgument\",\n    value: function value(e) {\n      delete e.itemData;\n      delete e.itemIndex;\n      delete e.itemElement;\n      return e;\n    }\n  }, {\n    key: \"_onDeleteButtonClick\",\n    value: function value() {\n      this.hide();\n    }\n  }, {\n    key: \"_createTemplate\",\n    value: function value(data, currentData, color) {\n      var _this4 = this;\n\n      this.scheduler._defaultTemplates[this._getItemListDefaultTemplateName()] = new _function_template2.default(function (options) {\n        var $container = (0, _renderer2.default)(options.container);\n        $container.append(_this4._createItemListContent(data, currentData, color));\n        return $container;\n      });\n    }\n  }, {\n    key: \"_createItemListContent\",\n    value: function value(data, currentData, color) {\n      var editing = this.scheduler.option(\"editing\"),\n          isAllDay = this.scheduler.fire(\"getField\", \"allDay\", data),\n          text = this.scheduler.fire(\"getField\", \"text\", data),\n          startDateTimeZone = this.scheduler.fire(\"getField\", \"startDateTimeZone\", data),\n          endDateTimeZone = this.scheduler.fire(\"getField\", \"endDateTimeZone\", data),\n          startDate = this.scheduler.fire(\"convertDateByTimezone\", this.scheduler.fire(\"getField\", \"startDate\", currentData), startDateTimeZone),\n          endDate = this.scheduler.fire(\"convertDateByTimezone\", this.scheduler.fire(\"getField\", \"endDate\", currentData), endDateTimeZone);\n      var $itemElement = (0, _renderer2.default)(\"<div>\").addClass(TOOLTIP_APPOINTMENT_ITEM);\n      $itemElement.append(this._createItemListMarker(color));\n      $itemElement.append(this._createItemListInfo(text, this._formatDate(startDate, endDate, isAllDay)));\n\n      if (editing && true === editing.allowDeleting || true === editing) {\n        $itemElement.append(this._createDeleteButton(data, currentData));\n      }\n\n      return $itemElement;\n    }\n  }, {\n    key: \"_createItemListMarker\",\n    value: function value(color) {\n      var $marker = (0, _renderer2.default)(\"<div>\").addClass(TOOLTIP_APPOINTMENT_ITEM_MARKER);\n      var $markerBody = (0, _renderer2.default)(\"<div>\").addClass(TOOLTIP_APPOINTMENT_ITEM_MARKER_BODY);\n      $marker.append($markerBody);\n      color && color.done(function (value) {\n        return $markerBody.css(\"background\", value);\n      });\n      return $marker;\n    }\n  }, {\n    key: \"_createItemListInfo\",\n    value: function value(text, formattedDate) {\n      var result = (0, _renderer2.default)(\"<div>\").addClass(TOOLTIP_APPOINTMENT_ITEM_CONTENT);\n      var $title = (0, _renderer2.default)(\"<div>\").addClass(TOOLTIP_APPOINTMENT_ITEM_CONTENT_SUBJECT).text(text);\n      var $date = (0, _renderer2.default)(\"<div>\").addClass(TOOLTIP_APPOINTMENT_ITEM_CONTENT_DATE).text(formattedDate);\n      return result.append($title).append($date);\n    }\n  }, {\n    key: \"_createDeleteButton\",\n    value: function value(data, currentData) {\n      var _this5 = this;\n\n      var $container = (0, _renderer2.default)(\"<div>\").addClass(TOOLTIP_APPOINTMENT_ITEM_DELETE_BUTTON_CONTAINER),\n          $deleteButton = (0, _renderer2.default)(\"<div>\").addClass(TOOLTIP_APPOINTMENT_ITEM_DELETE_BUTTON);\n      $container.append($deleteButton);\n\n      this.scheduler._createComponent($deleteButton, _button2.default, {\n        icon: \"trash\",\n        stylingMode: \"text\",\n        onClick: function onClick(e) {\n          _this5._onDeleteButtonClick();\n\n          _this5.scheduler._checkRecurringAppointment(data, currentData, currentData.startDate, function () {\n            return _this5.scheduler.deleteAppointment(data);\n          }, true);\n\n          e.event.stopPropagation();\n        }\n      });\n\n      return $container;\n    }\n  }, {\n    key: \"_formatDate\",\n    value: function value(startDate, endDate, isAllDay) {\n      var result = \"\";\n      this.scheduler.fire(\"formatDates\", {\n        startDate: startDate,\n        endDate: endDate,\n        formatType: this._getTypeFormat(startDate, endDate, isAllDay),\n        callback: function callback(value) {\n          return result = value;\n        }\n      });\n      return result;\n    }\n  }, {\n    key: \"_getTypeFormat\",\n    value: function value(startDate, endDate, isAllDay) {\n      if (isAllDay) {\n        return \"DATE\";\n      }\n\n      if (\"month\" !== this.scheduler.option(\"currentView\") && _date2.default.sameDate(startDate, endDate)) {\n        return \"TIME\";\n      }\n\n      return \"DATETIME\";\n    }\n  }]);\n\n  return TooltipStrategyBase;\n}();","map":null,"metadata":{},"sourceType":"script"}