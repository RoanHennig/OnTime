{"ast":null,"code":"/**\r\n * DevExtreme (ui/scheduler/shaders/ui.scheduler.current_time_shader.vertical.js)\r\n * Version: 19.1.6 (build 19263-1729)\r\n * Build date: Fri Sep 20 2019\r\n *\r\n * Copyright (c) 2012 - 2019 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar $ = require(\"../../../core/renderer\"),\n    Shader = require(\"./ui.scheduler.current_time_shader\");\n\nvar DATE_TIME_SHADER_ALL_DAY_CLASS = \"dx-scheduler-date-time-shader-all-day\",\n    DATE_TIME_SHADER_TOP_CLASS = \"dx-scheduler-date-time-shader-top\",\n    DATE_TIME_SHADER_BOTTOM_CLASS = \"dx-scheduler-date-time-shader-bottom\";\nvar VerticalCurrentTimeShader = Shader.inherit({\n  _renderShader: function _renderShader() {\n    var shaderHeight = this._getShaderHeight(),\n        maxHeight = this._getShaderMaxHeight(),\n        renderSolidShader = false;\n\n    if (shaderHeight > maxHeight) {\n      shaderHeight = maxHeight;\n      renderSolidShader = true;\n    }\n\n    if (shaderHeight >= 0) {\n      this._$shader.height(shaderHeight);\n\n      var groupCount = this._workspace._getGroupCount() || 1;\n\n      if (renderSolidShader) {\n        this._renderTopShader(this._$shader, shaderHeight, this._$container.get(0).getBoundingClientRect().width, 0);\n\n        this._renderAllDayShader(this._$container.get(0).getBoundingClientRect().width, 0);\n      } else {\n        for (var i = 0; i < groupCount; i++) {\n          var shaderWidth = this._getShaderWidth(i);\n\n          this._renderTopShader(this._$shader, shaderHeight, shaderWidth, i);\n\n          this._renderBottomShader(this._$shader, maxHeight - shaderHeight, shaderWidth, i);\n\n          this._renderAllDayShader(shaderWidth, i);\n        }\n      }\n    }\n  },\n  _renderTopShader: function _renderTopShader($shader, height, width, i) {\n    this._$topShader = $(\"<div>\").addClass(DATE_TIME_SHADER_TOP_CLASS);\n    width && this._$topShader.width(width) && this._$topShader.height(height);\n\n    this._$topShader.css(\"marginTop\", this._getShaderTopOffset(i));\n\n    this._$topShader.css(\"left\", this._getShaderOffset(i, width));\n\n    $shader.append(this._$topShader);\n  },\n  _renderBottomShader: function _renderBottomShader($shader, height, width, i) {\n    this._$bottomShader = $(\"<div>\").addClass(DATE_TIME_SHADER_BOTTOM_CLASS);\n    this._$bottomShader.width(width - this._workspace.getCellWidth()) && this._$bottomShader.height(height);\n\n    this._$bottomShader.css(\"left\", this._getShaderOffset(i, width - this._workspace.getCellWidth()));\n\n    $shader.append(this._$bottomShader);\n  },\n  _renderAllDayShader: function _renderAllDayShader(shaderWidth, i) {\n    if (this._workspace.option(\"showAllDayPanel\")) {\n      this._$allDayIndicator = $(\"<div>\").addClass(DATE_TIME_SHADER_ALL_DAY_CLASS);\n\n      this._$allDayIndicator.height(this._workspace.getAllDayHeight());\n\n      this._$allDayIndicator.width(shaderWidth);\n\n      this._$allDayIndicator.css(\"left\", this._getShaderOffset(i, shaderWidth));\n\n      this._workspace._$allDayPanel.prepend(this._$allDayIndicator);\n    }\n  },\n  _getShaderOffset: function _getShaderOffset(i, width) {\n    return this._workspace.getGroupedStrategy().getShaderOffset(i, width);\n  },\n  _getShaderTopOffset: function _getShaderTopOffset(i) {\n    return this._workspace.getGroupedStrategy().getShaderTopOffset(i);\n  },\n  _getShaderHeight: function _getShaderHeight(i, width) {\n    return this._workspace.getGroupedStrategy().getShaderHeight();\n  },\n  _getShaderMaxHeight: function _getShaderMaxHeight(i, width) {\n    return this._workspace.getGroupedStrategy().getShaderMaxHeight();\n  },\n  _getShaderWidth: function _getShaderWidth(i) {\n    return this._workspace.getGroupedStrategy().getShaderWidth(i);\n  },\n  clean: function clean() {\n    this.callBase();\n    this._workspace && this._workspace._$allDayPanel && this._workspace._$allDayPanel.find(\".\" + DATE_TIME_SHADER_ALL_DAY_CLASS).remove();\n  }\n});\nmodule.exports = VerticalCurrentTimeShader;","map":null,"metadata":{},"sourceType":"script"}