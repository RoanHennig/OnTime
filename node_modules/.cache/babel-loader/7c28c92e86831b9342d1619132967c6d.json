{"ast":null,"code":"/**\r\n * DevExtreme (ui/scheduler/rendering_strategies/ui.scheduler.appointments.strategy.horizontal_month.js)\r\n * Version: 19.1.6 (build 19263-1729)\r\n * Build date: Fri Sep 20 2019\r\n *\r\n * Copyright (c) 2012 - 2019 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n\n      if (\"value\" in descriptor) {\n        descriptor.writable = true;\n      }\n\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) {\n      defineProperties(Constructor.prototype, protoProps);\n    }\n\n    if (staticProps) {\n      defineProperties(Constructor, staticProps);\n    }\n\n    return Constructor;\n  };\n}();\n\nvar _get = function get(object, property, receiver) {\n  if (null === object) {\n    object = Function.prototype;\n  }\n\n  var desc = Object.getOwnPropertyDescriptor(object, property);\n\n  if (void 0 === desc) {\n    var parent = Object.getPrototypeOf(object);\n\n    if (null === parent) {\n      return;\n    } else {\n      return get(parent, property, receiver);\n    }\n  } else {\n    if (\"value\" in desc) {\n      return desc.value;\n    } else {\n      var getter = desc.get;\n\n      if (void 0 === getter) {\n        return;\n      }\n\n      return getter.call(receiver);\n    }\n  }\n};\n\nvar _uiSchedulerAppointmentsStrategy = require(\"./ui.scheduler.appointments.strategy.horizontal_month_line\");\n\nvar _uiSchedulerAppointmentsStrategy2 = _interopRequireDefault(_uiSchedulerAppointmentsStrategy);\n\nvar _extend = require(\"../../../core/utils/extend\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (\"object\" === typeof call || \"function\" === typeof call) ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (\"function\" !== typeof superClass && null !== superClass) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n\n  if (superClass) {\n    Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n  }\n}\n\nvar MONTH_APPOINTMENT_HEIGHT_RATIO = .6,\n    MONTH_APPOINTMENT_MIN_OFFSET = 26,\n    MONTH_APPOINTMENT_MAX_OFFSET = 30,\n    MONTH_DROPDOWN_APPOINTMENT_MIN_RIGHT_OFFSET = 36,\n    MONTH_DROPDOWN_APPOINTMENT_MAX_RIGHT_OFFSET = 60;\n\nvar HorizontalMonthRenderingStrategy = function (_HorizontalMonthLineA) {\n  _inherits(HorizontalMonthRenderingStrategy, _HorizontalMonthLineA);\n\n  function HorizontalMonthRenderingStrategy() {\n    _classCallCheck(this, HorizontalMonthRenderingStrategy);\n\n    return _possibleConstructorReturn(this, (HorizontalMonthRenderingStrategy.__proto__ || Object.getPrototypeOf(HorizontalMonthRenderingStrategy)).apply(this, arguments));\n  }\n\n  _createClass(HorizontalMonthRenderingStrategy, [{\n    key: \"_getAppointmentParts\",\n    value: function value(appointmentGeometry, appointmentSettings, startDate) {\n      var deltaWidth = appointmentGeometry.sourceAppointmentWidth - appointmentGeometry.reducedWidth,\n          height = appointmentGeometry.height,\n          fullWeekAppointmentWidth = this._getFullWeekAppointmentWidth(appointmentSettings.groupIndex),\n          maxAppointmentWidth = this._getMaxAppointmentWidth(startDate),\n          longPartCount = Math.ceil(deltaWidth / fullWeekAppointmentWidth) - 1,\n          tailWidth = Math.floor(deltaWidth % fullWeekAppointmentWidth) || fullWeekAppointmentWidth,\n          result = [],\n          totalWidth = appointmentGeometry.reducedWidth + tailWidth,\n          currentPartTop = appointmentSettings.top + this.getDefaultCellHeight(),\n          left = this._calculateMultiWeekAppointmentLeftOffset(appointmentSettings.hMax, fullWeekAppointmentWidth);\n\n      if (\"vertical\" === this.instance._groupOrientation) {\n        left += this.instance.fire(\"getWorkSpaceDateTableOffset\");\n      }\n\n      for (var i = 0; i < longPartCount; i++) {\n        if (totalWidth > maxAppointmentWidth) {\n          break;\n        }\n\n        result.push((0, _extend.extend)(true, {}, appointmentSettings, {\n          top: currentPartTop,\n          left: left,\n          height: height,\n          width: fullWeekAppointmentWidth,\n          appointmentReduced: \"body\",\n          rowIndex: ++appointmentSettings.rowIndex,\n          cellIndex: 0\n        }));\n        currentPartTop += this.getDefaultCellHeight();\n        totalWidth += fullWeekAppointmentWidth;\n      }\n\n      if (tailWidth) {\n        if (this._isRtl()) {\n          left += fullWeekAppointmentWidth - tailWidth;\n        }\n\n        result.push((0, _extend.extend)(true, {}, appointmentSettings, {\n          top: currentPartTop,\n          left: left,\n          height: height,\n          width: tailWidth,\n          appointmentReduced: \"tail\",\n          rowIndex: ++appointmentSettings.rowIndex,\n          cellIndex: 0\n        }));\n      }\n\n      return result;\n    }\n  }, {\n    key: \"_calculateMultiWeekAppointmentLeftOffset\",\n    value: function value(max, width) {\n      return this._isRtl() ? max : max - width;\n    }\n  }, {\n    key: \"_correctRtlCoordinatesParts\",\n    value: function value() {}\n  }, {\n    key: \"_getFullWeekAppointmentWidth\",\n    value: function value(groupIndex) {\n      this.instance.fire(\"getFullWeekAppointmentWidth\", {\n        groupIndex: groupIndex,\n        callback: function (width) {\n          this._maxFullWeekAppointmentWidth = width;\n        }.bind(this)\n      });\n      return this._maxFullWeekAppointmentWidth;\n    }\n  }, {\n    key: \"_getAppointmentDefaultHeight\",\n    value: function value() {\n      return this._getAppointmentHeightByTheme();\n    }\n  }, {\n    key: \"_getAppointmentMinHeight\",\n    value: function value() {\n      return this._getAppointmentDefaultHeight();\n    }\n  }, {\n    key: \"_checkLongCompactAppointment\",\n    value: function value(item, result) {\n      this._splitLongCompactAppointment(item, result);\n\n      return result;\n    }\n  }, {\n    key: \"_columnCondition\",\n    value: function value(a, b) {\n      var isSomeEdge = this._isSomeEdge(a, b);\n\n      var columnCondition = this._normalizeCondition(a.left, b.left, isSomeEdge),\n          rowCondition = this._normalizeCondition(a.top, b.top, isSomeEdge),\n          cellPositionCondition = this._normalizeCondition(a.cellPosition, b.cellPosition, isSomeEdge);\n\n      return rowCondition ? rowCondition : columnCondition ? columnCondition : cellPositionCondition ? cellPositionCondition : a.isStart - b.isStart;\n    }\n  }, {\n    key: \"createTaskPositionMap\",\n    value: function value(items) {\n      return _get(HorizontalMonthRenderingStrategy.prototype.__proto__ || Object.getPrototypeOf(HorizontalMonthRenderingStrategy.prototype), \"createTaskPositionMap\", this).call(this, items, true);\n    }\n  }, {\n    key: \"_getSortedPositions\",\n    value: function value(map) {\n      return _get(HorizontalMonthRenderingStrategy.prototype.__proto__ || Object.getPrototypeOf(HorizontalMonthRenderingStrategy.prototype), \"_getSortedPositions\", this).call(this, map, true);\n    }\n  }, {\n    key: \"_customizeAppointmentGeometry\",\n    value: function value(coordinates) {\n      var config = this._calculateGeometryConfig(coordinates);\n\n      return this._customizeCoordinates(coordinates, config.height, config.appointmentCountPerCell, config.offset);\n    }\n  }, {\n    key: \"_getDefaultRatio\",\n    value: function value() {\n      return MONTH_APPOINTMENT_HEIGHT_RATIO;\n    }\n  }, {\n    key: \"_getOffsets\",\n    value: function value() {\n      return {\n        unlimited: MONTH_APPOINTMENT_MIN_OFFSET,\n        auto: MONTH_APPOINTMENT_MAX_OFFSET\n      };\n    }\n  }, {\n    key: \"getDropDownAppointmentWidth\",\n    value: function value(intervalCount) {\n      if (this.instance.fire(\"isAdaptive\")) {\n        return this.getDropDownButtonAdaptiveSize();\n      }\n\n      var offset = intervalCount > 1 ? MONTH_DROPDOWN_APPOINTMENT_MAX_RIGHT_OFFSET : MONTH_DROPDOWN_APPOINTMENT_MIN_RIGHT_OFFSET;\n      return this.getDefaultCellWidth() - offset;\n    }\n  }, {\n    key: \"needCorrectAppointmentDates\",\n    value: function value() {\n      return false;\n    }\n  }, {\n    key: \"_needVerticalGroupBounds\",\n    value: function value() {\n      return false;\n    }\n  }, {\n    key: \"_needHorizontalGroupBounds\",\n    value: function value() {\n      return true;\n    }\n  }]);\n\n  return HorizontalMonthRenderingStrategy;\n}(_uiSchedulerAppointmentsStrategy2.default);\n\nmodule.exports = HorizontalMonthRenderingStrategy;","map":null,"metadata":{},"sourceType":"script"}