{"ast":null,"code":"/**\r\n * DevExtreme (ui/text_box/ui.text_editor.mask.strategy.android.js)\r\n * Version: 19.1.6 (build 19263-1729)\r\n * Build date: Fri Sep 20 2019\r\n *\r\n * Copyright (c) 2012 - 2019 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n\n      if (\"value\" in descriptor) {\n        descriptor.writable = true;\n      }\n\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) {\n      defineProperties(Constructor.prototype, protoProps);\n    }\n\n    if (staticProps) {\n      defineProperties(Constructor, staticProps);\n    }\n\n    return Constructor;\n  };\n}();\n\nvar _get = function get(object, property, receiver) {\n  if (null === object) {\n    object = Function.prototype;\n  }\n\n  var desc = Object.getOwnPropertyDescriptor(object, property);\n\n  if (void 0 === desc) {\n    var parent = Object.getPrototypeOf(object);\n\n    if (null === parent) {\n      return;\n    } else {\n      return get(parent, property, receiver);\n    }\n  } else {\n    if (\"value\" in desc) {\n      return desc.value;\n    } else {\n      var getter = desc.get;\n\n      if (void 0 === getter) {\n        return;\n      }\n\n      return getter.call(receiver);\n    }\n  }\n};\n\nvar _uiText_editorMaskStrategy = require(\"./ui.text_editor.mask.strategy.base\");\n\nvar _uiText_editorMaskStrategy2 = _interopRequireDefault(_uiText_editorMaskStrategy);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction _toConsumableArray(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  } else {\n    return Array.from(arr);\n  }\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (\"object\" === typeof call || \"function\" === typeof call) ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (\"function\" !== typeof superClass && null !== superClass) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n\n  if (superClass) {\n    Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n  }\n}\n\nvar DELETE_INPUT_TYPE = \"deleteContentBackward\";\n\nvar AndroidMaskStrategy = function (_BaseMaskStrategy) {\n  _inherits(AndroidMaskStrategy, _BaseMaskStrategy);\n\n  function AndroidMaskStrategy() {\n    _classCallCheck(this, AndroidMaskStrategy);\n\n    return _possibleConstructorReturn(this, (AndroidMaskStrategy.__proto__ || Object.getPrototypeOf(AndroidMaskStrategy)).apply(this, arguments));\n  }\n\n  _createClass(AndroidMaskStrategy, [{\n    key: \"_getStrategyName\",\n    value: function value() {\n      return \"android\";\n    }\n  }, {\n    key: \"getHandleEventNames\",\n    value: function value() {\n      return [].concat(_toConsumableArray(_get(AndroidMaskStrategy.prototype.__proto__ || Object.getPrototypeOf(AndroidMaskStrategy.prototype), \"getHandleEventNames\", this).call(this)), [\"beforeInput\"]);\n    }\n  }, {\n    key: \"_beforeInputHandler\",\n    value: function value() {\n      this._prevCaret = this.editorCaret();\n    }\n  }, {\n    key: \"_inputHandler\",\n    value: function value(_ref) {\n      var originalEvent = _ref.originalEvent;\n\n      if (!originalEvent) {\n        return;\n      }\n\n      var inputType = originalEvent.inputType,\n          data = originalEvent.data;\n      var currentCaret = this.editorCaret();\n\n      if (inputType === DELETE_INPUT_TYPE) {\n        var length = this._prevCaret.end - this._prevCaret.start || 1;\n        this.editor.setBackwardDirection();\n\n        this._updateEditorMask({\n          start: currentCaret.start,\n          length: length,\n          text: this._getEmptyString(length)\n        });\n      } else {\n        if (!currentCaret.end) {\n          return;\n        }\n\n        this.editorCaret(currentCaret);\n\n        var _length = this._prevCaret.end - this._prevCaret.start;\n\n        var newData = data + (_length ? this._getEmptyString(_length - data.length) : \"\");\n        this.editor.setForwardDirection();\n\n        var hasValidChars = this._updateEditorMask({\n          start: this._prevCaret.start,\n          length: _length || newData.length,\n          text: newData\n        });\n\n        if (!hasValidChars) {\n          this.editorCaret(this._prevCaret);\n        }\n      }\n    }\n  }, {\n    key: \"_getEmptyString\",\n    value: function value(length) {\n      return Array(length + 1).join(\" \");\n    }\n  }, {\n    key: \"_updateEditorMask\",\n    value: function value(args) {\n      var textLength = args.text.length;\n\n      var updatedCharsCount = this.editor._handleChain(args);\n\n      if (this.editor.isForwardDirection()) {\n        var _editorCaret = this.editorCaret(),\n            start = _editorCaret.start,\n            end = _editorCaret.end;\n\n        var correction = updatedCharsCount - textLength;\n\n        if (start <= updatedCharsCount && updatedCharsCount > 1) {\n          this.editorCaret({\n            start: start + correction,\n            end: end + correction\n          });\n        }\n\n        this.editor.isForwardDirection() && this.editor._adjustCaret();\n      }\n\n      this.editor._displayMask();\n\n      return !!updatedCharsCount;\n    }\n  }]);\n\n  return AndroidMaskStrategy;\n}(_uiText_editorMaskStrategy2.default);\n\nexports.default = AndroidMaskStrategy;","map":null,"metadata":{},"sourceType":"script"}