{"ast":null,"code":"/**\r\n * DevExtreme (ui/scheduler/workspaces/ui.scheduler.work_space.grouped.strategy.vertical.js)\r\n * Version: 19.1.6 (build 19263-1729)\r\n * Build date: Fri Sep 20 2019\r\n *\r\n * Copyright (c) 2012 - 2019 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar GroupedStrategy = require(\"./ui.scheduler.work_space.grouped.strategy\");\n\nvar VERTICAL_GROUPED_ATTR = \"dx-group-column-count\";\nvar DATE_HEADER_OFFSET = 10,\n    WORK_SPACE_BORDER = 1;\nvar VerticalGroupedStrategy = GroupedStrategy.inherit({\n  prepareCellIndexes: function prepareCellIndexes(cellCoordinates, groupIndex, inAllDayRow) {\n    var rowIndex = cellCoordinates.rowIndex + groupIndex * this._workSpace._getRowCount();\n\n    if (this._workSpace.supportAllDayRow() && this._workSpace.option(\"showAllDayPanel\")) {\n      rowIndex += groupIndex;\n\n      if (!inAllDayRow) {\n        rowIndex += 1;\n      }\n    }\n\n    return {\n      rowIndex: rowIndex,\n      cellIndex: cellCoordinates.cellIndex\n    };\n  },\n  calculateCellIndex: function calculateCellIndex(rowIndex, cellIndex) {\n    rowIndex %= this._workSpace._getRowCount();\n    return this._workSpace._getRowCount() * cellIndex + rowIndex;\n  },\n  getGroupIndex: function getGroupIndex(rowIndex, cellIndex) {\n    return Math.floor(rowIndex / this._workSpace._getRowCount());\n  },\n  calculateHeaderCellRepeatCount: function calculateHeaderCellRepeatCount() {\n    return 1;\n  },\n  insertAllDayRowsIntoDateTable: function insertAllDayRowsIntoDateTable() {\n    return this._workSpace.option(\"showAllDayPanel\");\n  },\n  getTotalCellCount: function getTotalCellCount(groupCount) {\n    return this._workSpace._getCellCount();\n  },\n  getTotalRowCount: function getTotalRowCount() {\n    return this._workSpace._getRowCount() * this._workSpace._getGroupCount();\n  },\n  addAdditionalGroupCellClasses: function addAdditionalGroupCellClasses(cellClass, index, i, j) {\n    cellClass = this._addLastGroupCellClass(cellClass, i + 1);\n    return this._addFirstGroupCellClass(cellClass, i + 1);\n  },\n  _addLastGroupCellClass: function _addLastGroupCellClass(cellClass, index) {\n    if (index % this._workSpace._getRowCount() === 0) {\n      return cellClass + \" \" + this.getLastGroupCellClass();\n    }\n\n    return cellClass;\n  },\n  _addFirstGroupCellClass: function _addFirstGroupCellClass(cellClass, index) {\n    if ((index - 1) % this._workSpace._getRowCount() === 0) {\n      return cellClass + \" \" + this.getFirstGroupCellClass();\n    }\n\n    return cellClass;\n  },\n  getHorizontalMax: function getHorizontalMax(groupIndex) {\n    return this._workSpace.getMaxAllowedPosition()[0];\n  },\n  getVerticalMax: function getVerticalMax(groupIndex) {\n    var maxAllowedPosition = this._workSpace.getMaxAllowedVerticalPosition()[groupIndex];\n\n    maxAllowedPosition += this._getOffsetByAllDayPanel(groupIndex);\n    return maxAllowedPosition;\n  },\n  _getOffsetByAllDayPanel: function _getOffsetByAllDayPanel(groupIndex) {\n    var result = 0;\n\n    if (this._workSpace.supportAllDayRow() && this._workSpace.option(\"showAllDayPanel\")) {\n      result = this._workSpace.getCellHeight() * (groupIndex + 1);\n    }\n\n    return result;\n  },\n  _getGroupTop: function _getGroupTop(groupIndex) {\n    return this._workSpace.getMaxAllowedVerticalPosition()[groupIndex] - this._workSpace.getCellHeight() * this._workSpace._getRowCount();\n  },\n  calculateTimeCellRepeatCount: function calculateTimeCellRepeatCount() {\n    return this._workSpace._getGroupCount() || 1;\n  },\n  getWorkSpaceMinWidth: function getWorkSpaceMinWidth() {\n    var minWidth = this._workSpace._getWorkSpaceWidth(),\n        workspaceContainerWidth = this._workSpace.$element().get(0).getBoundingClientRect().width - this._workSpace.getTimePanelWidth() - this._workSpace.getGroupTableWidth() - 2 * WORK_SPACE_BORDER;\n\n    if (minWidth < workspaceContainerWidth) {\n      minWidth = workspaceContainerWidth;\n    }\n\n    return minWidth;\n  },\n  getAllDayOffset: function getAllDayOffset() {\n    return 0;\n  },\n  getAllDayTableHeight: function getAllDayTableHeight() {\n    return 0;\n  },\n  getGroupCountAttr: function getGroupCountAttr() {\n    return {\n      attr: VERTICAL_GROUPED_ATTR,\n      count: this._workSpace.option(\"groups\") && this._workSpace.option(\"groups\").length\n    };\n  },\n  getLeftOffset: function getLeftOffset() {\n    return this._workSpace.getTimePanelWidth() + this._workSpace.getGroupTableWidth();\n  },\n  getGroupBoundsOffset: function getGroupBoundsOffset(cellCount, $cells, cellWidth, coordinates) {\n    var groupIndex = coordinates.groupIndex,\n        startOffset = $cells.eq(0).offset().left,\n        endOffset = $cells.eq(cellCount - 1).offset().left + cellWidth,\n        dayHeight = this._workSpace._calculateDayDuration() / this._workSpace.option(\"hoursInterval\") * this._workSpace.getCellHeight(),\n        scrollTop = this.getScrollableScrollTop(),\n        topOffset = groupIndex * dayHeight + this._workSpace._$thead.get(0).getBoundingClientRect().height + this._workSpace.invoke(\"getHeaderHeight\") + DATE_HEADER_OFFSET - scrollTop;\n\n    if (this._workSpace.option(\"showAllDayPanel\") && this._workSpace.supportAllDayRow()) {\n      topOffset += this._workSpace.getCellHeight() * (groupIndex + 1);\n    }\n\n    var bottomOffset = topOffset + dayHeight;\n    return {\n      left: startOffset,\n      right: endOffset,\n      top: topOffset,\n      bottom: bottomOffset\n    };\n  },\n  shiftIndicator: function shiftIndicator($indicator, height, rtlOffset, i) {\n    var offset = this._workSpace.getIndicatorOffset(0),\n        tableOffset = this._workSpace.option(\"crossScrollingEnabled\") ? 0 : this._workSpace.getGroupTableWidth(),\n        horizontalOffset = rtlOffset ? rtlOffset - offset : offset,\n        verticalOffset = this._workSpace._getRowCount() * this._workSpace.getCellHeight() * i;\n\n    if (this._workSpace.supportAllDayRow() && this._workSpace.option(\"showAllDayPanel\")) {\n      verticalOffset += this._workSpace.getAllDayHeight() * (i + 1);\n    }\n\n    $indicator.css(\"left\", horizontalOffset + tableOffset);\n    $indicator.css(\"top\", height + verticalOffset);\n  },\n  getShaderOffset: function getShaderOffset(i, width) {\n    var offset = this._workSpace.option(\"crossScrollingEnabled\") ? 0 : this._workSpace.getGroupTableWidth();\n    return this._workSpace.option(\"rtlEnabled\") ? this._$container.get(0).getBoundingClientRect().width - offset - this._workSpace.getWorkSpaceLeftOffset() - width : offset;\n  },\n  getShaderTopOffset: function getShaderTopOffset(i) {\n    return 0;\n  },\n  getShaderHeight: function getShaderHeight() {\n    var height = this._workSpace.getIndicationHeight();\n\n    if (this._workSpace.supportAllDayRow() && this._workSpace.option(\"showAllDayPanel\")) {\n      height += this._workSpace.getCellHeight();\n    }\n\n    return height;\n  },\n  getShaderMaxHeight: function getShaderMaxHeight() {\n    var height = this._workSpace._getRowCount() * this._workSpace.getCellHeight();\n\n    if (this._workSpace.supportAllDayRow() && this._workSpace.option(\"showAllDayPanel\")) {\n      height += this._workSpace.getCellHeight();\n    }\n\n    return height;\n  },\n  getShaderWidth: function getShaderWidth(i) {\n    return this._workSpace.getIndicationWidth(0);\n  },\n  getScrollableScrollTop: function getScrollableScrollTop(allDay) {\n    return this._workSpace.getScrollable().scrollTop();\n  }\n});\nmodule.exports = VerticalGroupedStrategy;","map":null,"metadata":{},"sourceType":"script"}